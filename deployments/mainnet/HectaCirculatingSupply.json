{
  "address": "0x44F759187a1694F22EC16D44809c120DADF315FD",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_hecta",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "circulatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNonCirculating",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hecta",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonCirculatingAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nonCirculatingAddresses",
          "type": "address[]"
        }
      ],
      "name": "setNonCirculatingAddresses",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0afbff484f9832115a6134906c4fb70fb8a28ef615c91c1e89d25c812875344d",
  "receipt": {
    "to": null,
    "from": "0xAd14706CE4a7FC73eF640AaB3002c7B97f42b604",
    "contractAddress": "0x44F759187a1694F22EC16D44809c120DADF315FD",
    "transactionIndex": 135,
    "gasUsed": "440385",
    "logsBloom": "0x
    "blockHash": "0x3e5106b97a5422c6e40fa7b36b6d648124d73f85b225daeb4445857135890b70",
    "transactionHash": "0x0afbff484f9832115a6134906c4fb70fb8a28ef615c91c1e89d25c812875344d",
    "logs": [
      {
        "transactionIndex": 135,
        "blockNumber": 20195423,
        "transactionHash": "0x0afbff484f9832115a6134906c4fb70fb8a28ef615c91c1e89d25c812875344d",
        "address": "0x44F759187a1694F22EC16D44809c120DADF315FD",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000ad14706ce4a7fc73ef640aab3002c7b97f42b604"
        ],
        "data": "0x",
        "logIndex": 333,
        "blockHash": "0x3e5106b97a5422c6e40fa7b36b6d648124d73f85b225daeb4445857135890b70"
      }
    ],
    "blockNumber": 20195423,
    "cumulativeGasUsed": "12456497",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x343915085b919fbd4414F7046f903d194c6F60EE"
  ],
  "solcInputHash": "ca12d8af804850e81cc663dd9685dae9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_hecta\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"circulatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonCirculating\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hecta\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonCirculatingAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nonCirculatingAddresses\",\"type\":\"address[]\"}],\"name\":\"setNonCirculatingAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HectaCirculatingSupply.sol\":\"HectaCirculatingSupply\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/HectaCirculatingSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IHectaCirculatingSupply.sol\\\";\\n\\ncontract HectaCirculatingSupply is Ownable, IHectaCirculatingSupply {\\n    IERC20 public hecta;\\n    address[] public nonCirculatingAddresses;\\n\\n    constructor(IERC20 _hecta) {\\n        hecta = _hecta;\\n    }\\n\\n    function circulatingSupply() external view returns (uint256) {\\n        uint256 _totalSupply = IERC20(hecta).totalSupply();\\n\\n        uint256 _circulatingSupply = _totalSupply - getNonCirculating();\\n\\n        return _circulatingSupply;\\n    }\\n\\n    function getNonCirculating() public view returns (uint256) {\\n        uint256 _nonCirculatingHecta;\\n\\n        for (uint256 i = 0; i < nonCirculatingAddresses.length; i++) {\\n            _nonCirculatingHecta = _nonCirculatingHecta + IERC20(hecta).balanceOf(nonCirculatingAddresses[i]);\\n        }\\n\\n        return _nonCirculatingHecta;\\n    }\\n\\n    function setNonCirculatingAddresses(address[] calldata _nonCirculatingAddresses) external onlyOwner {\\n        nonCirculatingAddresses = _nonCirculatingAddresses;\\n    }\\n}\\n\",\"keccak256\":\"0x4c73b83852e8a33ef5ddb32934559c6ecbbcca15b831e1833a76c6ded410ba4a\",\"license\":\"MIT\"},\"contracts/interfaces/IHectaCirculatingSupply.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IHectaCirculatingSupply {\\n    function circulatingSupply() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x856e161bda26b44636c2af27ed2504e49246bdc8bbf048e36ac08a1b8775ed2f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161071738038061071783398101604081905261002f916100ad565b6100383361005d565b600180546001600160a01b0319166001600160a01b03929092169190911790556100dd565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100bf57600080fd5b81516001600160a01b03811681146100d657600080fd5b9392505050565b61062b806100ec6000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100f05780639358928b14610101578063cf7ed41e14610109578063f2fde38b1461011c57600080fd5b806350ffe7ef1461008d57806359ff4afd146100a2578063715018a6146100d25780637ad6e6a3146100da575b600080fd5b6100a061009b3660046104d8565b61012f565b005b6001546100b5906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a0610148565b6100e261015c565b6040519081526020016100c9565b6000546001600160a01b03166100b5565b6100e2610246565b6100b561011736600461054d565b6102dd565b6100a061012a366004610566565b610307565b61013761039c565b61014360028383610453565b505050565b61015061039c565b61015a60006103f6565b565b60008060005b60025481101561024057600154600280546001600160a01b03909216916370a082319190849081106101965761019661058f565b60009182526020909120015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b039091166004820152602401602060405180830381865afa1580156101fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022291906105a5565b61022c90836105d4565b915080610238816105ec565b915050610162565b50919050565b600080600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c091906105a5565b905060006102cc61015c565b6102d69083610607565b9392505050565b600281815481106102ed57600080fd5b6000918252602090912001546001600160a01b0316905081565b61030f61039c565b6001600160a01b0381166103905760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610399816103f6565b50565b6000546001600160a01b0316331461015a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610387565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209081019282156104b3579160200282015b828111156104b357815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03843516178255602090920191600190910190610473565b506104bf9291506104c3565b5090565b5b808211156104bf57600081556001016104c4565b600080602083850312156104eb57600080fd5b823567ffffffffffffffff8082111561050357600080fd5b818501915085601f83011261051757600080fd5b81358181111561052657600080fd5b8660208260051b850101111561053b57600080fd5b60209290920196919550909350505050565b60006020828403121561055f57600080fd5b5035919050565b60006020828403121561057857600080fd5b81356001600160a01b03811681146102d657600080fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156105b757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156105e7576105e76105be565b500190565b6000600019821415610600576106006105be565b5060010190565b600082821015610619576106196105be565b50039056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b146100f05780639358928b14610101578063cf7ed41e14610109578063f2fde38b1461011c57600080fd5b806350ffe7ef1461008d57806359ff4afd146100a2578063715018a6146100d25780637ad6e6a3146100da575b600080fd5b6100a061009b3660046104d8565b61012f565b005b6001546100b5906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a0610148565b6100e261015c565b6040519081526020016100c9565b6000546001600160a01b03166100b5565b6100e2610246565b6100b561011736600461054d565b6102dd565b6100a061012a366004610566565b610307565b61013761039c565b61014360028383610453565b505050565b61015061039c565b61015a60006103f6565b565b60008060005b60025481101561024057600154600280546001600160a01b03909216916370a082319190849081106101965761019661058f565b60009182526020909120015460405160e083901b7fffffffff000000000000000000000000000000000000000000000000000000001681526001600160a01b039091166004820152602401602060405180830381865afa1580156101fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022291906105a5565b61022c90836105d4565b915080610238816105ec565b915050610162565b50919050565b600080600160009054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561029c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c091906105a5565b905060006102cc61015c565b6102d69083610607565b9392505050565b600281815481106102ed57600080fd5b6000918252602090912001546001600160a01b0316905081565b61030f61039c565b6001600160a01b0381166103905760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b610399816103f6565b50565b6000546001600160a01b0316331461015a5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610387565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b8280548282559060005260206000209081019282156104b3579160200282015b828111156104b357815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03843516178255602090920191600190910190610473565b506104bf9291506104c3565b5090565b5b808211156104bf57600081556001016104c4565b600080602083850312156104eb57600080fd5b823567ffffffffffffffff8082111561050357600080fd5b818501915085601f83011261051757600080fd5b81358181111561052657600080fd5b8660208260051b850101111561053b57600080fd5b60209290920196919550909350505050565b60006020828403121561055f57600080fd5b5035919050565b60006020828403121561057857600080fd5b81356001600160a01b03811681146102d657600080fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156105b757600080fd5b5051919050565b634e487b7160e01b600052601160045260246000fd5b600082198211156105e7576105e76105be565b500190565b6000600019821415610600576106006105be565b5060010190565b600082821015610619576106196105be565b50039056fea164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/HectaCirculatingSupply.sol:HectaCirculatingSupply",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 6208,
        "contract": "contracts/HectaCirculatingSupply.sol:HectaCirculatingSupply",
        "label": "hecta",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)1052"
      },
      {
        "astId": 6211,
        "contract": "contracts/HectaCirculatingSupply.sol:HectaCirculatingSupply",
        "label": "nonCirculatingAddresses",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)1052": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      }
    }
  }
}