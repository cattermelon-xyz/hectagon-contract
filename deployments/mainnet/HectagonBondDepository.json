{
  "address": "0x9aE390630EB2e60999E5065267b02f477bEeEBCF",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IHectagonAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_hecta",
          "type": "address"
        },
        {
          "internalType": "contract IgHECTA",
          "name": "_gHecta",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "UNAUTHORIZED",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IHectagonAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noteId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toBuyer",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toDaoCommunity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toDaoInvestment",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldControlVariable",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newControlVariable",
          "type": "uint64"
        }
      ],
      "name": "Tuned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "change",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IHectagonAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_market",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[2]",
          "name": "_booleans",
          "type": "bool[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint32[2]",
          "name": "_intervals",
          "type": "uint32[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentControlVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoCommunityPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoInvestmentPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "finalPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBondDepository.UserBond",
          "name": "userBond_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "totalDebt",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "maxPayout",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "sold",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "partnerTermCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "partnerTerms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_unstake",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_unstake",
          "type": "bool"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referTermCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referTerms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referrerPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyerPercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHectagonAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "daoInvestmentPercent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoCommunityPercent_",
          "type": "uint256"
        }
      ],
      "name": "setDaoRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_partner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "setPartnerTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setPartnerTermCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_referrerPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyerPercent",
          "type": "uint256"
        }
      ],
      "name": "setReferTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setReferTermCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "controlVariable",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint64",
          "name": "maxDebt",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7c27873283965826b162de10e39aa081d34fcdb0e7530a1d097a3682ee135cc6",
  "receipt": {
    "to": null,
    "from": "0xAd14706CE4a7FC73eF640AaB3002c7B97f42b604",
    "contractAddress": "0x9aE390630EB2e60999E5065267b02f477bEeEBCF",
    "transactionIndex": 51,
    "gasUsed": "4102823",
    "logsBloom": "0x
    "blockHash": "0xbab0a952ac2d40c1cb8b43306fbc8102bfcbe5edb00ff8cd65d085e427b1776d",
    "transactionHash": "0x7c27873283965826b162de10e39aa081d34fcdb0e7530a1d097a3682ee135cc6",
    "logs": [
      {
        "transactionIndex": 51,
        "blockNumber": 20195468,
        "transactionHash": "0x7c27873283965826b162de10e39aa081d34fcdb0e7530a1d097a3682ee135cc6",
        "address": "0x9aE390630EB2e60999E5065267b02f477bEeEBCF",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad"
        ],
        "data": "0x0000000000000000000000006fcb3832d50d9142ce88985ab0b95c71227366b3",
        "logIndex": 142,
        "blockHash": "0xbab0a952ac2d40c1cb8b43306fbc8102bfcbe5edb00ff8cd65d085e427b1776d"
      },
      {
        "transactionIndex": 51,
        "blockNumber": 20195468,
        "transactionHash": "0x7c27873283965826b162de10e39aa081d34fcdb0e7530a1d097a3682ee135cc6",
        "address": "0x343915085b919fbd4414F7046f903d194c6F60EE",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000009ae390630eb2e60999e5065267b02f477beeebcf",
          "0x0000000000000000000000007d31ed03c2442f9ffc4f22d90772ee1f32fa9b0d"
        ],
        "data": "0x000000000000000000000000002cd76fe086b93ce2f768a00b22a00000000000",
        "logIndex": 143,
        "blockHash": "0xbab0a952ac2d40c1cb8b43306fbc8102bfcbe5edb00ff8cd65d085e427b1776d"
      }
    ],
    "blockNumber": 20195468,
    "cumulativeGasUsed": "9176293",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6FCb3832d50D9142ce88985ab0b95c71227366B3",
    "0x343915085b919fbd4414F7046f903d194c6F60EE",
    "0x7D31ed03c2442F9ffc4f22d90772EE1f32fa9b0D",
    "0x4059c4a0b8a2B528C4f2E101A3bB8fB169aBa4fB"
  ],
  "solcInputHash": "ca12d8af804850e81cc663dd9685dae9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IHectagonAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_hecta\",\"type\":\"address\"},{\"internalType\":\"contract IgHECTA\",\"name\":\"_gHecta\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"UNAUTHORIZED\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IHectagonAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noteId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBuyer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toDaoCommunity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toDaoInvestment\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldControlVariable\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newControlVariable\",\"type\":\"uint64\"}],\"name\":\"Tuned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"change\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IHectagonAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_market\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[2]\",\"name\":\"_booleans\",\"type\":\"bool[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint32[2]\",\"name\":\"_intervals\",\"type\":\"uint32[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoCommunityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoInvestmentPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"finalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct IBondDepository.UserBond\",\"name\":\"userBond_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"totalDebt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxPayout\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sold\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerTermCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerTerms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_unstake\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_unstake\",\"type\":\"bool\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referTermCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referTerms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHectagonAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daoInvestmentPercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoCommunityPercent_\",\"type\":\"uint256\"}],\"name\":\"setDaoRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setPartnerTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setPartnerTermCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrerPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyerPercent\",\"type\":\"uint256\"}],\"name\":\"setReferTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setReferTermCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"controlVariable\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"maxDebt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"details\":\"current price should be in 9 decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, fixed term]\",\"_intervals\":\"[deposit interval (seconds), tune interval (seconds)]\",\"_market\":\"[capacity (in HECTA or quote), initial price / HECTA (9 decimals), debt buffer (3 decimals)]\",\"_quoteToken\":\"token used to deposit\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"currentControlVariable(uint256)\":{\"details\":\"accounts for control variable adjustment\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"control variable for market in HECTA decimals\"}},\"currentDebt(uint256)\":{\"details\":\"accounts for debt decay since last deposit\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"current debt for market in HECTA decimals\"}},\"debtDecay(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of debt to decay\"}},\"debtRatio(uint256)\":{\"details\":\"uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"debt ratio for market in quote decimals\"}},\"deposit(uint256,uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"_0\":\"the pending notes for the user\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"marketPrice(uint256)\":{\"details\":\"accounts for debt and control variable decay since last deposit (vs _marketPrice())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"price for market in HECTA decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program\"}},\"payoutFor(uint256,uint256)\":{\"details\":\"accounts for debt and control variable decay so it is up to date1e18 = hecta decimals (9) + market price decimals (9)\",\"params\":{\"_amount\":\"amount of quote tokens to spend\",\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of HECTA to be paid in HECTA decimals\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"matured_\":\"   if the payout can be redeemed\",\"payout_\":\"    the payout due, in gHecta\"}},\"pullNote(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[],bool)\":{\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_unstake\":\"option for redeem gHecta or Hecta\",\"_user\":\"the user to redeem for\"},\"returns\":{\"_0\":\"sum of payout sent, in gHecta or Hecta\"}},\"redeemAll(address,bool)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_unstake\":\"option for redeem gHecta or Hecta\",\"_user\":\"user to redeem all notes for\"},\"returns\":{\"_0\":\"sum of payout sent, in gHecta or Hecta\"}}},\"title\":\"Hectagon Bond Depository\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"create(address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"notice\":\"creates a new market type\"},\"currentControlVariable(uint256)\":{\"notice\":\"up to date control variable\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(uint256)\":{\"notice\":\"amount of debt to decay from total debt for market ID\"},\"debtRatio(uint256)\":{\"notice\":\"calculate current ratio of debt to supply\"},\"deposit(uint256,uint256,uint256,address,address)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsFor(address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"marketPrice(uint256)\":{\"notice\":\"calculate current market price of quote token in base token\"},\"payoutFor(uint256,uint256)\":{\"notice\":\"payout due for amount of quote tokens\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[],bool)\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address,bool)\":{\"notice\":\"redeem all redeemable markets for user\"},\"setPartnerTerm(address,uint256,uint256)\":{\"notice\":\"set partner term\"},\"setPartnerTermCap(uint256)\":{\"notice\":\"set Cap for referrer % reward\"},\"setReferTerm(address,uint256,uint256)\":{\"notice\":\"set referrer term\"},\"setReferTermCap(uint256)\":{\"notice\":\"set Cap for referrer % reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondDepository.sol\":\"HectagonBondDepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x9750c6fec736eb3320e85924f36a3060fa4a4ab1758d06d9585e175d164eefdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./types/NoteKeeper.sol\\\";\\nimport \\\"./interfaces/IBondDepository.sol\\\";\\nimport \\\"./interfaces/IgHECTA.sol\\\";\\n\\n/// @title Hectagon Bond Depository\\n\\ncontract HectagonBondDepository is IBondDepository, NoteKeeper {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event CreateMarket(uint256 indexed id, address indexed baseToken, address indexed quoteToken, uint256 initialPrice);\\n    event CloseMarket(uint256 indexed id);\\n    event Bond(\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 price,\\n        uint256 noteId,\\n        address indexed buyer,\\n        address indexed referral,\\n        uint256 commission,\\n        uint256 toBuyer,\\n        uint256 toDaoCommunity,\\n        uint256 toDaoInvestment\\n    );\\n    event Tuned(uint256 indexed id, uint64 oldControlVariable, uint64 newControlVariable);\\n\\n    /* ======== STATE VARIABLES ======== */\\n\\n    // Storage\\n    Market[] public markets; // persistent market data\\n    Terms[] public terms; // deposit construction data\\n    Metadata[] public metadata; // extraneous market data\\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\\n\\n    // Queries\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        IHectagonAuthority _authority,\\n        IERC20 _hecta,\\n        IgHECTA _gHecta,\\n        ITreasury _treasury\\n    ) NoteKeeper(_authority, _hecta, _gHecta, _treasury) {\\n        // save gas for users by bulk approving stake() transactions\\n        _hecta.approve(address(_gHecta), 1e45);\\n    }\\n\\n    /* ======== DEPOSIT ======== */\\n\\n    /**\\n     * @notice              deposit quote tokens in exchange for a bond from a specified market\\n     * @param _id           the ID of the market\\n     * @param _amount       the amount of quote token to spend\\n     * @param _maxPrice     the maximum price at which to buy\\n     * @param _user         the recipient of the payout\\n     * @param _referral     the front end operator address\\n     */\\n    function deposit(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    ) external override returns (UserBond memory userBond_) {\\n        Give memory give; // Give struct inherited fom FrontEndRewarder\\n        Market storage market = markets[_id];\\n        Terms memory term = terms[_id];\\n        uint48 currentTime = uint48(block.timestamp);\\n\\n        // Markets end at a defined timestamp\\n        // |-------------------------------------| t\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n        // Debt and the control variable decay over time\\n        _decay(_id, currentTime);\\n\\n        // Users input a maximum price, which protects them from price changes after\\n        // entering the mempool. max price is a slippage mitigation measure\\n        uint256 price = _marketPrice(_id);\\n        require(price <= _maxPrice, \\\"Depository: more than max price\\\");\\n\\n        /**\\n         * payout for the deposit = amount / price\\n         *\\n         * where\\n         * payout = HECTA out\\n         * amount = quote tokens in\\n         * price = quote tokens : hecta (i.e. 42069 DAI : HECTA)\\n         *\\n         * 1e18 = HECTA decimals (9) + price decimals (9)\\n         */\\n        uint256 payout_ = ((_amount * 1e18) / price) / (10**metadata[_id].quoteDecimals);\\n\\n        // markets have a max payout amount, capping size because deposits\\n        // do not experience slippage. max payout is recalculated upon tuning\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n\\n        /*\\n         * each market is initialized with a capacity\\n         *\\n         * this is either the number of HECTA that the market can sell\\n         * (if capacity in quote is false),\\n         *\\n         * or the number of quote tokens that the market can buy\\n         * (if capacity in quote is true)\\n         */\\n        market.capacity -= market.capacityInQuote ? _amount : payout_;\\n\\n        /**\\n         * bonds mature with a cliff at a set timestamp\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\n         * after the expiry timestamp, the entire payout can be redeemed\\n         *\\n         * there are two types of bonds: fixed-term and fixed-expiration\\n         *\\n         * fixed-term bonds mature in a set amount of time from deposit\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n         *\\n         * fixed-expiration bonds mature at a set timestamp\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\n         */\\n        userBond_.expiry = term.fixedTerm ? term.vesting + currentTime : term.vesting;\\n\\n        // markets keep track of how many quote tokens have been\\n        // purchased, and how much HECTA has been sold\\n        market.purchased += _amount;\\n        market.sold += uint64(payout_);\\n\\n        // incrementing total debt raises the price of the next bond\\n        market.totalDebt += uint64(payout_);\\n\\n        /**\\n         * user data is stored as Notes. these are isolated array entries\\n         * storing the amount due, the time created, the time when payout\\n         * is redeemable, the time when payout was redeemed, and the ID\\n         * of the market deposited into\\n         */\\n        (userBond_.index, give) = addNote(_user, payout_, uint48(userBond_.expiry), uint48(_id), _referral);\\n\\n        userBond_.finalPayout = payout_ + give.toBuyer;\\n\\n        emit Bond(\\n            _id,\\n            _amount,\\n            price,\\n            userBond_.index,\\n            _user,\\n            _referral,\\n            give.toRefer,\\n            give.toBuyer,\\n            give.toDaoCommunity,\\n            give.toDaoInvestment\\n        );\\n\\n        // transfer payment to treasury\\n        market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\\n\\n        // if max debt is breached, the market is closed\\n        // this a circuit breaker\\n        if (term.maxDebt < market.totalDebt) {\\n            market.capacity = 0;\\n            emit CloseMarket(_id);\\n        } else {\\n            // if market will continue, the control variable is tuned to hit targets on time\\n            _tune(_id, currentTime);\\n        }\\n\\n        return userBond_;\\n    }\\n\\n    /**\\n     * @notice             decay debt, and adjust control variable if there is an active change\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _decay(uint256 _id, uint48 _time) internal {\\n        // Debt decay\\n\\n        /*\\n         * Debt is a time-decayed sum of tokens spent in a market\\n         * Debt is added when deposits occur and removed over time\\n         * |\\n         * |    debt falls with\\n         * |   / \\\\  inactivity       / \\\\\\n         * | /     \\\\              /\\\\/    \\\\\\n         * |         \\\\           /         \\\\\\n         * |           \\\\      /\\\\/            \\\\\\n         * |             \\\\  /  and rises       \\\\\\n         * |                with deposits\\n         * |\\n         * |------------------------------------| t\\n         */\\n        markets[_id].totalDebt -= debtDecay(_id);\\n        metadata[_id].lastDecay = _time;\\n\\n        // Control variable decay\\n\\n        // The bond control variable is continually tuned. When it is lowered (which\\n        // lowers the market price), the change is carried out smoothly over time.\\n        if (adjustments[_id].active) {\\n            Adjustment storage adjustment = adjustments[_id];\\n\\n            ControlDecay memory controlDecay = _controlDecay(_id);\\n            terms[_id].controlVariable -= controlDecay.decay;\\n\\n            if (controlDecay.active) {\\n                adjustment.change -= controlDecay.decay;\\n                adjustment.timeToAdjusted -= controlDecay.secondsSince;\\n                adjustment.lastAdjustment = _time;\\n            } else {\\n                adjustment.active = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice             auto-adjust control variable to hit capacity/spend target\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _tune(uint256 _id, uint48 _time) internal {\\n        Metadata memory meta = metadata[_id];\\n\\n        if (_time >= meta.lastTune + meta.tuneInterval) {\\n            Market memory market = markets[_id];\\n\\n            // compute seconds remaining until market will conclude\\n            uint256 timeRemaining = terms[_id].conclusion - _time;\\n            uint256 price = _marketPrice(_id);\\n\\n            // standardize capacity into an base token amount\\n            // hecta decimals (9) + price decimals (9)\\n            uint256 capacity = market.capacityInQuote\\n                ? ((market.capacity * 1e18) / price) / (10**meta.quoteDecimals)\\n                : market.capacity;\\n\\n            /**\\n             * calculate the correct payout to complete on time assuming each bond\\n             * will be max size in the desired deposit interval for the remaining time\\n             *\\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\n             * is 10,000 HECTA. max payout would be 1,000 HECTA (10,000 * 1 / 10).\\n             */\\n            markets[_id].maxPayout = uint64((capacity * meta.depositInterval) / timeRemaining);\\n\\n            // calculate the ideal total debt to satisfy capacity in the remaining time\\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\\n\\n            // derive a new control variable from the target debt and current supply\\n            uint64 newControlVariable = uint64((price * hecta.totalSupply()) / targetDebt);\\n\\n            emit Tuned(_id, terms[_id].controlVariable, newControlVariable);\\n\\n            if (newControlVariable >= terms[_id].controlVariable) {\\n                terms[_id].controlVariable = newControlVariable;\\n            } else {\\n                // if decrease, control variable change will be carried out over the tune interval\\n                // this is because price will be lowered\\n                uint64 change = terms[_id].controlVariable - newControlVariable;\\n                adjustments[_id] = Adjustment(change, _time, meta.tuneInterval, true);\\n            }\\n            metadata[_id].lastTune = _time;\\n        }\\n    }\\n\\n    /* ======== CREATE ======== */\\n\\n    /**\\n     * @notice             creates a new market type\\n     * @dev                current price should be in 9 decimals.\\n     * @param _quoteToken  token used to deposit\\n     * @param _market      [capacity (in HECTA or quote), initial price / HECTA (9 decimals), debt buffer (3 decimals)]\\n     * @param _booleans    [capacity in quote, fixed term]\\n     * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n     * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\\n     * @return id_         ID of new bond market\\n     */\\n    function create(\\n        IERC20 _quoteToken,\\n        uint256[3] memory _market,\\n        bool[2] memory _booleans,\\n        uint256[2] memory _terms,\\n        uint32[2] memory _intervals\\n    ) external override onlyPolicy returns (uint256 id_) {\\n        // the length of the program, in seconds\\n        uint256 secondsToConclusion = _terms[1] - block.timestamp;\\n\\n        // the decimal count of the quote token\\n        uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\n\\n        /*\\n         * initial target debt is equal to capacity (this is the amount of debt\\n         * that will decay over in the length of the program if price remains the same).\\n         * it is converted into base token terms if passed in in quote token terms.\\n         *\\n         * 1e18 = hecta decimals (9) + initial price decimals (9)\\n         */\\n        uint64 targetDebt = uint64(_booleans[0] ? ((_market[0] * 1e18) / _market[1]) / 10**decimals : _market[0]);\\n\\n        /*\\n         * max payout is the amount of capacity that should be utilized in a deposit\\n         * interval. for example, if capacity is 1,000 HECTA, there are 10 days to conclusion,\\n         * and the preferred deposit interval is 1 day, max payout would be 100 HECTA.\\n         */\\n        uint64 maxPayout = uint64((targetDebt * _intervals[0]) / secondsToConclusion);\\n\\n        /*\\n         * max debt serves as a circuit breaker for the market. let's say the quote\\n         * token is a stablecoin, and that stablecoin depegs. without max debt, the\\n         * market would continue to buy until it runs out of capacity. this is\\n         * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\n         * note that its likely advisable to keep this buffer wide.\\n         * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\\n         */\\n        uint256 maxDebt = targetDebt + ((targetDebt * _market[2]) / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\\n\\n        /*\\n         * the control variable is set so that initial price equals the desired\\n         * initial price. the control variable is the ultimate determinant of price,\\n         * so we compute this last.\\n         *\\n         * price = control variable * debt ratio\\n         * debt ratio = total debt / supply\\n         * therefore, control variable = price / debt ratio\\n         */\\n        uint256 controlVariable = (_market[1] * hecta.totalSupply()) / targetDebt;\\n\\n        // depositing into, or getting info for, the created market uses this ID\\n        id_ = markets.length;\\n\\n        markets.push(\\n            Market({\\n                quoteToken: _quoteToken,\\n                capacityInQuote: _booleans[0],\\n                capacity: _market[0],\\n                totalDebt: targetDebt,\\n                maxPayout: maxPayout,\\n                purchased: 0,\\n                sold: 0\\n            })\\n        );\\n\\n        terms.push(\\n            Terms({\\n                fixedTerm: _booleans[1],\\n                controlVariable: uint64(controlVariable),\\n                vesting: uint48(_terms[0]),\\n                conclusion: uint48(_terms[1]),\\n                maxDebt: uint64(maxDebt)\\n            })\\n        );\\n\\n        metadata.push(\\n            Metadata({\\n                lastTune: uint48(block.timestamp),\\n                lastDecay: uint48(block.timestamp),\\n                length: uint48(secondsToConclusion),\\n                depositInterval: _intervals[0],\\n                tuneInterval: _intervals[1],\\n                quoteDecimals: uint8(decimals)\\n            })\\n        );\\n\\n        marketsForQuote[address(_quoteToken)].push(id_);\\n\\n        emit CreateMarket(id_, address(hecta), address(_quoteToken), _market[1]);\\n    }\\n\\n    /**\\n     * @notice             disable existing market\\n     * @param _id          ID of market to close\\n     */\\n    function close(uint256 _id) external override onlyPolicy {\\n        terms[_id].conclusion = uint48(block.timestamp);\\n        markets[_id].capacity = 0;\\n        emit CloseMarket(_id);\\n    }\\n\\n    /* ======== EXTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice             calculate current market price of quote token in base token\\n     * @dev                accounts for debt and control variable decay since last deposit (vs _marketPrice())\\n     * @param _id          ID of market\\n     * @return             price for market in HECTA decimals\\n     *\\n     * price is derived from the equation\\n     *\\n     * p = cv * dr\\n     *\\n     * where\\n     * p = price\\n     * cv = control variable\\n     * dr = debt ratio\\n     *\\n     * dr = d / s\\n     *\\n     * where\\n     * d = debt\\n     * s = supply of token at market creation\\n     *\\n     * d -= ( d * (dt / l) )\\n     *\\n     * where\\n     * dt = change in time\\n     * l = length of program\\n     */\\n    function marketPrice(uint256 _id) public view override returns (uint256) {\\n        return (currentControlVariable(_id) * debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice             payout due for amount of quote tokens\\n     * @dev                accounts for debt and control variable decay so it is up to date\\n     * @param _amount      amount of quote tokens to spend\\n     * @param _id          ID of market\\n     * @return             amount of HECTA to be paid in HECTA decimals\\n     *\\n     * @dev 1e18 = hecta decimals (9) + market price decimals (9)\\n     */\\n    function payoutFor(uint256 _amount, uint256 _id) external view override returns (uint256) {\\n        Metadata memory meta = metadata[_id];\\n        return (_amount * 1e18) / marketPrice(_id) / 10**meta.quoteDecimals;\\n    }\\n\\n    /**\\n     * @notice             calculate current ratio of debt to supply\\n     * @dev                uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\\n     * @param _id          ID of market\\n     * @return             debt ratio for market in quote decimals\\n     */\\n    function debtRatio(uint256 _id) public view override returns (uint256) {\\n        return (currentDebt(_id) * (10**metadata[_id].quoteDecimals)) / hecta.totalSupply();\\n    }\\n\\n    /**\\n     * @notice             calculate debt factoring in decay\\n     * @dev                accounts for debt decay since last deposit\\n     * @param _id          ID of market\\n     * @return             current debt for market in HECTA decimals\\n     */\\n    function currentDebt(uint256 _id) public view override returns (uint256) {\\n        return markets[_id].totalDebt - debtDecay(_id);\\n    }\\n\\n    /**\\n     * @notice             amount of debt to decay from total debt for market ID\\n     * @param _id          ID of market\\n     * @return             amount of debt to decay\\n     */\\n    function debtDecay(uint256 _id) public view override returns (uint64) {\\n        Metadata memory meta = metadata[_id];\\n\\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\\n\\n        return uint64((markets[_id].totalDebt * secondsSince) / meta.length);\\n    }\\n\\n    /**\\n     * @notice             up to date control variable\\n     * @dev                accounts for control variable adjustment\\n     * @param _id          ID of market\\n     * @return             control variable for market in HECTA decimals\\n     */\\n    function currentControlVariable(uint256 _id) public view returns (uint256) {\\n        ControlDecay memory controlDecay = _controlDecay(_id);\\n        return terms[_id].controlVariable - controlDecay.decay;\\n    }\\n\\n    /**\\n     * @notice             is a given market accepting deposits\\n     * @param _id          ID of market\\n     */\\n    function isLive(uint256 _id) public view override returns (bool) {\\n        return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n    }\\n\\n    /**\\n     * @notice returns an array of all active market IDs\\n     */\\n    function liveMarkets() external view override returns (uint256[] memory) {\\n        uint256 num;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) {\\n                ids[nonce] = i;\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice             returns an array of all active market IDs for a given quote token\\n     * @param _token       quote token to check for\\n     */\\n    function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\n        uint256[] memory mkts = marketsForQuote[_token];\\n        uint256 num;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) {\\n                ids[nonce] = mkts[i];\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /* ======== INTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice                  calculate current market price of quote token in base token\\n     * @dev                     see marketPrice() for explanation of price computation\\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\n     * @param _id               market ID\\n     * @return                  price for market in HECTA decimals\\n     */\\n    function _marketPrice(uint256 _id) internal view returns (uint256) {\\n        return (terms[_id].controlVariable * _debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice                  calculate debt factoring in decay\\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\n     * @param _id               market ID\\n     * @return                  current debt for market in quote decimals\\n     */\\n    function _debtRatio(uint256 _id) internal view returns (uint256) {\\n        return (markets[_id].totalDebt * (10**metadata[_id].quoteDecimals)) / hecta.totalSupply();\\n    }\\n\\n    /**\\n     * @notice                  amount to decay control variable by\\n     * @param _id               ID of market\\n     * @return controlDecay\\n     */\\n    function _controlDecay(uint256 _id) internal view returns (ControlDecay memory controlDecay) {\\n        Adjustment memory info = adjustments[_id];\\n        if (!info.active) return controlDecay;\\n\\n        controlDecay.secondsSince = uint48(block.timestamp) - info.lastAdjustment;\\n\\n        controlDecay.active = controlDecay.secondsSince < info.timeToAdjusted;\\n        controlDecay.decay = controlDecay.active\\n            ? (info.change * controlDecay.secondsSince) / info.timeToAdjusted\\n            : info.change;\\n    }\\n}\\n\",\"keccak256\":\"0xf21fcf2d663d7150656470d28fa0d653cf14e728b76ca6db2eafa162de1c06f6\",\"license\":\"MIT\"},\"contracts/interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n    // Info about each type of market\\n    struct Market {\\n        uint256 capacity; // capacity remaining\\n        IERC20 quoteToken; // token to accept as payment\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in HECTA (false, default)\\n        uint64 totalDebt; // total debt from market\\n        uint64 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n        uint64 sold; // base tokens out\\n        uint256 purchased; // quote tokens in\\n    }\\n\\n    // Info for creating new markets\\n    struct Terms {\\n        bool fixedTerm; // fixed term or fixed expiration\\n        uint64 controlVariable; // scaling variable for price\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n        uint64 maxDebt; // 9 decimal debt maximum in HECTA\\n    }\\n\\n    // Additional info about market.\\n    struct Metadata {\\n        uint48 lastTune; // last timestamp when control variable was tuned\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n        uint48 depositInterval; // target frequency of deposits\\n        uint48 tuneInterval; // frequency of tuning\\n        uint8 quoteDecimals; // decimals of quote token\\n    }\\n\\n    // Control variable adjustment data\\n    struct Adjustment {\\n        uint64 change;\\n        uint48 lastAdjustment;\\n        uint48 timeToAdjusted;\\n        bool active;\\n    }\\n\\n    // user's bond info\\n    struct UserBond {\\n        uint256 finalPayout;\\n        uint256 expiry;\\n        uint256 index;\\n    }\\n\\n    struct ControlDecay {\\n        uint64 decay; // change in control variable\\n        uint48 secondsSince; // seconds since last change in control variable\\n        bool active; // whether or not change remains active\\n    }\\n\\n    /**\\n     * @notice deposit market\\n     * @param _bid uint256\\n     * @param _amount uint256\\n     * @param _maxPrice uint256\\n     * @param _user address\\n     * @param _referral address\\n     * @return userBond_ UserBond\\n     */\\n    function deposit(\\n        uint256 _bid,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    ) external returns (UserBond memory userBond_);\\n\\n    function create(\\n        IERC20 _quoteToken, // token used to deposit\\n        uint256[3] memory _market, // [capacity, initial price]\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\n        uint256[2] memory _terms, // [vesting, conclusion]\\n        uint32[2] memory _intervals // [deposit interval, tune interval]\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\n\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\n\\n    function debtRatio(uint256 _bid) external view returns (uint256);\\n\\n    function debtDecay(uint256 _bid) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd29ad3151a8150075e2ecd78f5042eeaf0b7d94ce6f9b24ad54a178c2d372b1e\",\"license\":\"MIT\"},\"contracts/interfaces/IHectagonAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IHectagonAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xfaa879566aba4585e5f8d1e7d14a0a811e93b9de12e7052db78f8add61ef05b0\",\"license\":\"MIT\"},\"contracts/interfaces/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface INoteKeeper {\\n    // Info for market note\\n    struct Note {\\n        uint256 payout; // gHecta remaining to be paid\\n        uint48 created; // time market was created\\n        uint48 matured; // timestamp when market is matured\\n        uint48 redeemed; // time market was redeemed\\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n    }\\n\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _unstake\\n    ) external returns (uint256);\\n\\n    function redeemAll(address _user, bool _unstake) external returns (uint256);\\n\\n    function pushNote(address to, uint256 index) external;\\n\\n    function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\n\\n    function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\\n\",\"keccak256\":\"0xfbbd756a3529fc5fe53ec335da832e45d1ac7d57baabdc3cbaafa6eda5464b51\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ITreasury {\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function withdraw(address _token, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb6fc1fe9fb92231c70a4d042409757db3655f168a3f33f59297d6e1a684af2db\",\"license\":\"MIT\"},\"contracts/interfaces/IgHECTA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\ninterface IgHECTA is IERC4626 {\\n    function nextEpoch() external returns (uint256);\\n\\n    function index() external view returns (uint256);\\n\\n    function setDistributor(address _distributor) external;\\n\\n    function bountyHunter() external;\\n}\\n\",\"keccak256\":\"0x1faea97343c58dc20391fe1045c0dc4717f60b3520723213d38daab74aaa7239\",\"license\":\"MIT\"},\"contracts/types/FrontEndRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../types/HectagonAccessControlled.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract FrontEndRewarder is HectagonAccessControlled {\\n    struct Give {\\n        uint256 toRefer;\\n        uint256 toDaoInvestment;\\n        uint256 toDaoCommunity;\\n        uint256 toBuyer;\\n    }\\n\\n    struct ReferTerm {\\n        uint256 referrerPercent; // reward for referrer (3 decimals: 100 = 1%)\\n        uint256 buyerPercent; // reward for bond buyer (3 decimals: 100 = 1%)\\n    }\\n\\n    struct PartnerTerm {\\n        uint256 amount; // partner's remaining hecta bonus, decimal 9\\n        uint256 percent; // partner's bonus percent per deposit, 3 decimals: 100 = 1%\\n    }\\n\\n    /* ========= STATE VARIABLES ========== */\\n\\n    mapping(address => uint256) public rewards; // rewards notes\\n\\n    mapping(address => PartnerTerm) public partnerTerms; // reward term for each partner\\n    mapping(address => ReferTerm) public referTerms; // reward term for refer\\n\\n    uint256 public referTermCap = 2_000; // % cap for referrer (3 decimals: 2,000 = 20%)\\n    uint256 public partnerTermCap = 10_000; // % cap for partner (3 decimals: 1,0000 = 100%)\\n\\n    uint256 public daoInvestmentPercent = 10_000; // 3 decimals: 10,000 = 100%\\n\\n    uint256 public daoCommunityPercent = 45_000; // 3 decimals: 45,000 = 450%\\n\\n    uint256 private immutable RATE_DENOMINATOR = 10_000;\\n\\n    IERC20 internal immutable hecta; // reward token\\n\\n    constructor(IHectagonAuthority _authority, IERC20 _hecta) HectagonAccessControlled(_authority) {\\n        hecta = _hecta;\\n    }\\n\\n    /* ========= EXTERNAL FUNCTIONS ========== */\\n\\n    // pay reward to referrer\\n    function getReward() external {\\n        uint256 reward = rewards[msg.sender];\\n\\n        rewards[msg.sender] = 0;\\n        hecta.transfer(msg.sender, reward);\\n    }\\n\\n    /* ========= INTERNAL ========== */\\n\\n    /**\\n     * @notice          add new market payout to user data\\n     * @return give     rewards data\\n     */\\n    function _giveRewards(\\n        uint256 _payout,\\n        address _referral,\\n        address _buyer\\n    ) internal returns (Give memory give) {\\n        // first we calculate rewards paid to the DAO and referrer\\n        give.toDaoInvestment += (_payout * daoInvestmentPercent) / RATE_DENOMINATOR;\\n        give.toDaoCommunity += (_payout * daoCommunityPercent) / RATE_DENOMINATOR;\\n\\n        // check partner logic\\n        if (partnerTerms[_buyer].percent > 0) {\\n            uint256 partnerBonus = (_payout * partnerTerms[_buyer].percent) / RATE_DENOMINATOR;\\n            if (partnerBonus >= partnerTerms[_buyer].amount) {\\n                give.toBuyer = partnerTerms[_buyer].amount;\\n            } else {\\n                give.toBuyer = partnerBonus;\\n            }\\n            partnerTerms[_buyer].amount -= give.toBuyer;\\n        } else {\\n            ReferTerm memory refTerm = referTerms[_referral];\\n\\n            if (refTerm.referrerPercent > 0) {\\n                give.toRefer = (_payout * refTerm.referrerPercent) / RATE_DENOMINATOR;\\n                rewards[_referral] += give.toRefer;\\n            }\\n\\n            if (refTerm.buyerPercent > 0) {\\n                give.toBuyer = (_payout * refTerm.buyerPercent) / RATE_DENOMINATOR;\\n            }\\n        }\\n\\n        return give;\\n    }\\n\\n    /**\\n     * @notice set Cap for referrer % reward\\n     */\\n    function setReferTermCap(uint256 _cap) external onlyGovernor {\\n        referTermCap = _cap;\\n    }\\n\\n    /**\\n     * @notice set Cap for referrer % reward\\n     */\\n    function setPartnerTermCap(uint256 _cap) external onlyGovernor {\\n        partnerTermCap = _cap;\\n    }\\n\\n    function setDaoRewards(uint256 daoInvestmentPercent_, uint256 daoCommunityPercent_) external onlyGovernor {\\n        daoInvestmentPercent = daoInvestmentPercent_;\\n        daoCommunityPercent = daoCommunityPercent_;\\n    }\\n\\n    /**\\n     * @notice set referrer term\\n     */\\n    function setReferTerm(\\n        address _referrer,\\n        uint256 _referrerPercent,\\n        uint256 _buyerPercent\\n    ) external onlyPolicy {\\n        require(_referrer != address(0), \\\"Zero address: Referrer\\\");\\n        require((_referrerPercent + _buyerPercent) <= referTermCap, \\\"reward too high\\\");\\n        referTerms[_referrer] = ReferTerm({referrerPercent: _referrerPercent, buyerPercent: _buyerPercent});\\n    }\\n\\n    /**\\n     * @notice set partner term\\n     */\\n    function setPartnerTerm(\\n        address _partner,\\n        uint256 _amount,\\n        uint256 _percent\\n    ) external onlyPolicy {\\n        require(_partner != address(0), \\\"Zero address: Partner\\\");\\n        require(_percent <= partnerTermCap, \\\"reward too high\\\");\\n        partnerTerms[_partner] = PartnerTerm(_amount, _percent);\\n    }\\n}\\n\",\"keccak256\":\"0x1f6e6bdb8636f60a0a858a13b1e9f3b16247c1da328b8e325270238aabaccd25\",\"license\":\"MIT\"},\"contracts/types/HectagonAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../interfaces/IHectagonAuthority.sol\\\";\\n\\nerror UNAUTHORIZED();\\n\\n/**\\n *   @dev Reasoning for this contract = modifiers literaly copy code\\n *   instead of pointing towards the logic to execute. Over many\\n *   functions this bloats contract size unnecessarily.\\n */\\nabstract contract HectagonAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IHectagonAuthority authority);\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IHectagonAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IHectagonAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== \\\"MODIFIERS\\\" ========== */\\n\\n    modifier onlyGovernor() {\\n        _onlyGovernor();\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        _onlyGuardian();\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        _onlyPolicy();\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        _onlyVault();\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IHectagonAuthority _newAuthority) external {\\n        _onlyGovernor();\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n\\n    /* ========== INTERNAL CHECKS ========== */\\n\\n    function _onlyGovernor() internal view {\\n        if (msg.sender != authority.governor()) revert UNAUTHORIZED();\\n    }\\n\\n    function _onlyGuardian() internal view {\\n        if (msg.sender != authority.guardian()) revert UNAUTHORIZED();\\n    }\\n\\n    function _onlyPolicy() internal view {\\n        if (msg.sender != authority.policy()) revert UNAUTHORIZED();\\n    }\\n\\n    function _onlyVault() internal view {\\n        if (msg.sender != authority.vault()) revert UNAUTHORIZED();\\n    }\\n}\\n\",\"keccak256\":\"0x84ae5913edc77581ba7c3932bb01494cf9bbd86b2fb9c1fbae37097f921a96e6\",\"license\":\"MIT\"},\"contracts/types/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport \\\"../types/FrontEndRewarder.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/INoteKeeper.sol\\\";\\nimport \\\"../interfaces/IgHECTA.sol\\\";\\n\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\n    mapping(address => Note[]) public notes; // user deposit data\\n    mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n\\n    IgHECTA internal immutable gHecta;\\n    ITreasury internal treasury;\\n\\n    constructor(\\n        IHectagonAuthority _authority,\\n        IERC20 _hecta,\\n        IgHECTA _ghecta,\\n        ITreasury _treasury\\n    ) FrontEndRewarder(_authority, _hecta) {\\n        gHecta = _ghecta;\\n        treasury = _treasury;\\n    }\\n\\n    // if treasury address changes on authority, update it\\n    function updateTreasury() external {\\n        require(\\n            msg.sender == authority.governor() ||\\n                msg.sender == authority.guardian() ||\\n                msg.sender == authority.policy(),\\n            \\\"Only authorized\\\"\\n        );\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /* ========== ADD ========== */\\n\\n    /**\\n     * @notice              adds a new Note for a user, stores Ref & DAO rewards, and mints & stakes payout & rewards\\n     * @param _user         the user that owns the Note\\n     * @param _payout       the amount of HECTA due to the user\\n     * @param _expiry       the timestamp when the Note is redeemable\\n     * @param _marketID     the ID of the market deposited into\\n     * @return give         rewards data\\n     */\\n    function addNote(\\n        address _user,\\n        uint256 _payout,\\n        uint48 _expiry,\\n        uint48 _marketID,\\n        address _referral\\n    ) internal returns (uint256, Give memory) {\\n        // front end operators can earn rewards by referring users\\n        Give memory give = _giveRewards(_payout, _referral, _user); // Give struct inherited fom FrontEndRewarder\\n        // the index of the note is the next in the user's array\\n        uint256 index_ = notes[_user].length;\\n\\n        uint256 finalPayout = give.toBuyer + _payout;\\n        uint256 daoAmount = give.toDaoCommunity + give.toDaoInvestment - give.toBuyer - give.toRefer;\\n\\n        // mint buyer's final payout and referer commission\\n        treasury.mint(address(this), finalPayout + give.toRefer);\\n\\n        // note that only the buyer's final payout gets staked (referer commission are in HECTA)\\n        uint256 shares = gHecta.deposit(finalPayout, address(this));\\n\\n        // mint Dao Community Fund and Dao Investment Fund, store in treasury\\n        treasury.mint(address(treasury), daoAmount);\\n\\n        // the new note is pushed to the user's array\\n        // This logic needs to be executed after staking\\n        notes[_user].push(\\n            Note({payout: shares, created: uint48(block.timestamp), matured: _expiry, redeemed: 0, marketID: _marketID})\\n        );\\n\\n        return (index_, give);\\n    }\\n\\n    /* ========== REDEEM ========== */\\n\\n    /**\\n     * @notice             redeem notes for user\\n     * @param _user        the user to redeem for\\n     * @param _indexes     the note indexes to redeem\\n     * @param _unstake     option for redeem gHecta or Hecta\\n     * @return sum of payout sent, in gHecta or Hecta\\n     */\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _unstake\\n    ) public override returns (uint256) {\\n        uint256 payout_;\\n        uint48 time = uint48(block.timestamp);\\n\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            (uint256 pay, bool matured) = pendingFor(_user, _indexes[i]);\\n\\n            if (matured) {\\n                notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\n                payout_ += pay;\\n            }\\n        }\\n\\n        if (_unstake) {\\n            return gHecta.redeem(payout_, _user, address(this)); // send payout as hecta\\n        } else {\\n            gHecta.transfer(_user, payout_); // send payout as gHecta\\n            return payout_;\\n        }\\n    }\\n\\n    /**\\n     * @notice             redeem all redeemable markets for user\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n     * @param _user        user to redeem all notes for\\n     * @param _unstake     option for redeem gHecta or Hecta\\n     * @return             sum of payout sent, in gHecta or Hecta\\n     */\\n    function redeemAll(address _user, bool _unstake) external returns (uint256) {\\n        return redeem(_user, indexesFor(_user), _unstake);\\n    }\\n\\n    /* ========== TRANSFER ========== */\\n\\n    /**\\n     * @notice             approve an address to transfer a note\\n     * @param _to          address to approve note transfer for\\n     * @param _index       index of note to approve transfer for\\n     */\\n    function pushNote(address _to, uint256 _index) external override {\\n        require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n        noteTransfers[msg.sender][_index] = _to;\\n    }\\n\\n    /**\\n     * @notice             transfer a note that has been approved by an address\\n     * @param _from        the address that approved the note transfer\\n     * @param _index       the index of the note to transfer (in the sender's array)\\n     */\\n    function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n        require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n        require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n        newIndex_ = notes[msg.sender].length;\\n        notes[msg.sender].push(notes[_from][_index]);\\n\\n        delete notes[_from][_index];\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    // Note info\\n\\n    /**\\n     * @notice             all pending notes for user\\n     * @param _user        the user to query notes for\\n     * @return             the pending notes for the user\\n     */\\n    function indexesFor(address _user) public view override returns (uint256[] memory) {\\n        Note[] memory info = notes[_user];\\n\\n        uint256 length;\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](length);\\n        uint256 position;\\n\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) {\\n                indexes[position] = i;\\n                position++;\\n            }\\n        }\\n\\n        return indexes;\\n    }\\n\\n    /**\\n     * @notice             calculate amount available for claim for a single note\\n     * @param _user        the user that the note belongs to\\n     * @param _index       the index of the note in the user's array\\n     * @return payout_     the payout due, in gHecta\\n     * @return matured_    if the payout can be redeemed\\n     */\\n    function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\\n        Note memory note = notes[_user][_index];\\n\\n        payout_ = note.payout;\\n        matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x201b7763ce3566866b9bf6a99bde67d13001a333230d5a92009094e2d112fb5a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102c85760003560e01c8063a42206101161017b578063c0aa0e8a116100d8578063e0b117ff1161008c578063e481b26511610071578063e481b265146107aa578063f1b7dc78146107bd578063ff43a1bf146107d057600080fd5b8063e0b117ff1461070b578063e3684e391461075357600080fd5b8063c9b67af5116100bd578063c9b67af5146106dd578063d62fbdd3146106e5578063d6db4df8146106f857600080fd5b8063c0aa0e8a14610666578063c3e0fb1c146106b557600080fd5b8063bc24cea91161012f578063bcb2966711610114578063bcb2966714610615578063bf7e214f14610628578063c0680e201461065357600080fd5b8063bc24cea91461056d578063bc3b2b121461058057600080fd5b8063abbf4b1711610160578063abbf4b17146104bb578063b1283e77146104e6578063b15780461461054657600080fd5b8063a422061014610495578063a5874627146104a857600080fd5b806346aed74e116102295780637a9e5e4b116101dd57806386ff8b84116101c257806386ff8b841461047b578063953db4a4146104845780639c7697871461048d57600080fd5b80637a9e5e4b146104335780637c770aae1461044657600080fd5b80636a6c575d1161020e5780636a6c575d146104045780636f345cae146104175780636f6ff0ad1461042057600080fd5b806346aed74e146103d157806364914439146103e457600080fd5b806327507458116102805780633adec5a7116102655780633adec5a71461037a5780633c4290e11461038d5780633d18b912146103c957600080fd5b806327507458146103445780633a3d63ba1461036757600080fd5b80630a9d85eb116102b15780630a9d85eb146103095780630aebeb4e1461031c57806321a7d29b1461033157600080fd5b806306d008db146102cd5780630700037d146102e9575b600080fd5b6102d660075481565b6040519081526020015b60405180910390f35b6102d66102f7366004613e4a565b60016020526000908152604090205481565b6102d6610317366004613e67565b6107e3565b61032f61032a366004613e67565b61083d565b005b6102d661033f366004614007565b6108db565b610357610352366004613e67565b610fdb565b60405190151581526020016102e0565b61032f610375366004613e67565b611044565b6102d6610388366004613e67565b611051565b6103b461039b366004613e4a565b6003602052600090815260409020805460019091015482565b604080519283526020830191909152016102e0565b61032f6110ad565b6102d66103df3660046140c8565b611158565b6103f76103f2366004613e4a565b611174565b6040516102e09190614101565b6102d6610412366004614145565b611302565b6102d660055481565b61032f61042e366004614145565b6113d2565b61032f610441366004613e4a565b6113e5565b610459610454366004614167565b61144e565b60408051825181526020808401519082015291810151908201526060016102e0565b6102d660065481565b6102d660045481565b61032f611935565b6102d66104a33660046141bd565b611bce565b61032f6104b63660046141e9565b611e61565b6104ce6104c9366004613e67565b611f3d565b6040516001600160401b0390911681526020016102e0565b6104f96104f4366004613e67565b612021565b604080519788526001600160a01b039096166020880152931515948601949094526001600160401b0391821660608601528116608085015290911660a083015260c082015260e0016102e0565b6103b4610554366004613e4a565b6002602052600090815260409020805460019091015482565b61032f61057b3660046141e9565b61208f565b6105dd61058e366004613e67565b600e602052600090815260409020546001600160401b0381169065ffffffffffff600160401b82048116916e01000000000000000000000000000081049091169060ff600160a01b9091041684565b604080516001600160401b0395909516855265ffffffffffff93841660208601529190921690830152151560608201526080016102e0565b6102d6610623366004613e67565b612174565b60005461063b906001600160a01b031681565b6040516001600160a01b0390911681526020016102e0565b6102d66106613660046141bd565b6121d0565b610679610674366004613e67565b612201565b6040805195151586526001600160401b03948516602087015265ffffffffffff938416908601529116606084015216608082015260a0016102e0565b6106c86106c33660046141bd565b612260565b604080519283529015156020830152016102e0565b6103f761232b565b6102d66106f336600461421e565b612413565b61032f6107063660046141bd565b61262c565b61071e6107193660046141bd565b6126fb565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a0016102e0565b610766610761366004613e67565b61275e565b6040805165ffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015260ff90911660a082015260c0016102e0565b6103f76107b8366004613e4a565b6127bc565b6102d66107cb366004613e67565b6129e0565b61032f6107de366004613e67565b612aa1565b6000806107ef83612aae565b90508060000151600c8481548110610809576108096142e8565b60009182526020909120015461082d919061010090046001600160401b0316614314565b6001600160401b03169392505050565b610845612bc3565b42600c8281548110610859576108596142e8565b90600052602060002001600001600f6101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600b828154811061089d5761089d6142e8565b6000918252602082206004909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b60006108e5612bc3565b60208301516000906108f890429061433c565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801561093a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061095e9190614353565b60ff1690506000868160200201516109775787516109af565b61098282600a61445a565b6020890151895161099b90670de0b6b3a7640000614466565b6109a5919061449b565b6109af919061449b565b855190915060009084906109c99063ffffffff16846144af565b6001600160401b03166109dc919061449b565b90506000620186a08a600260200201516109ff906001600160401b038616614466565b610a09919061449b565b610a1c906001600160401b0385166144de565b90506000836001600160401b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aac91906144f6565b60208d0151610abb9190614466565b610ac5919061449b565b600b80546040805160e0810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060028110610b0b57610b0b6142e8565b60209081029190910151151582526001600160401b0380891683830152878116604080850191909152600060608086018290526080958601829052875460018181018a5598835291859020875160049093020191825593860151818801805488850151968901518616600160a81b0267ffffffffffffffff60a81b19971515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009092166001600160a01b03909416939093171795909516179093559284015160028301805460a0808801518516600160401b026fffffffffffffffffffffffffffffffff19909216939094169290921791909117905560c09093015160039091015580519182019052600c9181908d90602002015115158152602001836001600160401b031681526020018b600060028110610c4f57610c4f6142e8565b602002015165ffffffffffff1681526020018b600160028110610c7457610c746142e8565b6020908102919091015165ffffffffffff90811683526001600160401b038088169383019390935284546001810186556000958652828620855191018054868501516040808901516060808b01516080909b01518a16600160a81b0267ffffffffffffffff60a81b199b8916600160781b027fffffffffffffffffffffff000000000000ffffffffffffffffffffffffffffff938a16690100000000000000000002939093167fffffffffffffffffffffff000000000000000000000000ffffffffffffffffff95909b166101000268ffffffffffffffff00199815159890981668ffffffffffffffffff1990961695909517969096179290921697909717179690961695909517909455825160c081018452428216808252928101929092528a1691810191909152600d9290918201908b906020908102919091015163ffffffff168252018a6001602002015163ffffffff1665ffffffffffff1681526020018760ff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff1602179055505050600f60008d6001600160a01b03166001600160a01b031681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150558b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e600160038110610fb057610fb06142e8565b6020020151604051610fc491815260200190565b60405180910390a450505050505095945050505050565b6000600b8281548110610ff057610ff06142e8565b90600052602060002090600402016000015460001415801561103e575042600c8381548110611021576110216142e8565b600091825260209091200154600160781b900465ffffffffffff16115b92915050565b61104c612c6b565b600555565b6000600d8281548110611066576110666142e8565b60009182526020909120015461108790600160f01b900460ff16600a61450f565b611090836129e0565b611099846107e3565b6110a39190614466565b61103e919061449b565b3360008181526001602052604080822080549290555163a9059cbb60e01b8152600481019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611130573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611154919061451e565b5050565b600061116d83611167856127bc565b84612413565b9392505050565b6001600160a01b0381166000908152600f602090815260408083208054825181850281018501909352808352606094938301828280156111d357602002820191906000526020600020905b8154815260200190600101908083116111bf575b50505050509050600080600090505b82518110156112325761120d838281518110611200576112006142e8565b6020026020010151610fdb565b15611220578161121c8161453b565b9250505b8061122a8161453b565b9150506111e2565b506000816001600160401b0381111561124d5761124d613e80565b604051908082528060200260200182016040528015611276578160200160208202803683370190505b5090506000805b84518110156112f75761129b858281518110611200576112006142e8565b156112e5578481815181106112b2576112b26142e8565b60200260200101518383815181106112cc576112cc6142e8565b6020908102919091010152816112e18161453b565b9250505b806112ef8161453b565b91505061127d565b509095945050505050565b600080600d8381548110611318576113186142e8565b60009182526020918290206040805160c081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b9091041660a0820181905290915061139b90600a61450f565b6113a484611051565b6113b686670de0b6b3a7640000614466565b6113c0919061449b565b6113ca919061449b565b949350505050565b6113da612c6b565b600691909155600755565b6113ed612c6b565b6000805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040519081527f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad9060200160405180910390a150565b61147260405180606001604052806000815260200160008152602001600081525090565b61149d6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000600b88815481106114b2576114b26142e8565b906000526020600020906004020190506000600c89815481106114d7576114d76142e8565b60009182526020918290206040805160a081018252919092015460ff8116151582526001600160401b03610100820481169483019490945265ffffffffffff69010000000000000000008204811693830193909352600160781b8104831660608301819052600160a81b909104909316608082015292504291908216106115a55760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c756465640000000060448201526064015b60405180910390fd5b6115af8a82612cbc565b60006115ba8b612efe565b90508881111561160c5760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d617820707269636500604482015260640161159c565b6000600d8c81548110611621576116216142e8565b60009182526020909120015461164290600160f01b900460ff16600a61450f565b826116558d670de0b6b3a7640000614466565b61165f919061449b565b611669919061449b565b60028601549091506001600160401b03168111156116c95760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a65206578636565646564000000604482015260640161159c565b6001850154600160a01b900460ff166116e257806116e4565b8a5b8560000160008282546116f7919061433c565b9091555050835161170c57836040015161171c565b82846040015161171c9190614556565b65ffffffffffff1660208801526003850180548c91906000906117409084906144de565b909155505060028501805482919060089061176c908490600160401b90046001600160401b0316614580565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550808560010160158282829054906101000a90046001600160401b03166117b69190614580565b92506101000a8154816001600160401b0302191690836001600160401b031602179055506117eb898289602001518f8c612f74565b6040890191909152606081015190965061180590826144de565b876000018181525050876001600160a01b0316896001600160a01b03168d7f4f0ed72ede64d6052fad7cbe06ab6234ec2c0cc3255a8566e9fecff3958142388e868c604001518c600001518d606001518e604001518f6020015160405161189d9796959493929190968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60405180910390a4600a5460018601546118c6916001600160a01b03918216913391168e61329a565b600185015460808501516001600160401b03600160a81b90920482169116101561191c5760008086556040518d917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611926565b6119268c84613309565b50505050505095945050505050565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611986573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119aa91906145a2565b6001600160a01b0316336001600160a01b03161480611a4e575060008054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a3991906145a2565b6001600160a01b0316336001600160a01b0316145b80611ade575060008054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611aa5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ac991906145a2565b6001600160a01b0316336001600160a01b0316145b611b2a5760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a65640000000000000000000000000000000000604482015260640161159c565b60008054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9f91906145a2565b600a805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b0382811660009081526009602090815260408083208584529091528120549091163314611c445760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e640000604482015260640161159c565b6001600160a01b0383166000908152600860205260409020805483908110611c6e57611c6e6142e8565b6000918252602090912060029091020160010154600160601b900465ffffffffffff1615611cde5760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d656400000000000000604482015260640161159c565b503360009081526008602052604080822080546001600160a01b038616845291909220805491929184908110611d1657611d166142e8565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b0385168152600890915260409020805483908110611e2057611e206142e8565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b611e69612bc3565b6001600160a01b038316611ebf5760405162461bcd60e51b815260206004820152601560248201527f5a65726f20616464726573733a20506172746e65720000000000000000000000604482015260640161159c565b600554811115611f035760405162461bcd60e51b815260206004820152600f60248201526e0e4caeec2e4c840e8dede40d0d2ced608b1b604482015260640161159c565b60408051808201825292835260208084019283526001600160a01b0390941660009081526002909452909220905181559051600190910155565b600080600d8381548110611f5357611f536142e8565b600091825260208083206040805160c081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b81049091166080840152600160f01b900460ff1660a0830152909250611fd0904261433c565b9050816040015165ffffffffffff1681600b8681548110611ff357611ff36142e8565b60009182526020909120600490910201600101546113c09190600160a81b90046001600160401b0316614466565b600b818154811061203157600080fd5b600091825260209091206004909102018054600182015460028301546003909301549193506001600160a01b0381169260ff600160a01b830416926001600160401b03600160a81b90930483169282811692600160401b9004169087565b612097612bc3565b6001600160a01b0383166120ed5760405162461bcd60e51b815260206004820152601660248201527f5a65726f20616464726573733a20526566657272657200000000000000000000604482015260640161159c565b6004546120fa82846144de565b111561213a5760405162461bcd60e51b815260206004820152600f60248201526e0e4caeec2e4c840e8dede40d0d2ced608b1b604482015260640161159c565b60408051808201825292835260208084019283526001600160a01b0390941660009081526003909452909220905181559051600190910155565b600061217f82611f3d565b600b8381548110612192576121926142e8565b906000526020600020906004020160010160159054906101000a90046001600160401b03166121c19190614314565b6001600160401b031692915050565b600f60205281600052604060002081815481106121ec57600080fd5b90600052602060002001600091509150505481565b600c818154811061221157600080fd5b60009182526020909120015460ff811691506001600160401b03610100820481169165ffffffffffff69010000000000000000008204811692600160781b830490911691600160a81b90041685565b6001600160a01b03821660009081526008602052604081208054829182918590811061228e5761228e6142e8565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b90920490931660808301529194509150158015612315575042816040015165ffffffffffff1611155b80156123215750805115155b9150509250929050565b60606000805b600b548110156123695761234481610fdb565b1561235757816123538161453b565b9250505b806123618161453b565b915050612331565b506000816001600160401b0381111561238457612384613e80565b6040519080825280602002602001820160405280156123ad578160200160208202803683370190505b5090506000805b600b5481101561240a576123c781610fdb565b156123f857808383815181106123df576123df6142e8565b6020908102919091010152816123f48161453b565b9250505b806124028161453b565b9150506123b4565b50909392505050565b60008042815b85518110156124f0576000806124488989858151811061243b5761243b6142e8565b6020026020010151612260565b9150915080156124db576001600160a01b038916600090815260086020526040902088518591908a9086908110612481576124816142e8565b602002602001015181548110612499576124996142e8565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555081856124d891906144de565b94505b505080806124e89061453b565b915050612419565b50831561259957604051635d043b2960e11b8152600481018390526001600160a01b0387811660248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063ba087652906064016020604051808303816000875af115801561256c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259091906144f6565b9250505061116d565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612608573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f7919061451e565b33600090815260086020526040902080548290811061264d5761264d6142e8565b600091825260209091206001600290920201015465ffffffffffff166126b55760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e64000000000000604482015260640161159c565b33600090815260096020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6008602052816000526040600020818154811061271757600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600d818154811061276e57600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1686565b6001600160a01b0381166000908152600860209081526040808320805482518185028101850190935280835260609493849084015b828210156128675760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b9004909116608083015290835290920191016127f1565b505050509050600080600090505b82518110156128f657828181518110612890576128906142e8565b60200260200101516060015165ffffffffffff1660001480156128d157508281815181106128c0576128c06142e8565b602002602001015160000151600014155b156128e457816128e08161453b565b9250505b806128ee8161453b565b915050612875565b506000816001600160401b0381111561291157612911613e80565b60405190808252806020026020018201604052801561293a578160200160208202803683370190505b5090506000805b84518110156112f75784818151811061295c5761295c6142e8565b60200260200101516060015165ffffffffffff16600014801561299d575084818151811061298c5761298c6142e8565b602002602001015160000151600014155b156129ce57808383815181106129b5576129b56142e8565b6020908102919091010152816129ca8161453b565b9250505b806129d88161453b565b915050612941565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612a40573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6491906144f6565b600d8381548110612a7757612a776142e8565b600091825260209091200154612a9890600160f01b900460ff16600a61450f565b61109984612174565b612aa9612c6b565b600455565b60408051606081018252600080825260208201819052918101919091526000828152600e6020908152604091829020825160808101845290546001600160401b038116825265ffffffffffff600160401b82048116938301939093526e01000000000000000000000000000081049092169281019290925260ff600160a01b90910416151560608201819052612b445750919050565b6020810151612b5390426145bf565b65ffffffffffff9081166020840181905260408084015190921611908301819052612b7f578051612bb2565b806040015165ffffffffffff16826020015165ffffffffffff168260000151612ba891906144af565b612bb291906145de565b6001600160401b0316825250919050565b60008054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c3891906145a2565b6001600160a01b0316336001600160a01b031614612c695760405163075fd2b160e01b815260040160405180910390fd5b565b60008054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c14573d6000803e3d6000fd5b612cc582611f3d565b600b8381548110612cd857612cd86142e8565b906000526020600020906004020160010160158282829054906101000a90046001600160401b0316612d0a9190614314565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555080600d8381548110612d4257612d426142e8565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600e909152604090205460ff600160a01b9091041615611154576000828152600e6020526040812090612daf84612aae565b90508060000151600c8581548110612dc957612dc96142e8565b60009182526020909120018054600190612df290849061010090046001600160401b0316614314565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550806040015115612ed157805182548390600090612e3d9084906001600160401b0316614314565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550806020015182600001600e8282829054906101000a900465ffffffffffff16612e8a91906145bf565b82546101009290920a65ffffffffffff81810219909316918316021790915583546dffffffffffff00000000000000001916600160401b9186169190910217835550612ef8565b81547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1682555b50505050565b6000600d8281548110612f1357612f136142e8565b600091825260209091200154612f3490600160f01b900460ff16600a61450f565b612f3d8361388b565b600c8481548110612f5057612f506142e8565b6000918252602090912001546110a3919061010090046001600160401b0316614466565b6000612fa16040518060800160405280600081526020016000815260200160008152602001600081525090565b6000612fae87858a613984565b6001600160a01b038916600090815260086020526040812054606083015192935091612fdb908a906144de565b905060008360000151846060015185602001518660400151612ffd91906144de565b613007919061433c565b613011919061433c565b600a5485519192506001600160a01b0316906340c10f1990309061303590866144de565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561309357600080fd5b505af11580156130a7573d6000803e3d6000fd5b5050604051636e553f6560e01b815260048101859052306024820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169150636e553f65906044016020604051808303816000875af115801561311b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061313f91906144f6565b600a546040516340c10f1960e01b81526001600160a01b0390911660048201819052602482018590529192506340c10f1990604401600060405180830381600087803b15801561318e57600080fd5b505af11580156131a2573d6000803e3d6000fd5b5050506001600160a01b03909c166000908152600860209081526040808320815160a08101835294855265ffffffffffff4281168685019081529e8116928601928352606086018581529d81166080870190815282546001818101855593875294909520955160029094029095019283559c5191909c0180549c519b5192518416600160901b0265ffffffffffff60901b19938516600160601b029390931677ffffffffffffffffffffffff000000000000000000000000199c8516600160301b026bffffffffffffffffffffffff19909e1692909416919091179b909b179990991617979097179097559890975095505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b179052612ef8908590613c39565b6000600d838154811061331e5761331e6142e8565b60009182526020918290206040805160c081018252929091015465ffffffffffff808216808552600160301b8304821695850195909552600160601b8204811692840192909252600160901b810482166060840152600160c01b810490911660808301819052600160f01b90910460ff1660a08301529092506133a091614556565b65ffffffffffff168265ffffffffffff1610613886576000600b84815481106133cb576133cb6142e8565b600091825260208083206040805160e08101825260049094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b8404161515918401919091526001600160401b03600160a81b9092048216606084015260028101548083166080850152600160401b900490911660a08301526003015460c0820152600c8054919350859187908110613469576134696142e8565b60009182526020909120015461348e9190600160781b900465ffffffffffff166145bf565b65ffffffffffff16905060006134a386612efe565b9050600083604001516134b75783516134f1565b60a08501516134c790600a61450f565b845183906134dd90670de0b6b3a7640000614466565b6134e7919061449b565b6134f1919061449b565b905082856060015165ffffffffffff168261350c9190614466565b613516919061449b565b600b8881548110613529576135296142e8565b906000526020600020906004020160020160006101000a8154816001600160401b0302191690836001600160401b03160217905550600083866040015165ffffffffffff16836135799190614466565b613583919061449b565b90506000817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156135e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061360a91906144f6565b6136149086614466565b61361e919061449b565b9050887f3070b0e3e52b8713c7489d32604ea4b0970024f74c6e05319269a19bc1e3a9d9600c8b81548110613655576136556142e8565b60009182526020918290200154604080516101009092046001600160401b0390811683528616928201929092520160405180910390a2600c898154811061369e5761369e6142e8565b6000918252602090912001546001600160401b0361010090910481169082161061370c5780600c8a815481106136d6576136d66142e8565b9060005260206000200160000160016101000a8154816001600160401b0302191690836001600160401b03160217905550613844565b600081600c8b81548110613722576137226142e8565b600091825260209091200154613746919061010090046001600160401b0316614314565b90506040518060800160405280826001600160401b031681526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600e60008c815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600e6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160146101000a81548160ff021916908315150217905550905050505b87600d8a81548110613858576138586142e8565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156138eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061390f91906144f6565b600d8381548110613922576139226142e8565b60009182526020909120015461394390600160f01b900460ff16600a61450f565b600b8481548110613956576139566142e8565b60009182526020909120600490910201600101546110a39190600160a81b90046001600160401b0316614466565b6139af6040518060800160405280600081526020016000815260200160008152602001600081525090565b7f0000000000000000000000000000000000000000000000000000000000000000600654856139de9190614466565b6139e8919061449b565b816020018181516139f991906144de565b9052506007547f000000000000000000000000000000000000000000000000000000000000000090613a2b9086614466565b613a35919061449b565b81604001818151613a4691906144de565b9052506001600160a01b03821660009081526002602052604090206001015415613b42576001600160a01b0382166000908152600260205260408120600101547f000000000000000000000000000000000000000000000000000000000000000090613ab29087614466565b613abc919061449b565b6001600160a01b0384166000908152600260205260409020549091508110613b01576001600160a01b0383166000908152600260205260409020546060830152613b09565b606082018190525b60608201516001600160a01b03841660009081526002602052604081208054909190613b3690849061433c565b9091555061116d915050565b6001600160a01b038316600090815260036020908152604091829020825180840190935280548084526001909101549183019190915215613be65780517f000000000000000000000000000000000000000000000000000000000000000090613bab9087614466565b613bb5919061449b565b8083526001600160a01b03851660009081526001602052604081208054909190613be09084906144de565b90915550505b602081015115613c31577f0000000000000000000000000000000000000000000000000000000000000000816020015186613c219190614466565b613c2b919061449b565b60608301525b509392505050565b6000613c8e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316613d1e9092919063ffffffff16565b8051909150156138865780806020019051810190613cac919061451e565b6138865760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161159c565b60606113ca8484600085856001600160a01b0385163b613d805760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161159c565b600080866001600160a01b03168587604051613d9c9190614630565b60006040518083038185875af1925050503d8060008114613dd9576040519150601f19603f3d011682016040523d82523d6000602084013e613dde565b606091505b5091509150613dee828286613df9565b979650505050505050565b60608315613e0857508161116d565b825115613e185782518084602001fd5b8160405162461bcd60e51b815260040161159c919061464c565b6001600160a01b0381168114613e4757600080fd5b50565b600060208284031215613e5c57600080fd5b813561116d81613e32565b600060208284031215613e7957600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b0381118282101715613eb857613eb8613e80565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613ee657613ee6613e80565b604052919050565b6000604051606081018181106001600160401b0382111715613f1257613f12613e80565b6040529050806060830184811115613f2957600080fd5b835b81811015613f43578035835260209283019201613f2b565b50505092915050565b8015158114613e4757600080fd5b8035613f6581613f4c565b919050565b600082601f830112613f7b57600080fd5b613f83613e96565b806040840185811115613f9557600080fd5b845b818110156112f7578035845260209384019301613f97565b600082601f830112613fc057600080fd5b613fc8613e96565b806040840185811115613fda57600080fd5b845b818110156112f757803563ffffffff81168114613ff95760008081fd5b845260209384019301613fdc565b6000806000806000610140868803121561402057600080fd5b853561402b81613e32565b94506020603f8701881361403e57600080fd5b61404a88828901613eee565b945087609f88011261405b57600080fd5b614063613e96565b8060c089018a81111561407557600080fd5b60808a015b8181101561409a57803561408d81613f4c565b845292840192840161407a565b508196506140a88b82613f6a565b9550505050506140bc876101008801613faf565b90509295509295909350565b600080604083850312156140db57600080fd5b82356140e681613e32565b915060208301356140f681613f4c565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156141395783518352928401929184019160010161411d565b50909695505050505050565b6000806040838503121561415857600080fd5b50508035926020909101359150565b600080600080600060a0868803121561417f57600080fd5b853594506020860135935060408601359250606086013561419f81613e32565b915060808601356141af81613e32565b809150509295509295909350565b600080604083850312156141d057600080fd5b82356141db81613e32565b946020939093013593505050565b6000806000606084860312156141fe57600080fd5b833561420981613e32565b95602085013595506040909401359392505050565b60008060006060848603121561423357600080fd5b833561423e81613e32565b92506020848101356001600160401b038082111561425b57600080fd5b818701915087601f83011261426f57600080fd5b81358181111561428157614281613e80565b8060051b9150614292848301613ebe565b818152918301840191848101908a8411156142ac57600080fd5b938501935b838510156142ca578435825293850193908501906142b1565b8097505050505050506142df60408501613f5a565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b0383811690831681811015614334576143346142fe565b039392505050565b60008282101561434e5761434e6142fe565b500390565b60006020828403121561436557600080fd5b815160ff8116811461116d57600080fd5b600181815b808511156143b1578160001904821115614397576143976142fe565b808516156143a457918102915b93841c939080029061437b565b509250929050565b6000826143c85750600161103e565b816143d55750600061103e565b81600181146143eb57600281146143f557614411565b600191505061103e565b60ff841115614406576144066142fe565b50506001821b61103e565b5060208310610133831016604e8410600b8410161715614434575081810a61103e565b61443e8383614376565b8060001904821115614452576144526142fe565b029392505050565b600061116d83836143b9565b6000816000190483118215151615614480576144806142fe565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826144aa576144aa614485565b500490565b60006001600160401b03808316818516818304811182151516156144d5576144d56142fe565b02949350505050565b600082198211156144f1576144f16142fe565b500190565b60006020828403121561450857600080fd5b5051919050565b600061116d60ff8416836143b9565b60006020828403121561453057600080fd5b815161116d81613f4c565b600060001982141561454f5761454f6142fe565b5060010190565b600065ffffffffffff808316818516808303821115614577576145776142fe565b01949350505050565b60006001600160401b03808316818516808303821115614577576145776142fe565b6000602082840312156145b457600080fd5b815161116d81613e32565b600065ffffffffffff83811690831681811015614334576143346142fe565b60006001600160401b03808416806145f8576145f8614485565b92169190910492915050565b60005b8381101561461f578181015183820152602001614607565b83811115612ef85750506000910152565b60008251614642818460208701614604565b9190910192915050565b602081526000825180602084015261466b816040850160208701614604565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "details": "current price should be in 9 decimals.",
        "params": {
          "_booleans": "[capacity in quote, fixed term]",
          "_intervals": "[deposit interval (seconds), tune interval (seconds)]",
          "_market": "[capacity (in HECTA or quote), initial price / HECTA (9 decimals), debt buffer (3 decimals)]",
          "_quoteToken": "token used to deposit",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "currentControlVariable(uint256)": {
        "details": "accounts for control variable adjustment",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "control variable for market in HECTA decimals"
        }
      },
      "currentDebt(uint256)": {
        "details": "accounts for debt decay since last deposit",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "current debt for market in HECTA decimals"
        }
      },
      "debtDecay(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of debt to decay"
        }
      },
      "debtRatio(uint256)": {
        "details": "uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "debt ratio for market in quote decimals"
        }
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "_0": "the pending notes for the user"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "marketPrice(uint256)": {
        "details": "accounts for debt and control variable decay since last deposit (vs _marketPrice())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "price for market in HECTA decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program"
        }
      },
      "payoutFor(uint256,uint256)": {
        "details": "accounts for debt and control variable decay so it is up to date1e18 = hecta decimals (9) + market price decimals (9)",
        "params": {
          "_amount": "amount of quote tokens to spend",
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of HECTA to be paid in HECTA decimals"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "matured_": "   if the payout can be redeemed",
          "payout_": "    the payout due, in gHecta"
        }
      },
      "pullNote(address,uint256)": {
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[],bool)": {
        "params": {
          "_indexes": "the note indexes to redeem",
          "_unstake": "option for redeem gHecta or Hecta",
          "_user": "the user to redeem for"
        },
        "returns": {
          "_0": "sum of payout sent, in gHecta or Hecta"
        }
      },
      "redeemAll(address,bool)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_unstake": "option for redeem gHecta or Hecta",
          "_user": "user to redeem all notes for"
        },
        "returns": {
          "_0": "sum of payout sent, in gHecta or Hecta"
        }
      }
    },
    "title": "Hectagon Bond Depository",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "notice": "creates a new market type"
      },
      "currentControlVariable(uint256)": {
        "notice": "up to date control variable"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(uint256)": {
        "notice": "amount of debt to decay from total debt for market ID"
      },
      "debtRatio(uint256)": {
        "notice": "calculate current ratio of debt to supply"
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsFor(address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "calculate current market price of quote token in base token"
      },
      "payoutFor(uint256,uint256)": {
        "notice": "payout due for amount of quote tokens"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[],bool)": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address,bool)": {
        "notice": "redeem all redeemable markets for user"
      },
      "setPartnerTerm(address,uint256,uint256)": {
        "notice": "set partner term"
      },
      "setPartnerTermCap(uint256)": {
        "notice": "set Cap for referrer % reward"
      },
      "setReferTerm(address,uint256,uint256)": {
        "notice": "set referrer term"
      },
      "setReferTermCap(uint256)": {
        "notice": "set Cap for referrer % reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12083,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "authority",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IHectagonAuthority)8713"
      },
      {
        "astId": 11731,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "rewards",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11736,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "partnerTerms",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(PartnerTerm)11727_storage)"
      },
      {
        "astId": 11741,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "referTerms",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(ReferTerm)11722_storage)"
      },
      {
        "astId": 11744,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "referTermCap",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 11747,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "partnerTermCap",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11750,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "daoInvestmentPercent",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11753,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "daoCommunityPercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 12218,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "notes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_array(t_struct(Note)8726_storage)dyn_storage)"
      },
      {
        "astId": 12224,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 12230,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "treasury",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(ITreasury)8800"
      },
      {
        "astId": 3930,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "markets",
        "offset": 0,
        "slot": "11",
        "type": "t_array(t_struct(Market)8391_storage)dyn_storage"
      },
      {
        "astId": 3934,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Terms)8402_storage)dyn_storage"
      },
      {
        "astId": 3938,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "metadata",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Metadata)8415_storage)dyn_storage"
      },
      {
        "astId": 3943,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "adjustments",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)8424_storage)"
      },
      {
        "astId": 3948,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)8391_storage)dyn_storage": {
        "base": "t_struct(Market)8391_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)8415_storage)dyn_storage": {
        "base": "t_struct(Metadata)8415_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)8726_storage)dyn_storage": {
        "base": "t_struct(Note)8726_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)8402_storage)dyn_storage": {
        "base": "t_struct(Terms)8402_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1052": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IHectagonAuthority)8713": {
        "encoding": "inplace",
        "label": "contract IHectagonAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)8800": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)8726_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)8726_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_struct(PartnerTerm)11727_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FrontEndRewarder.PartnerTerm)",
        "numberOfBytes": "32",
        "value": "t_struct(PartnerTerm)11727_storage"
      },
      "t_mapping(t_address,t_struct(ReferTerm)11722_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FrontEndRewarder.ReferTerm)",
        "numberOfBytes": "32",
        "value": "t_struct(ReferTerm)11722_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)8424_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)8424_storage"
      },
      "t_struct(Adjustment)8424_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 8417,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 8419,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "lastAdjustment",
            "offset": 8,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8421,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "timeToAdjusted",
            "offset": 14,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8423,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "active",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Market)8391_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 8377,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8380,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)1052"
          },
          {
            "astId": 8382,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 8384,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "totalDebt",
            "offset": 21,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 8386,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 8388,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "sold",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 8390,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "purchased",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Metadata)8415_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 8404,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8406,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8408,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8410,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8412,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8414,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)8726_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 8717,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8719,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 8721,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 8723,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 8725,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PartnerTerm)11727_storage": {
        "encoding": "inplace",
        "label": "struct FrontEndRewarder.PartnerTerm",
        "members": [
          {
            "astId": 11724,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11726,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "percent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ReferTerm)11722_storage": {
        "encoding": "inplace",
        "label": "struct FrontEndRewarder.ReferTerm",
        "members": [
          {
            "astId": 11719,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "referrerPercent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11721,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "buyerPercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)8402_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 8393,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8395,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "controlVariable",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 8397,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "vesting",
            "offset": 9,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8399,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "conclusion",
            "offset": 15,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8401,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "maxDebt",
            "offset": 21,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}