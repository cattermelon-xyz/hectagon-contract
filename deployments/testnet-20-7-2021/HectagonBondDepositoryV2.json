{
  "address": "0x66FCf5592EEa3e0cD27F53af6C8F0D7B82d85d20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IHectagonAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_hecta",
          "type": "address"
        },
        {
          "internalType": "contract IgHECTA",
          "name": "_ghecta",
          "type": "address"
        },
        {
          "internalType": "contract IStaking",
          "name": "_staking",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IHectagonAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noteId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toBuyer",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toDaoCommunity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toDaoInvestment",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldControlVariable",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newControlVariable",
          "type": "uint64"
        }
      ],
      "name": "Tuned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "change",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IHectagonAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_market",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[2]",
          "name": "_booleans",
          "type": "bool[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint32[2]",
          "name": "_intervals",
          "type": "uint32[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentControlVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoCommunityPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoInvestmentPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "finalPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBondDepository.UserBond",
          "name": "userBond_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "totalDebt",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "maxPayout",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "sold",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "partnerTermCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "partnerTerms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referTermCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referTerms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referrerPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyerPercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHectagonAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "daoInvestmentPercent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoCommunityPercent_",
          "type": "uint256"
        }
      ],
      "name": "setDaoRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_partner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "setPartnerTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setPartnerTermCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "payoutCap_",
          "type": "uint256"
        }
      ],
      "name": "setPayoutCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_referrerPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyerPercent",
          "type": "uint256"
        }
      ],
      "name": "setReferTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setReferTermCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "controlVariable",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint64",
          "name": "maxDebt",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x926cce6a98e089f78bebe91a21719de10ef1e6fc7bbbb571829ca978bea86261",
  "receipt": {
    "to": null,
    "from": "0x8703d1C3cd670dd678ddFacA1e98237f6a342C3C",
    "contractAddress": "0x66FCf5592EEa3e0cD27F53af6C8F0D7B82d85d20",
    "transactionIndex": 0,
    "gasUsed": "4473750",
    "logsBloom": "0x
    "blockHash": "0x2e6368a047088dfa160e4ef5707a64e63ef71e417a9eefd8831bdac06ccc5ab3",
    "transactionHash": "0x926cce6a98e089f78bebe91a21719de10ef1e6fc7bbbb571829ca978bea86261",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 21215012,
        "transactionHash": "0x926cce6a98e089f78bebe91a21719de10ef1e6fc7bbbb571829ca978bea86261",
        "address": "0x66FCf5592EEa3e0cD27F53af6C8F0D7B82d85d20",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x0000000000000000000000002b04648ffbc816d587ed60574ab6ec323ef56fbe"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x2e6368a047088dfa160e4ef5707a64e63ef71e417a9eefd8831bdac06ccc5ab3"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 21215012,
        "transactionHash": "0x926cce6a98e089f78bebe91a21719de10ef1e6fc7bbbb571829ca978bea86261",
        "address": "0xF38020ADeFF94EA83102E050DbA86011e3b588a1",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000066fcf5592eea3e0cd27f53af6c8f0d7b82d85d20",
          "0x0000000000000000000000004a527d6d4e8bb82d2c3bb066e07929ab9b3968a8"
        ],
        "data": "0x000000000000000000000000002cd76fe086b93ce2f768a00b22a00000000000",
        "logIndex": 1,
        "blockHash": "0x2e6368a047088dfa160e4ef5707a64e63ef71e417a9eefd8831bdac06ccc5ab3"
      }
    ],
    "blockNumber": 21215012,
    "cumulativeGasUsed": "4473750",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2b04648FFBc816D587ed60574ab6ec323eF56fBE",
    "0xF38020ADeFF94EA83102E050DbA86011e3b588a1",
    "0x2cD3351a19AeB6D997c4Ff123BDB7eCE537a265e",
    "0x4a527d6d4E8Bb82d2c3BB066e07929ab9b3968a8",
    "0xAB68495c9dDc4bE872f6e93ee2cd94183827F117"
  ],
  "solcInputHash": "af0988b3e7447ab5c03a65cbe9c46091",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IHectagonAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_hecta\",\"type\":\"address\"},{\"internalType\":\"contract IgHECTA\",\"name\":\"_ghecta\",\"type\":\"address\"},{\"internalType\":\"contract IStaking\",\"name\":\"_staking\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHectagonAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noteId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBuyer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toDaoCommunity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toDaoInvestment\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldControlVariable\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newControlVariable\",\"type\":\"uint64\"}],\"name\":\"Tuned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"change\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IHectagonAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_market\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[2]\",\"name\":\"_booleans\",\"type\":\"bool[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint32[2]\",\"name\":\"_intervals\",\"type\":\"uint32[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoCommunityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoInvestmentPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"finalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct IBondDepository.UserBond\",\"name\":\"userBond_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"totalDebt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxPayout\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sold\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerTermCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerTerms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referTermCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referTerms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHectagonAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daoInvestmentPercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoCommunityPercent_\",\"type\":\"uint256\"}],\"name\":\"setDaoRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setPartnerTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setPartnerTermCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutCap_\",\"type\":\"uint256\"}],\"name\":\"setPayoutCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrerPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyerPercent\",\"type\":\"uint256\"}],\"name\":\"setReferTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setReferTermCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"controlVariable\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"maxDebt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"details\":\"current price should be in 9 decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, fixed term]\",\"_intervals\":\"[deposit interval (seconds), tune interval (seconds)]\",\"_market\":\"[capacity (in HECTA or quote), initial price / HECTA (9 decimals), debt buffer (3 decimals)]\",\"_quoteToken\":\"token used to deposit\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"currentControlVariable(uint256)\":{\"details\":\"accounts for control variable adjustment\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"control variable for market in HECTA decimals\"}},\"currentDebt(uint256)\":{\"details\":\"accounts for debt decay since last deposit\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"current debt for market in HECTA decimals\"}},\"debtDecay(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of debt to decay\"}},\"debtRatio(uint256)\":{\"details\":\"uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"debt ratio for market in quote decimals\"}},\"deposit(uint256,uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"_0\":\"the pending notes for the user\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"marketPrice(uint256)\":{\"details\":\"accounts for debt and control variable decay since last deposit (vs _marketPrice())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"price for market in HECTA decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program\"}},\"payoutFor(uint256,uint256)\":{\"details\":\"accounts for debt and control variable decay so it is up to date1e18 = hecta decimals (9) + market price decimals (9)\",\"params\":{\"_amount\":\"amount of quote tokens to spend\",\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of HECTA to be paid in HECTA decimals\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"matured_\":\"   if the payout can be redeemed\",\"payout_\":\"    the payout due, in gHECTA\"}},\"pullNote(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[])\":{\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_user\":\"the user to redeem for\"},\"returns\":{\"payout_\":\"    sum of payout sent, in gHECTA\"}},\"redeemAll(address)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_user\":\"user to redeem all notes for\"},\"returns\":{\"_0\":\"sum of payout sent, in gHECTA\"}},\"setPayoutCap(uint256)\":{\"params\":{\"payoutCap_\":\"ID of market to close\"}}},\"title\":\"Hectagon Bond Depository V2\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"create(address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"notice\":\"creates a new market type\"},\"currentControlVariable(uint256)\":{\"notice\":\"up to date control variable\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(uint256)\":{\"notice\":\"amount of debt to decay from total debt for market ID\"},\"debtRatio(uint256)\":{\"notice\":\"calculate current ratio of debt to supply\"},\"deposit(uint256,uint256,uint256,address,address)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsFor(address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"marketPrice(uint256)\":{\"notice\":\"calculate current market price of quote token in base token\"},\"payoutFor(uint256,uint256)\":{\"notice\":\"payout due for amount of quote tokens\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[])\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address)\":{\"notice\":\"redeem all redeemable markets for user\"},\"setPartnerTerm(address,uint256,uint256)\":{\"notice\":\"set partner term\"},\"setPartnerTermCap(uint256)\":{\"notice\":\"set Cap for referrer % reward\"},\"setPayoutCap(uint256)\":{\"notice\":\"set totalPayoutCap\"},\"setReferTerm(address,uint256,uint256)\":{\"notice\":\"set referrer term\"},\"setReferTermCap(uint256)\":{\"notice\":\"set Cap for referrer % reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondDepository.sol\":\"HectagonBondDepositoryV2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./types/NoteKeeper.sol\\\";\\nimport \\\"./interfaces/IBondDepository.sol\\\";\\n\\n/// @title Hectagon Bond Depository V2\\n\\ncontract HectagonBondDepositoryV2 is IBondDepository, NoteKeeper {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event CreateMarket(uint256 indexed id, address indexed baseToken, address indexed quoteToken, uint256 initialPrice);\\n    event CloseMarket(uint256 indexed id);\\n    event Bond(\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 price,\\n        uint256 noteId,\\n        address indexed buyer,\\n        address indexed referral,\\n        uint256 commission,\\n        uint256 toBuyer,\\n        uint256 toDaoCommunity,\\n        uint256 toDaoInvestment\\n    );\\n    event Tuned(uint256 indexed id, uint64 oldControlVariable, uint64 newControlVariable);\\n\\n    /* ======== STATE VARIABLES ======== */\\n\\n    // Storage\\n    Market[] public markets; // persistent market data\\n    Terms[] public terms; // deposit construction data\\n    Metadata[] public metadata; // extraneous market data\\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\\n\\n    uint256 public totalPayout;\\n    uint256 public payoutCap = 2_000_000 * 1e9;\\n\\n    // Queries\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        IHectagonAuthority _authority,\\n        IERC20 _hecta,\\n        IgHECTA _ghecta,\\n        IStaking _staking,\\n        ITreasury _treasury\\n    ) NoteKeeper(_authority, _hecta, _ghecta, _staking, _treasury) {\\n        // save gas for users by bulk approving stake() transactions\\n        _hecta.approve(address(_staking), 1e45);\\n    }\\n\\n    /**\\n     * @notice                  set totalPayoutCap\\n     * @param payoutCap_   ID of market to close\\n     */\\n    function setPayoutCap(uint256 payoutCap_) external onlyGovernor {\\n        payoutCap = payoutCap_;\\n    }\\n\\n    /* ======== DEPOSIT ======== */\\n\\n    /**\\n     * @notice              deposit quote tokens in exchange for a bond from a specified market\\n     * @param _id           the ID of the market\\n     * @param _amount       the amount of quote token to spend\\n     * @param _maxPrice     the maximum price at which to buy\\n     * @param _user         the recipient of the payout\\n     * @param _referral     the front end operator address\\n     */\\n    function deposit(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    ) external override returns (UserBond memory userBond_) {\\n        Give memory give; // Give struct inherited fom FrontEndRewarder\\n        Market storage market = markets[_id];\\n        Terms memory term = terms[_id];\\n        uint48 currentTime = uint48(block.timestamp);\\n\\n        // Markets end at a defined timestamp\\n        // |-------------------------------------| t\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n        // Debt and the control variable decay over time\\n        _decay(_id, currentTime);\\n\\n        // Users input a maximum price, which protects them from price changes after\\n        // entering the mempool. max price is a slippage mitigation measure\\n        uint256 price = _marketPrice(_id);\\n        require(price <= _maxPrice, \\\"Depository: more than max price\\\");\\n\\n        /**\\n         * payout for the deposit = amount / price\\n         *\\n         * where\\n         * payout = HECTA out\\n         * amount = quote tokens in\\n         * price = quote tokens : hecta (i.e. 42069 DAI : HECTA)\\n         *\\n         * 1e18 = HECTA decimals (9) + price decimals (9)\\n         */\\n        uint256 payout_ = ((_amount * 1e18) / price) / (10**metadata[_id].quoteDecimals);\\n\\n        // markets have a max payout amount, capping size because deposits\\n        // do not experience slippage. max payout is recalculated upon tuning\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n        require((totalPayout + payout_) <= payoutCap, \\\"Depository: total payout hit payout cap\\\");\\n\\n        /*\\n         * each market is initialized with a capacity\\n         *\\n         * this is either the number of HECTA that the market can sell\\n         * (if capacity in quote is false),\\n         *\\n         * or the number of quote tokens that the market can buy\\n         * (if capacity in quote is true)\\n         */\\n        market.capacity -= market.capacityInQuote ? _amount : payout_;\\n\\n        /**\\n         * bonds mature with a cliff at a set timestamp\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\n         * after the expiry timestamp, the entire payout can be redeemed\\n         *\\n         * there are two types of bonds: fixed-term and fixed-expiration\\n         *\\n         * fixed-term bonds mature in a set amount of time from deposit\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n         *\\n         * fixed-expiration bonds mature at a set timestamp\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\n         */\\n        userBond_.expiry = term.fixedTerm ? term.vesting + currentTime : term.vesting;\\n\\n        // markets keep track of how many quote tokens have been\\n        // purchased, and how much HECTA has been sold\\n        market.purchased += _amount;\\n        market.sold += uint64(payout_);\\n\\n        // incrementing total debt raises the price of the next bond\\n        market.totalDebt += uint64(payout_);\\n\\n        /**\\n         * user data is stored as Notes. these are isolated array entries\\n         * storing the amount due, the time created, the time when payout\\n         * is redeemable, the time when payout was redeemed, and the ID\\n         * of the market deposited into\\n         */\\n        (userBond_.index, give) = addNote(_user, payout_, uint48(userBond_.expiry), uint48(_id), _referral);\\n\\n        userBond_.finalPayout = payout_ + give.toBuyer;\\n\\n        emit Bond(\\n            _id,\\n            _amount,\\n            price,\\n            userBond_.index,\\n            _user,\\n            _referral,\\n            give.toRefer,\\n            give.toBuyer,\\n            give.toDaoCommunity,\\n            give.toDaoInvestment\\n        );\\n\\n        // transfer payment to treasury\\n        market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\\n\\n        totalPayout += payout_;\\n\\n        // if max debt is breached, the market is closed\\n        // this a circuit breaker\\n        if (term.maxDebt < market.totalDebt) {\\n            market.capacity = 0;\\n            emit CloseMarket(_id);\\n        } else {\\n            // if market will continue, the control variable is tuned to hit targets on time\\n            _tune(_id, currentTime);\\n        }\\n\\n        return userBond_;\\n    }\\n\\n    /**\\n     * @notice             decay debt, and adjust control variable if there is an active change\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _decay(uint256 _id, uint48 _time) internal {\\n        // Debt decay\\n\\n        /*\\n         * Debt is a time-decayed sum of tokens spent in a market\\n         * Debt is added when deposits occur and removed over time\\n         * |\\n         * |    debt falls with\\n         * |   / \\\\  inactivity       / \\\\\\n         * | /     \\\\              /\\\\/    \\\\\\n         * |         \\\\           /         \\\\\\n         * |           \\\\      /\\\\/            \\\\\\n         * |             \\\\  /  and rises       \\\\\\n         * |                with deposits\\n         * |\\n         * |------------------------------------| t\\n         */\\n        markets[_id].totalDebt -= debtDecay(_id);\\n        metadata[_id].lastDecay = _time;\\n\\n        // Control variable decay\\n\\n        // The bond control variable is continually tuned. When it is lowered (which\\n        // lowers the market price), the change is carried out smoothly over time.\\n        if (adjustments[_id].active) {\\n            Adjustment storage adjustment = adjustments[_id];\\n\\n            ControlDecay memory controlDecay = _controlDecay(_id);\\n            terms[_id].controlVariable -= controlDecay.decay;\\n\\n            if (controlDecay.active) {\\n                adjustment.change -= controlDecay.decay;\\n                adjustment.timeToAdjusted -= controlDecay.secondsSince;\\n                adjustment.lastAdjustment = _time;\\n            } else {\\n                adjustment.active = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice             auto-adjust control variable to hit capacity/spend target\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _tune(uint256 _id, uint48 _time) internal {\\n        Metadata memory meta = metadata[_id];\\n\\n        if (_time >= meta.lastTune + meta.tuneInterval) {\\n            Market memory market = markets[_id];\\n\\n            // compute seconds remaining until market will conclude\\n            uint256 timeRemaining = terms[_id].conclusion - _time;\\n            uint256 price = _marketPrice(_id);\\n\\n            // standardize capacity into an base token amount\\n            // hecta decimals (9) + price decimals (9)\\n            uint256 capacity = market.capacityInQuote\\n                ? ((market.capacity * 1e18) / price) / (10**meta.quoteDecimals)\\n                : market.capacity;\\n\\n            /**\\n             * calculate the correct payout to complete on time assuming each bond\\n             * will be max size in the desired deposit interval for the remaining time\\n             *\\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\n             * is 10,000 HECTA. max payout would be 1,000 HECTA (10,000 * 1 / 10).\\n             */\\n            markets[_id].maxPayout = uint64((capacity * meta.depositInterval) / timeRemaining);\\n\\n            // calculate the ideal total debt to satisfy capacity in the remaining time\\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\\n\\n            // derive a new control variable from the target debt and current supply\\n            uint64 newControlVariable = uint64((price * hecta.totalSupply()) / targetDebt);\\n\\n            emit Tuned(_id, terms[_id].controlVariable, newControlVariable);\\n\\n            if (newControlVariable >= terms[_id].controlVariable) {\\n                terms[_id].controlVariable = newControlVariable;\\n            } else {\\n                // if decrease, control variable change will be carried out over the tune interval\\n                // this is because price will be lowered\\n                uint64 change = terms[_id].controlVariable - newControlVariable;\\n                adjustments[_id] = Adjustment(change, _time, meta.tuneInterval, true);\\n            }\\n            metadata[_id].lastTune = _time;\\n        }\\n    }\\n\\n    /* ======== CREATE ======== */\\n\\n    /**\\n     * @notice             creates a new market type\\n     * @dev                current price should be in 9 decimals.\\n     * @param _quoteToken  token used to deposit\\n     * @param _market      [capacity (in HECTA or quote), initial price / HECTA (9 decimals), debt buffer (3 decimals)]\\n     * @param _booleans    [capacity in quote, fixed term]\\n     * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n     * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\\n     * @return id_         ID of new bond market\\n     */\\n    function create(\\n        IERC20 _quoteToken,\\n        uint256[3] memory _market,\\n        bool[2] memory _booleans,\\n        uint256[2] memory _terms,\\n        uint32[2] memory _intervals\\n    ) external override onlyPolicy returns (uint256 id_) {\\n        // the length of the program, in seconds\\n        uint256 secondsToConclusion = _terms[1] - block.timestamp;\\n\\n        // the decimal count of the quote token\\n        uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\n\\n        /*\\n         * initial target debt is equal to capacity (this is the amount of debt\\n         * that will decay over in the length of the program if price remains the same).\\n         * it is converted into base token terms if passed in in quote token terms.\\n         *\\n         * 1e18 = hecta decimals (9) + initial price decimals (9)\\n         */\\n        uint64 targetDebt = uint64(_booleans[0] ? ((_market[0] * 1e18) / _market[1]) / 10**decimals : _market[0]);\\n\\n        /*\\n         * max payout is the amount of capacity that should be utilized in a deposit\\n         * interval. for example, if capacity is 1,000 HECTA, there are 10 days to conclusion,\\n         * and the preferred deposit interval is 1 day, max payout would be 100 HECTA.\\n         */\\n        uint64 maxPayout = uint64((targetDebt * _intervals[0]) / secondsToConclusion);\\n\\n        /*\\n         * max debt serves as a circuit breaker for the market. let's say the quote\\n         * token is a stablecoin, and that stablecoin depegs. without max debt, the\\n         * market would continue to buy until it runs out of capacity. this is\\n         * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\n         * note that its likely advisable to keep this buffer wide.\\n         * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\\n         */\\n        uint256 maxDebt = targetDebt + ((targetDebt * _market[2]) / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\\n\\n        /*\\n         * the control variable is set so that initial price equals the desired\\n         * initial price. the control variable is the ultimate determinant of price,\\n         * so we compute this last.\\n         *\\n         * price = control variable * debt ratio\\n         * debt ratio = total debt / supply\\n         * therefore, control variable = price / debt ratio\\n         */\\n        uint256 controlVariable = (_market[1] * hecta.totalSupply()) / targetDebt;\\n\\n        // depositing into, or getting info for, the created market uses this ID\\n        id_ = markets.length;\\n\\n        markets.push(\\n            Market({\\n                quoteToken: _quoteToken,\\n                capacityInQuote: _booleans[0],\\n                capacity: _market[0],\\n                totalDebt: targetDebt,\\n                maxPayout: maxPayout,\\n                purchased: 0,\\n                sold: 0\\n            })\\n        );\\n\\n        terms.push(\\n            Terms({\\n                fixedTerm: _booleans[1],\\n                controlVariable: uint64(controlVariable),\\n                vesting: uint48(_terms[0]),\\n                conclusion: uint48(_terms[1]),\\n                maxDebt: uint64(maxDebt)\\n            })\\n        );\\n\\n        metadata.push(\\n            Metadata({\\n                lastTune: uint48(block.timestamp),\\n                lastDecay: uint48(block.timestamp),\\n                length: uint48(secondsToConclusion),\\n                depositInterval: _intervals[0],\\n                tuneInterval: _intervals[1],\\n                quoteDecimals: uint8(decimals)\\n            })\\n        );\\n\\n        marketsForQuote[address(_quoteToken)].push(id_);\\n\\n        emit CreateMarket(id_, address(hecta), address(_quoteToken), _market[1]);\\n    }\\n\\n    /**\\n     * @notice             disable existing market\\n     * @param _id          ID of market to close\\n     */\\n    function close(uint256 _id) external override onlyPolicy {\\n        terms[_id].conclusion = uint48(block.timestamp);\\n        markets[_id].capacity = 0;\\n        emit CloseMarket(_id);\\n    }\\n\\n    /* ======== EXTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice             calculate current market price of quote token in base token\\n     * @dev                accounts for debt and control variable decay since last deposit (vs _marketPrice())\\n     * @param _id          ID of market\\n     * @return             price for market in HECTA decimals\\n     *\\n     * price is derived from the equation\\n     *\\n     * p = cv * dr\\n     *\\n     * where\\n     * p = price\\n     * cv = control variable\\n     * dr = debt ratio\\n     *\\n     * dr = d / s\\n     *\\n     * where\\n     * d = debt\\n     * s = supply of token at market creation\\n     *\\n     * d -= ( d * (dt / l) )\\n     *\\n     * where\\n     * dt = change in time\\n     * l = length of program\\n     */\\n    function marketPrice(uint256 _id) public view override returns (uint256) {\\n        return (currentControlVariable(_id) * debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice             payout due for amount of quote tokens\\n     * @dev                accounts for debt and control variable decay so it is up to date\\n     * @param _amount      amount of quote tokens to spend\\n     * @param _id          ID of market\\n     * @return             amount of HECTA to be paid in HECTA decimals\\n     *\\n     * @dev 1e18 = hecta decimals (9) + market price decimals (9)\\n     */\\n    function payoutFor(uint256 _amount, uint256 _id) external view override returns (uint256) {\\n        Metadata memory meta = metadata[_id];\\n        return (_amount * 1e18) / marketPrice(_id) / 10**meta.quoteDecimals;\\n    }\\n\\n    /**\\n     * @notice             calculate current ratio of debt to supply\\n     * @dev                uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\\n     * @param _id          ID of market\\n     * @return             debt ratio for market in quote decimals\\n     */\\n    function debtRatio(uint256 _id) public view override returns (uint256) {\\n        return (currentDebt(_id) * (10**metadata[_id].quoteDecimals)) / hecta.totalSupply();\\n    }\\n\\n    /**\\n     * @notice             calculate debt factoring in decay\\n     * @dev                accounts for debt decay since last deposit\\n     * @param _id          ID of market\\n     * @return             current debt for market in HECTA decimals\\n     */\\n    function currentDebt(uint256 _id) public view override returns (uint256) {\\n        return markets[_id].totalDebt - debtDecay(_id);\\n    }\\n\\n    /**\\n     * @notice             amount of debt to decay from total debt for market ID\\n     * @param _id          ID of market\\n     * @return             amount of debt to decay\\n     */\\n    function debtDecay(uint256 _id) public view override returns (uint64) {\\n        Metadata memory meta = metadata[_id];\\n\\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\\n\\n        return uint64((markets[_id].totalDebt * secondsSince) / meta.length);\\n    }\\n\\n    /**\\n     * @notice             up to date control variable\\n     * @dev                accounts for control variable adjustment\\n     * @param _id          ID of market\\n     * @return             control variable for market in HECTA decimals\\n     */\\n    function currentControlVariable(uint256 _id) public view returns (uint256) {\\n        ControlDecay memory controlDecay = _controlDecay(_id);\\n        return terms[_id].controlVariable - controlDecay.decay;\\n    }\\n\\n    /**\\n     * @notice             is a given market accepting deposits\\n     * @param _id          ID of market\\n     */\\n    function isLive(uint256 _id) public view override returns (bool) {\\n        return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n    }\\n\\n    /**\\n     * @notice returns an array of all active market IDs\\n     */\\n    function liveMarkets() external view override returns (uint256[] memory) {\\n        uint256 num;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) {\\n                ids[nonce] = i;\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice             returns an array of all active market IDs for a given quote token\\n     * @param _token       quote token to check for\\n     */\\n    function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\n        uint256[] memory mkts = marketsForQuote[_token];\\n        uint256 num;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) {\\n                ids[nonce] = mkts[i];\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /* ======== INTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice                  calculate current market price of quote token in base token\\n     * @dev                     see marketPrice() for explanation of price computation\\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\n     * @param _id               market ID\\n     * @return                  price for market in HECTA decimals\\n     */\\n    function _marketPrice(uint256 _id) internal view returns (uint256) {\\n        return (terms[_id].controlVariable * _debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice                  calculate debt factoring in decay\\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\n     * @param _id               market ID\\n     * @return                  current debt for market in quote decimals\\n     */\\n    function _debtRatio(uint256 _id) internal view returns (uint256) {\\n        return (markets[_id].totalDebt * (10**metadata[_id].quoteDecimals)) / hecta.totalSupply();\\n    }\\n\\n    /**\\n     * @notice                  amount to decay control variable by\\n     * @param _id               ID of market\\n     * @return controlDecay\\n     */\\n    function _controlDecay(uint256 _id) internal view returns (ControlDecay memory controlDecay) {\\n        Adjustment memory info = adjustments[_id];\\n        if (!info.active) return controlDecay;\\n\\n        controlDecay.secondsSince = uint48(block.timestamp) - info.lastAdjustment;\\n\\n        controlDecay.active = controlDecay.secondsSince < info.timeToAdjusted;\\n        controlDecay.decay = controlDecay.active\\n            ? (info.change * controlDecay.secondsSince) / info.timeToAdjusted\\n            : info.change;\\n    }\\n}\\n\",\"keccak256\":\"0x33aaeffc0b1957895e0aa2af012ce732ae40c4cd80c1326f4088d8672e3c5bda\",\"license\":\"MIT\"},\"contracts/interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n    // Info about each type of market\\n    struct Market {\\n        uint256 capacity; // capacity remaining\\n        IERC20 quoteToken; // token to accept as payment\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in HECTA (false, default)\\n        uint64 totalDebt; // total debt from market\\n        uint64 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n        uint64 sold; // base tokens out\\n        uint256 purchased; // quote tokens in\\n    }\\n\\n    // Info for creating new markets\\n    struct Terms {\\n        bool fixedTerm; // fixed term or fixed expiration\\n        uint64 controlVariable; // scaling variable for price\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n        uint64 maxDebt; // 9 decimal debt maximum in HECTA\\n    }\\n\\n    // Additional info about market.\\n    struct Metadata {\\n        uint48 lastTune; // last timestamp when control variable was tuned\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n        uint48 depositInterval; // target frequency of deposits\\n        uint48 tuneInterval; // frequency of tuning\\n        uint8 quoteDecimals; // decimals of quote token\\n    }\\n\\n    // Control variable adjustment data\\n    struct Adjustment {\\n        uint64 change;\\n        uint48 lastAdjustment;\\n        uint48 timeToAdjusted;\\n        bool active;\\n    }\\n\\n    // user's bond info\\n    struct UserBond {\\n        uint256 finalPayout;\\n        uint256 expiry;\\n        uint256 index;\\n    }\\n\\n    struct ControlDecay {\\n        uint64 decay; // change in control variable\\n        uint48 secondsSince; // seconds since last change in control variable\\n        bool active; // whether or not change remains active\\n    }\\n\\n    /**\\n     * @notice deposit market\\n     * @param _bid uint256\\n     * @param _amount uint256\\n     * @param _maxPrice uint256\\n     * @param _user address\\n     * @param _referral address\\n     * @return userBond_ UserBond\\n     */\\n    function deposit(\\n        uint256 _bid,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    ) external returns (UserBond memory userBond_);\\n\\n    function create(\\n        IERC20 _quoteToken, // token used to deposit\\n        uint256[3] memory _market, // [capacity, initial price]\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\n        uint256[2] memory _terms, // [vesting, conclusion]\\n        uint32[2] memory _intervals // [deposit interval, tune interval]\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\n\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\n\\n    function debtRatio(uint256 _bid) external view returns (uint256);\\n\\n    function debtDecay(uint256 _bid) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd29ad3151a8150075e2ecd78f5042eeaf0b7d94ce6f9b24ad54a178c2d372b1e\",\"license\":\"MIT\"},\"contracts/interfaces/IHectagonAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IHectagonAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xfaa879566aba4585e5f8d1e7d14a0a811e93b9de12e7052db78f8add61ef05b0\",\"license\":\"MIT\"},\"contracts/interfaces/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface INoteKeeper {\\n    // Info for market note\\n    struct Note {\\n        uint256 payout; // gHECTA remaining to be paid\\n        uint48 created; // time market was created\\n        uint48 matured; // timestamp when market is matured\\n        uint48 redeemed; // time market was redeemed\\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n    }\\n\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes\\n    ) external returns (uint256);\\n\\n    function redeemAll(address _user) external returns (uint256);\\n\\n    function pushNote(address to, uint256 index) external;\\n\\n    function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\n\\n    function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\\n\",\"keccak256\":\"0x4452cfbcb0d6f4230e326c3a914ab5a1dd5da77dbe33da24e21778af5aeecce9\",\"license\":\"MIT\"},\"contracts/interfaces/IStaking.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IStaking {\\n    function stake(\\n        address _to,\\n        uint256 _amount,\\n        bool _claim\\n    ) external returns (uint256);\\n\\n    function claim(address _recipient) external returns (uint256);\\n\\n    function forfeit() external returns (uint256);\\n\\n    function toggleLock() external;\\n\\n    function unstake(\\n        address _to,\\n        uint256 _amount,\\n        bool _trigger\\n    ) external returns (uint256);\\n\\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\\n\\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\\n\\n    function rebase() external;\\n\\n    function index() external view returns (uint256);\\n\\n    function contractBalance() external view returns (uint256);\\n\\n    function totalStaked() external view returns (uint256);\\n\\n    function supplyInWarmup() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x8f1abc13bfbb09eceecdc16570e8397315a548c71ab8f8f9cdc51223438a97df\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ITreasury {\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function withdraw(address _token, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb6fc1fe9fb92231c70a4d042409757db3655f168a3f33f59297d6e1a684af2db\",\"license\":\"MIT\"},\"contracts/interfaces/IgHECTA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IgHECTA is IERC20 {\\n    function mint(address _to, uint256 _amount) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function index() external view returns (uint256);\\n\\n    function balanceFrom(uint256 _amount) external view returns (uint256);\\n\\n    function balanceTo(uint256 _amount) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x08b3827b970dbb3438ac71a19ebc904994c541f5231e71a71d64072eefc0b579\",\"license\":\"MIT\"},\"contracts/types/FrontEndRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../types/HectagonAccessControlled.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract FrontEndRewarder is HectagonAccessControlled {\\n    struct Give {\\n        uint256 toRefer;\\n        uint256 toDaoInvestment;\\n        uint256 toDaoCommunity;\\n        uint256 toBuyer;\\n    }\\n\\n    struct ReferTerm {\\n        uint256 referrerPercent; // reward for referrer (3 decimals: 100 = 1%)\\n        uint256 buyerPercent; // reward for bond buyer (3 decimals: 100 = 1%)\\n    }\\n\\n    struct PartnerTerm {\\n        uint256 amount; // partner's remaining hecta bonus, decimal 9\\n        uint256 percent; // partner's bonus percent per deposit, 3 decimals: 100 = 1%\\n    }\\n\\n    /* ========= STATE VARIABLES ========== */\\n\\n    mapping(address => uint256) public rewards; // rewards notes\\n\\n    mapping(address => PartnerTerm) public partnerTerms; // reward term for each partner\\n    mapping(address => ReferTerm) public referTerms; // reward term for refer\\n\\n    uint256 public referTermCap = 2000; // % cap for referrer (3 decimals: 2000 = 20%)\\n    uint256 public partnerTermCap = 10000; // % cap for partner (3 decimals: 10000 = 100%)\\n\\n    uint256 public daoInvestmentPercent = 10000; // 3 decimals: 10000 = 100%\\n\\n    uint256 public daoCommunityPercent = 45000; // 3 decimals: 45000 = 450%\\n\\n    uint256 private immutable RATE_DENOMINATOR = 1e4;\\n\\n    IERC20 internal immutable hecta; // reward token\\n\\n    constructor(IHectagonAuthority _authority, IERC20 _hecta) HectagonAccessControlled(_authority) {\\n        hecta = _hecta;\\n    }\\n\\n    /* ========= EXTERNAL FUNCTIONS ========== */\\n\\n    // pay reward to referrer\\n    function getReward() external {\\n        uint256 reward = rewards[msg.sender];\\n\\n        rewards[msg.sender] = 0;\\n        hecta.transfer(msg.sender, reward);\\n    }\\n\\n    /* ========= INTERNAL ========== */\\n\\n    /**\\n     * @notice          add new market payout to user data\\n     * @return give     rewards data\\n     */\\n    function _giveRewards(\\n        uint256 _payout,\\n        address _referral,\\n        address _buyer\\n    ) internal returns (Give memory give) {\\n        // first we calculate rewards paid to the DAO and referrer\\n        give.toDaoInvestment += (_payout * daoInvestmentPercent) / RATE_DENOMINATOR;\\n        give.toDaoCommunity += (_payout * daoCommunityPercent) / RATE_DENOMINATOR;\\n\\n        // check partner logic\\n        if (partnerTerms[_buyer].percent > 0) {\\n            uint256 partnerBonus = (_payout * partnerTerms[_buyer].percent) / RATE_DENOMINATOR;\\n            if (partnerBonus >= partnerTerms[_buyer].amount) {\\n                give.toBuyer = partnerTerms[_buyer].amount;\\n            } else {\\n                give.toBuyer = partnerBonus;\\n            }\\n            partnerTerms[_buyer].amount -= give.toBuyer;\\n        } else {\\n            ReferTerm memory refTerm = referTerms[_referral];\\n\\n            if (refTerm.referrerPercent > 0) {\\n                give.toRefer = (_payout * refTerm.referrerPercent) / RATE_DENOMINATOR;\\n                rewards[_referral] += give.toRefer;\\n            }\\n\\n            if (refTerm.buyerPercent > 0) {\\n                give.toBuyer = (_payout * refTerm.buyerPercent) / RATE_DENOMINATOR;\\n            }\\n        }\\n\\n        return give;\\n    }\\n\\n    /**\\n     * @notice set Cap for referrer % reward\\n     */\\n    function setReferTermCap(uint256 _cap) external onlyGovernor {\\n        referTermCap = _cap;\\n    }\\n\\n    /**\\n     * @notice set Cap for referrer % reward\\n     */\\n    function setPartnerTermCap(uint256 _cap) external onlyGovernor {\\n        partnerTermCap = _cap;\\n    }\\n\\n    function setDaoRewards(uint256 daoInvestmentPercent_, uint256 daoCommunityPercent_) external onlyGovernor {\\n        daoInvestmentPercent = daoInvestmentPercent_;\\n        daoCommunityPercent = daoCommunityPercent_;\\n    }\\n\\n    /**\\n     * @notice set referrer term\\n     */\\n    function setReferTerm(\\n        address _referrer,\\n        uint256 _referrerPercent,\\n        uint256 _buyerPercent\\n    ) external onlyPolicy {\\n        require(_referrer != address(0), \\\"Zero address: Referrer\\\");\\n        require((_referrerPercent + _buyerPercent) <= referTermCap, \\\"reward too high\\\");\\n        referTerms[_referrer] = ReferTerm({referrerPercent: _referrerPercent, buyerPercent: _buyerPercent});\\n    }\\n\\n    /**\\n     * @notice set partner term\\n     */\\n    function setPartnerTerm(\\n        address _partner,\\n        uint256 _amount,\\n        uint256 _percent\\n    ) external onlyPolicy {\\n        require(_partner != address(0), \\\"Zero address: Partner\\\");\\n        require(_percent <= partnerTermCap, \\\"reward too high\\\");\\n        partnerTerms[_partner] = PartnerTerm(_amount, _percent);\\n    }\\n}\\n\",\"keccak256\":\"0x22b8b12c9781ac58144b549d7d0071a350fc7893c671859a5b9af4ce61475b0e\",\"license\":\"MIT\"},\"contracts/types/HectagonAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IHectagonAuthority.sol\\\";\\n\\nabstract contract HectagonAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IHectagonAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IHectagonAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IHectagonAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IHectagonAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x8e290761a0b4a58d0614771e19f5ab283030daf2b1019a39bcc8faa726d6dcc2\",\"license\":\"MIT\"},\"contracts/types/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../types/FrontEndRewarder.sol\\\";\\nimport \\\"../interfaces/IgHECTA.sol\\\";\\nimport \\\"../interfaces/IStaking.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/INoteKeeper.sol\\\";\\n\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\n    mapping(address => Note[]) public notes; // user deposit data\\n    mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n\\n    IgHECTA internal immutable gHECTA;\\n    IStaking internal immutable staking;\\n    ITreasury internal treasury;\\n\\n    constructor(\\n        IHectagonAuthority _authority,\\n        IERC20 _hecta,\\n        IgHECTA _ghecta,\\n        IStaking _staking,\\n        ITreasury _treasury\\n    ) FrontEndRewarder(_authority, _hecta) {\\n        gHECTA = _ghecta;\\n        staking = _staking;\\n        treasury = _treasury;\\n    }\\n\\n    // if treasury address changes on authority, update it\\n    function updateTreasury() external {\\n        require(\\n            msg.sender == authority.governor() ||\\n                msg.sender == authority.guardian() ||\\n                msg.sender == authority.policy(),\\n            \\\"Only authorized\\\"\\n        );\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /* ========== ADD ========== */\\n\\n    /**\\n     * @notice              adds a new Note for a user, stores Ref & DAO rewards, and mints & stakes payout & rewards\\n     * @param _user         the user that owns the Note\\n     * @param _payout       the amount of HECTA due to the user\\n     * @param _expiry       the timestamp when the Note is redeemable\\n     * @param _marketID     the ID of the market deposited into\\n     * @return give         rewards data\\n     */\\n    function addNote(\\n        address _user,\\n        uint256 _payout,\\n        uint48 _expiry,\\n        uint48 _marketID,\\n        address _referral\\n    ) internal returns (uint256, Give memory) {\\n        // front end operators can earn rewards by referring users\\n        Give memory give = _giveRewards(_payout, _referral, _user); // Give struct inherited fom FrontEndRewarder\\n        // the index of the note is the next in the user's array\\n        uint256 index_ = notes[_user].length;\\n\\n        uint256 finalPayout = give.toBuyer + _payout;\\n        uint256 daoAmount = give.toDaoCommunity + give.toDaoInvestment - give.toBuyer - give.toRefer;\\n\\n        // the new note is pushed to the user's array\\n        notes[_user].push(\\n            Note({\\n                payout: gHECTA.balanceTo(finalPayout),\\n                created: uint48(block.timestamp),\\n                matured: _expiry,\\n                redeemed: 0,\\n                marketID: _marketID\\n            })\\n        );\\n\\n        // mint buyer's final payout and referer commission\\n        treasury.mint(address(this), finalPayout + give.toRefer);\\n\\n        // note that only the buyer's final payout gets staked (referer commission are in HECTA)\\n        staking.stake(address(this), finalPayout, true);\\n\\n        // mint Dao Community Fund and Dao Investment Fund, store in treasury\\n        treasury.mint(address(treasury), daoAmount);\\n\\n        return (index_, give);\\n    }\\n\\n    /* ========== REDEEM ========== */\\n\\n    /**\\n     * @notice             redeem notes for user\\n     * @param _user        the user to redeem for\\n     * @param _indexes     the note indexes to redeem\\n     * @return payout_     sum of payout sent, in gHECTA\\n     */\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes\\n    ) public override returns (uint256 payout_) {\\n        uint48 time = uint48(block.timestamp);\\n\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            (uint256 pay, bool matured) = pendingFor(_user, _indexes[i]);\\n\\n            if (matured) {\\n                notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\n                payout_ += pay;\\n            }\\n        }\\n\\n        gHECTA.transfer(_user, payout_); // send payout as gHECTA\\n    }\\n\\n    /**\\n     * @notice             redeem all redeemable markets for user\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n     * @param _user        user to redeem all notes for\\n     * @return             sum of payout sent, in gHECTA\\n     */\\n    function redeemAll(address _user) external returns (uint256) {\\n        return redeem(_user, indexesFor(_user));\\n    }\\n\\n    /* ========== TRANSFER ========== */\\n\\n    /**\\n     * @notice             approve an address to transfer a note\\n     * @param _to          address to approve note transfer for\\n     * @param _index       index of note to approve transfer for\\n     */\\n    function pushNote(address _to, uint256 _index) external override {\\n        require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n        noteTransfers[msg.sender][_index] = _to;\\n    }\\n\\n    /**\\n     * @notice             transfer a note that has been approved by an address\\n     * @param _from        the address that approved the note transfer\\n     * @param _index       the index of the note to transfer (in the sender's array)\\n     */\\n    function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n        require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n        require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n        newIndex_ = notes[msg.sender].length;\\n        notes[msg.sender].push(notes[_from][_index]);\\n\\n        delete notes[_from][_index];\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    // Note info\\n\\n    /**\\n     * @notice             all pending notes for user\\n     * @param _user        the user to query notes for\\n     * @return             the pending notes for the user\\n     */\\n    function indexesFor(address _user) public view override returns (uint256[] memory) {\\n        Note[] memory info = notes[_user];\\n\\n        uint256 length;\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](length);\\n        uint256 position;\\n\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) {\\n                indexes[position] = i;\\n                position++;\\n            }\\n        }\\n\\n        return indexes;\\n    }\\n\\n    /**\\n     * @notice             calculate amount available for claim for a single note\\n     * @param _user        the user that the note belongs to\\n     * @param _index       the index of the note in the user's array\\n     * @return payout_     the payout due, in gHECTA\\n     * @return matured_    if the payout can be redeemed\\n     */\\n    function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\\n        Note memory note = notes[_user][_index];\\n\\n        payout_ = note.payout;\\n        matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x0478e5c22706bdb4a6bcab9591f958540ca39f5e355684212450bc75bd282899\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102e95760003560e01c8063a422061011610191578063c0aa0e8a116100e3578063e0b117ff11610097578063e481b26511610071578063e481b265146107f0578063f1b7dc7814610803578063ff43a1bf1461081657600080fd5b8063e0b117ff1461073e578063e364360014610786578063e3684e391461079957600080fd5b8063c9b67af5116100c8578063c9b67af514610710578063d2390aa214610718578063d6db4df81461072b57600080fd5b8063c0aa0e8a14610699578063c3e0fb1c146106e857600080fd5b8063bc24cea911610145578063be399be51161011f578063be399be514610648578063bf7e214f1461065b578063c0680e201461068657600080fd5b8063bc24cea91461058d578063bc3b2b12146105a0578063bcb296671461063557600080fd5b8063abbf4b1711610176578063abbf4b17146104db578063b1283e7714610506578063b15780461461056657600080fd5b8063a4220610146104b5578063a5874627146104c857600080fd5b80633d18b9121161024a5780636f6ff0ad116101fe57806386ff8b84116101d857806386ff8b841461049b578063953db4a4146104a45780639c769787146104ad57600080fd5b80636f6ff0ad146104405780637a9e5e4b146104535780637c770aae1461046657600080fd5b8063649144391161022f57806364914439146104045780636a6c575d146104245780636f345cae1461043757600080fd5b80633d18b912146103f3578063454f7b8f146103fb57600080fd5b806327507458116102a15780633a3d63ba116102865780633a3d63ba146103915780633adec5a7146103a45780633c4290e1146103b757600080fd5b80632750745814610365578063282c89ce1461038857600080fd5b80630a9d85eb116102d25780630a9d85eb1461032a5780630aebeb4e1461033d57806321a7d29b1461035257600080fd5b806306d008db146102ee5780630700037d1461030a575b600080fd5b6102f760085481565b6040519081526020015b60405180910390f35b6102f76103183660046143db565b60026020526000908152604090205481565b6102f76103383660046143f8565b610829565b61035061034b3660046143f8565b610883565b005b6102f7610360366004614588565b6109ce565b6103786103733660046143f8565b611167565b6040519015158152602001610301565b6102f760115481565b61035061039f3660046143f8565b6111d0565b6102f76103b23660046143f8565b611281565b6103de6103c53660046143db565b6004602052600090815260409020805460019091015482565b60408051928352602083019190915201610301565b6103506112dd565b6102f760105481565b6104176104123660046143db565b611388565b6040516103019190614649565b6102f761043236600461468d565b611516565b6102f760065481565b61035061044e36600461468d565b6115e6565b6103506104613660046143db565b61169d565b6104796104743660046146af565b6117a0565b6040805182518152602080840151908201529181015190820152606001610301565b6102f760075481565b6102f760055481565b610350611d1e565b6102f76104c3366004614705565b611fbf565b6103506104d6366004614731565b612252565b6104ee6104e93660046143f8565b6123d2565b6040516001600160401b039091168152602001610301565b6105196105143660046143f8565b6124b6565b604080519788526001600160a01b039096166020880152931515948601949094526001600160401b0391821660608601528116608085015290911660a083015260c082015260e001610301565b6103de6105743660046143db565b6003602052600090815260409020805460019091015482565b61035061059b366004614731565b612524565b6105fd6105ae3660046143f8565b600f602052600090815260409020546001600160401b0381169065ffffffffffff600160401b82048116916e01000000000000000000000000000081049091169060ff600160a01b9091041684565b604080516001600160401b0395909516855265ffffffffffff9384166020860152919092169083015215156060820152608001610301565b6102f76106433660046143f8565b6126ad565b6102f76106563660046143db565b612709565b60015461066e906001600160a01b031681565b6040516001600160a01b039091168152602001610301565b6102f7610694366004614705565b612718565b6106ac6106a73660046143f8565b612749565b6040805195151586526001600160401b03948516602087015265ffffffffffff938416908601529116606084015216608082015260a001610301565b6106fb6106f6366004614705565b6127a8565b60408051928352901515602083015201610301565b610417612873565b6102f7610726366004614766565b61295b565b610350610739366004614705565b612ad3565b61075161074c366004614705565b612ba2565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a001610301565b6103506107943660046143f8565b612c05565b6107ac6107a73660046143f8565b612cb6565b6040805165ffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015260ff90911660a082015260c001610301565b6104176107fe3660046143db565b612d14565b6102f76108113660046143f8565b612f38565b6103506108243660046143f8565b612ff9565b600080610835836130aa565b90508060000151600d848154811061084f5761084f614820565b600091825260209091200154610873919061010090046001600160401b031661484c565b6001600160401b03169392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa9190614874565b6001600160a01b0316336001600160a01b0316146000906109375760405162461bcd60e51b815260040161092e9190614891565b60405180910390fd5b5042600d828154811061094c5761094c614820565b90600052602060002001600001600f6101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600c828154811061099057610990614820565b6000918252602082206004909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b60015460408051630505c8c960e01b815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c9190614874565b6001600160a01b0316336001600160a01b031614600090610a705760405162461bcd60e51b815260040161092e9190614891565b506020830151600090610a84904290614939565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea9190614950565b60ff169050600086816020020151610b03578751610b3b565b610b0e82600a614a57565b60208901518951610b2790670de0b6b3a7640000614a63565b610b319190614a98565b610b3b9190614a98565b85519091506000908490610b559063ffffffff1684614aac565b6001600160401b0316610b689190614a98565b90506000620186a08a60026020020151610b8b906001600160401b038616614a63565b610b959190614a98565b610ba8906001600160401b038516614adb565b90506000836001600160401b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c389190614af3565b60208d0151610c479190614a63565b610c519190614a98565b600c80546040805160e0810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060028110610c9757610c97614820565b60209081029190910151151582526001600160401b0380891683830152878116604080850191909152600060608086018290526080958601829052875460018181018a5598835291859020875160049093020191825593860151818801805488850151968901518616600160a81b0267ffffffffffffffff60a81b19971515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009092166001600160a01b03909416939093171795909516179093559284015160028301805460a0808801518516600160401b026fffffffffffffffffffffffffffffffff19909216939094169290921791909117905560c09093015160039091015580519182019052600d9181908d90602002015115158152602001836001600160401b031681526020018b600060028110610ddb57610ddb614820565b602002015165ffffffffffff1681526020018b600160028110610e0057610e00614820565b6020908102919091015165ffffffffffff90811683526001600160401b038088169383019390935284546001810186556000958652828620855191018054868501516040808901516060808b01516080909b01518a16600160a81b0267ffffffffffffffff60a81b199b8916600160781b027fffffffffffffffffffffff000000000000ffffffffffffffffffffffffffffff938a16690100000000000000000002939093167fffffffffffffffffffffff000000000000000000000000ffffffffffffffffff95909b166101000268ffffffffffffffff00199815159890981668ffffffffffffffffff1990961695909517969096179290921697909717179690961695909517909455825160c081018452428216808252928101929092528a1691810191909152600e9290918201908b906020908102919091015163ffffffff168252018a6001602002015163ffffffff1665ffffffffffff1681526020018760ff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff1602179055505050601260008d6001600160a01b03166001600160a01b031681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150558b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e60016003811061113c5761113c614820565b602002015160405161115091815260200190565b60405180910390a450505050505095945050505050565b6000600c828154811061117c5761117c614820565b9060005260206000209060040201600001546000141580156111ca575042600d83815481106111ad576111ad614820565b600091825260209091200154600160781b900465ffffffffffff16115b92915050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611223573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112479190614874565b6001600160a01b0316336001600160a01b03161460009061127b5760405162461bcd60e51b815260040161092e9190614891565b50600655565b6000600e828154811061129657611296614820565b6000918252602090912001546112b790600160f01b900460ff16600a614b0c565b6112c083612f38565b6112c984610829565b6112d39190614a63565b6111ca9190614a98565b3360008181526002602052604080822080549290555163a9059cbb60e01b8152600481019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611360573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113849190614b1b565b5050565b6001600160a01b03811660009081526012602090815260408083208054825181850281018501909352808352606094938301828280156113e757602002820191906000526020600020905b8154815260200190600101908083116113d3575b50505050509050600080600090505b82518110156114465761142183828151811061141457611414614820565b6020026020010151611167565b15611434578161143081614b38565b9250505b8061143e81614b38565b9150506113f6565b506000816001600160401b0381111561146157611461614411565b60405190808252806020026020018201604052801561148a578160200160208202803683370190505b5090506000805b845181101561150b576114af85828151811061141457611414614820565b156114f9578481815181106114c6576114c6614820565b60200260200101518383815181106114e0576114e0614820565b6020908102919091010152816114f581614b38565b9250505b8061150381614b38565b915050611491565b509095945050505050565b600080600e838154811061152c5761152c614820565b60009182526020918290206040805160c081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b9091041660a082018190529091506115af90600a614b0c565b6115b884611281565b6115ca86670de0b6b3a7640000614a63565b6115d49190614a98565b6115de9190614a98565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611639573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061165d9190614874565b6001600160a01b0316336001600160a01b0316146000906116915760405162461bcd60e51b815260040161092e9190614891565b50600791909155600855565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156116f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117149190614874565b6001600160a01b0316336001600160a01b0316146000906117485760405162461bcd60e51b815260040161092e9190614891565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6117c460405180606001604052806000815260200160008152602001600081525090565b6117ef6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000600c888154811061180457611804614820565b906000526020600020906004020190506000600d898154811061182957611829614820565b60009182526020918290206040805160a081018252919092015460ff8116151582526001600160401b03610100820481169483019490945265ffffffffffff69010000000000000000008204811693830193909352600160781b8104831660608301819052600160a81b909104909316608082015292504291908216106118f25760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c7564656400000000604482015260640161092e565b6118fc8a826131bf565b60006119078b613401565b9050888111156119595760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d617820707269636500604482015260640161092e565b6000600e8c8154811061196e5761196e614820565b60009182526020909120015461198f90600160f01b900460ff16600a614b0c565b826119a28d670de0b6b3a7640000614a63565b6119ac9190614a98565b6119b69190614a98565b60028601549091506001600160401b0316811115611a165760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a65206578636565646564000000604482015260640161092e565b60115481601054611a279190614adb565b1115611a9b5760405162461bcd60e51b815260206004820152602760248201527f4465706f7369746f72793a20746f74616c207061796f7574206869742070617960448201527f6f75742063617000000000000000000000000000000000000000000000000000606482015260840161092e565b6001850154600160a01b900460ff16611ab45780611ab6565b8a5b856000016000828254611ac99190614939565b90915550508351611ade578360400151611aee565b828460400151611aee9190614b53565b65ffffffffffff1660208801526003850180548c9190600090611b12908490614adb565b9091555050600285018054829190600890611b3e908490600160401b90046001600160401b0316614b7d565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550808560010160158282829054906101000a90046001600160401b0316611b889190614b7d565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550611bbd898289602001518f8c613477565b60408901919091526060810151909650611bd79082614adb565b876000018181525050876001600160a01b0316896001600160a01b03168d7f4f0ed72ede64d6052fad7cbe06ab6234ec2c0cc3255a8566e9fecff3958142388e868c604001518c600001518d606001518e604001518f60200151604051611c6f9796959493929190968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60405180910390a4600b546001860154611c98916001600160a01b03918216913391168e613833565b8060106000828254611caa9190614adb565b9091555050600185015460808501516001600160401b03600160a81b909204821691161015611d055760008086556040518d917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611d0f565b611d0f8c846138a2565b50505050505095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d959190614874565b6001600160a01b0316336001600160a01b03161480611e3b5750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e02573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e269190614874565b6001600160a01b0316336001600160a01b0316145b80611ecd5750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e94573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611eb89190614874565b6001600160a01b0316336001600160a01b0316145b611f195760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a65640000000000000000000000000000000000604482015260640161092e565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f909190614874565b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038281166000908152600a6020908152604080832085845290915281205490911633146120355760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e640000604482015260640161092e565b6001600160a01b038316600090815260096020526040902080548390811061205f5761205f614820565b6000918252602090912060029091020160010154600160601b900465ffffffffffff16156120cf5760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d656400000000000000604482015260640161092e565b503360009081526009602052604080822080546001600160a01b03861684529190922080549192918490811061210757612107614820565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b038516815260099091526040902080548390811061221157612211614820565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122c99190614874565b6001600160a01b0316336001600160a01b0316146000906122fd5760405162461bcd60e51b815260040161092e9190614891565b506001600160a01b0383166123545760405162461bcd60e51b815260206004820152601560248201527f5a65726f20616464726573733a20506172746e65720000000000000000000000604482015260640161092e565b6006548111156123985760405162461bcd60e51b815260206004820152600f60248201526e0e4caeec2e4c840e8dede40d0d2ced608b1b604482015260640161092e565b60408051808201825292835260208084019283526001600160a01b0390941660009081526003909452909220905181559051600190910155565b600080600e83815481106123e8576123e8614820565b600091825260208083206040805160c081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b81049091166080840152600160f01b900460ff1660a08301529092506124659042614939565b9050816040015165ffffffffffff1681600c868154811061248857612488614820565b60009182526020909120600490910201600101546115d49190600160a81b90046001600160401b0316614a63565b600c81815481106124c657600080fd5b600091825260209091206004909102018054600182015460028301546003909301549193506001600160a01b0381169260ff600160a01b830416926001600160401b03600160a81b90930483169282811692600160401b9004169087565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612577573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061259b9190614874565b6001600160a01b0316336001600160a01b0316146000906125cf5760405162461bcd60e51b815260040161092e9190614891565b506001600160a01b0383166126265760405162461bcd60e51b815260206004820152601660248201527f5a65726f20616464726573733a20526566657272657200000000000000000000604482015260640161092e565b6005546126338284614adb565b11156126735760405162461bcd60e51b815260206004820152600f60248201526e0e4caeec2e4c840e8dede40d0d2ced608b1b604482015260640161092e565b60408051808201825292835260208084019283526001600160a01b0390941660009081526004909452909220905181559051600190910155565b60006126b8826123d2565b600c83815481106126cb576126cb614820565b906000526020600020906004020160010160159054906101000a90046001600160401b03166126fa919061484c565b6001600160401b031692915050565b60006111ca8261072684612d14565b6012602052816000526040600020818154811061273457600080fd5b90600052602060002001600091509150505481565b600d818154811061275957600080fd5b60009182526020909120015460ff811691506001600160401b03610100820481169165ffffffffffff69010000000000000000008204811692600160781b830490911691600160a81b90041685565b6001600160a01b0382166000908152600960205260408120805482918291859081106127d6576127d6614820565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b9092049093166080830152919450915015801561285d575042816040015165ffffffffffff1611155b80156128695750805115155b9150509250929050565b60606000805b600c548110156128b15761288c81611167565b1561289f578161289b81614b38565b9250505b806128a981614b38565b915050612879565b506000816001600160401b038111156128cc576128cc614411565b6040519080825280602002602001820160405280156128f5578160200160208202803683370190505b5090506000805b600c548110156129525761290f81611167565b15612940578083838151811061292757612927614820565b60209081029190910101528161293c81614b38565b9250505b8061294a81614b38565b9150506128fc565b50909392505050565b600042815b8351811015612a375760008061298f8787858151811061298257612982614820565b60200260200101516127a8565b915091508015612a22576001600160a01b038716600090815260096020526040902086518591908890869081106129c8576129c8614820565b6020026020010151815481106129e0576129e0614820565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff1602179055508185612a1f9190614adb565b94505b50508080612a2f90614b38565b915050612960565b5060405163a9059cbb60e01b81526001600160a01b038581166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612aa7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612acb9190614b1b565b505092915050565b336000908152600960205260409020805482908110612af457612af4614820565b600091825260209091206001600290920201015465ffffffffffff16612b5c5760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e64000000000000604482015260640161092e565b336000908152600a6020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60096020528160005260406000208181548110612bbe57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c7c9190614874565b6001600160a01b0316336001600160a01b031614600090612cb05760405162461bcd60e51b815260040161092e9190614891565b50601155565b600e8181548110612cc657600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1686565b6001600160a01b0381166000908152600960209081526040808320805482518185028101850190935280835260609493849084015b82821015612dbf5760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b900490911660808301529083529092019101612d49565b505050509050600080600090505b8251811015612e4e57828181518110612de857612de8614820565b60200260200101516060015165ffffffffffff166000148015612e295750828181518110612e1857612e18614820565b602002602001015160000151600014155b15612e3c5781612e3881614b38565b9250505b80612e4681614b38565b915050612dcd565b506000816001600160401b03811115612e6957612e69614411565b604051908082528060200260200182016040528015612e92578160200160208202803683370190505b5090506000805b845181101561150b57848181518110612eb457612eb4614820565b60200260200101516060015165ffffffffffff166000148015612ef55750848181518110612ee457612ee4614820565b602002602001015160000151600014155b15612f265780838381518110612f0d57612f0d614820565b602090810291909101015281612f2281614b38565b9250505b80612f3081614b38565b915050612e99565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612f98573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fbc9190614af3565b600e8381548110612fcf57612fcf614820565b600091825260209091200154612ff090600160f01b900460ff16600a614b0c565b6112c9846126ad565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561304c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130709190614874565b6001600160a01b0316336001600160a01b0316146000906130a45760405162461bcd60e51b815260040161092e9190614891565b50600555565b60408051606081018252600080825260208201819052918101919091526000828152600f6020908152604091829020825160808101845290546001600160401b038116825265ffffffffffff600160401b82048116938301939093526e01000000000000000000000000000081049092169281019290925260ff600160a01b909104161515606082018190526131405750919050565b602081015161314f9042614b9f565b65ffffffffffff908116602084018190526040808401519092161190830181905261317b5780516131ae565b806040015165ffffffffffff16826020015165ffffffffffff1682600001516131a49190614aac565b6131ae9190614bbe565b6001600160401b0316825250919050565b6131c8826123d2565b600c83815481106131db576131db614820565b906000526020600020906004020160010160158282829054906101000a90046001600160401b031661320d919061484c565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555080600e838154811061324557613245614820565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600f909152604090205460ff600160a01b9091041615611384576000828152600f60205260408120906132b2846130aa565b90508060000151600d85815481106132cc576132cc614820565b600091825260209091200180546001906132f590849061010090046001600160401b031661484c565b92506101000a8154816001600160401b0302191690836001600160401b031602179055508060400151156133d4578051825483906000906133409084906001600160401b031661484c565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550806020015182600001600e8282829054906101000a900465ffffffffffff1661338d9190614b9f565b82546101009290920a65ffffffffffff81810219909316918316021790915583546dffffffffffff00000000000000001916600160401b91861691909102178355506133fb565b81547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1682555b50505050565b6000600e828154811061341657613416614820565b60009182526020909120015461343790600160f01b900460ff16600a614b0c565b61344083613e24565b600d848154811061345357613453614820565b6000918252602090912001546112d3919061010090046001600160401b0316614a63565b60006134a46040518060800160405280600081526020016000815260200160008152602001600081525090565b60006134b187858a613f1d565b6001600160a01b0389166000908152600960205260408120546060830151929350916134de908a90614adb565b9050600083600001518460600151856020015186604001516135009190614adb565b61350a9190614939565b6135149190614939565b6001600160a01b038c811660009081526009602052604090819020815160a08101928390526319a948db60e21b90925260a482018690529293509081907f0000000000000000000000000000000000000000000000000000000000000000166366a5236c60c48301602060405180830381865afa158015613599573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135bd9190614af3565b81524265ffffffffffff9081166020808401919091528d8216604080850191909152600060608086018290528f8516608096870152875460018082018a559883529184902087516002909302019182559286015196018054918601519286015195909401519583166bffffffffffffffffffffffff1990911617600160301b918316919091021777ffffffffffffffffffffffff0000000000000000000000001916600160601b9382169390930265ffffffffffff60901b191692909217600160901b9390921692909202179055600b5484516001600160a01b03909116906340c10f199030906136ae9086614adb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561370c57600080fd5b505af1158015613720573d6000803e3d6000fd5b505060405163995846bd60e01b815230600482015260248101859052600160448201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316925063995846bd91506064016020604051808303816000875af1158015613798573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137bc9190614af3565b50600b546040516340c10f1960e01b81526001600160a01b039091166004820181905260248201839052906340c10f1990604401600060405180830381600087803b15801561380a57600080fd5b505af115801561381e573d6000803e3d6000fd5b50949d959c50949a5050505050505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790526133fb9085906141d3565b6000600e83815481106138b7576138b7614820565b60009182526020918290206040805160c081018252929091015465ffffffffffff808216808552600160301b8304821695850195909552600160601b8204811692840192909252600160901b810482166060840152600160c01b810490911660808301819052600160f01b90910460ff1660a083015290925061393991614b53565b65ffffffffffff168265ffffffffffff1610613e1f576000600c848154811061396457613964614820565b600091825260208083206040805160e08101825260049094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b8404161515918401919091526001600160401b03600160a81b9092048216606084015260028101548083166080850152600160401b900490911660a08301526003015460c0820152600d8054919350859187908110613a0257613a02614820565b600091825260209091200154613a279190600160781b900465ffffffffffff16614b9f565b65ffffffffffff1690506000613a3c86613401565b905060008360400151613a50578351613a8a565b60a0850151613a6090600a614b0c565b84518390613a7690670de0b6b3a7640000614a63565b613a809190614a98565b613a8a9190614a98565b905082856060015165ffffffffffff1682613aa59190614a63565b613aaf9190614a98565b600c8881548110613ac257613ac2614820565b906000526020600020906004020160020160006101000a8154816001600160401b0302191690836001600160401b03160217905550600083866040015165ffffffffffff1683613b129190614a63565b613b1c9190614a98565b90506000817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ba39190614af3565b613bad9086614a63565b613bb79190614a98565b9050887f3070b0e3e52b8713c7489d32604ea4b0970024f74c6e05319269a19bc1e3a9d9600d8b81548110613bee57613bee614820565b60009182526020918290200154604080516101009092046001600160401b0390811683528616928201929092520160405180910390a2600d8981548110613c3757613c37614820565b6000918252602090912001546001600160401b03610100909104811690821610613ca55780600d8a81548110613c6f57613c6f614820565b9060005260206000200160000160016101000a8154816001600160401b0302191690836001600160401b03160217905550613ddd565b600081600d8b81548110613cbb57613cbb614820565b600091825260209091200154613cdf919061010090046001600160401b031661484c565b90506040518060800160405280826001600160401b031681526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600f60008c815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600e6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160146101000a81548160ff021916908315150217905550905050505b87600e8a81548110613df157613df1614820565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ea89190614af3565b600e8381548110613ebb57613ebb614820565b600091825260209091200154613edc90600160f01b900460ff16600a614b0c565b600c8481548110613eef57613eef614820565b60009182526020909120600490910201600101546112d39190600160a81b90046001600160401b0316614a63565b613f486040518060800160405280600081526020016000815260200160008152602001600081525090565b7f000000000000000000000000000000000000000000000000000000000000000060075485613f779190614a63565b613f819190614a98565b81602001818151613f929190614adb565b9052506008547f000000000000000000000000000000000000000000000000000000000000000090613fc49086614a63565b613fce9190614a98565b81604001818151613fdf9190614adb565b9052506001600160a01b038216600090815260036020526040902060010154156140db576001600160a01b0382166000908152600360205260408120600101547f00000000000000000000000000000000000000000000000000000000000000009061404b9087614a63565b6140559190614a98565b6001600160a01b038416600090815260036020526040902054909150811061409a576001600160a01b03831660009081526003602052604090205460608301526140a2565b606082018190525b60608201516001600160a01b038416600090815260036020526040812080549091906140cf908490614939565b909155506141cc915050565b6001600160a01b03831660009081526004602090815260409182902082518084019093528054808452600190910154918301919091521561417f5780517f0000000000000000000000000000000000000000000000000000000000000000906141449087614a63565b61414e9190614a98565b8083526001600160a01b03851660009081526002602052604081208054909190614179908490614adb565b90915550505b6020810151156141ca577f00000000000000000000000000000000000000000000000000000000000000008160200151866141ba9190614a63565b6141c49190614a98565b60608301525b505b9392505050565b6000614228826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142b89092919063ffffffff16565b805190915015613e1f57808060200190518101906142469190614b1b565b613e1f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161092e565b60606115de848460008585843b6143115760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161092e565b600080866001600160a01b0316858760405161432d9190614c10565b60006040518083038185875af1925050503d806000811461436a576040519150601f19603f3d011682016040523d82523d6000602084013e61436f565b606091505b509150915061437f82828661438a565b979650505050505050565b606083156143995750816141cc565b8251156143a95782518084602001fd5b8160405162461bcd60e51b815260040161092e9190614c2c565b6001600160a01b03811681146143d857600080fd5b50565b6000602082840312156143ed57600080fd5b81356141cc816143c3565b60006020828403121561440a57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561444957614449614411565b60405290565b604051601f8201601f191681016001600160401b038111828210171561447757614477614411565b604052919050565b6000604051606081018181106001600160401b03821117156144a3576144a3614411565b60405290508060608301848111156144ba57600080fd5b835b818110156144d45780358352602092830192016144bc565b50505092915050565b80151581146143d857600080fd5b600082601f8301126144fc57600080fd5b614504614427565b80604084018581111561451657600080fd5b845b8181101561150b578035845260209384019301614518565b600082601f83011261454157600080fd5b614549614427565b80604084018581111561455b57600080fd5b845b8181101561150b57803563ffffffff8116811461457a5760008081fd5b84526020938401930161455d565b600080600080600061014086880312156145a157600080fd5b85356145ac816143c3565b94506020603f870188136145bf57600080fd5b6145cb8882890161447f565b945087609f8801126145dc57600080fd5b6145e4614427565b8060c089018a8111156145f657600080fd5b60808a015b8181101561461b57803561460e816144dd565b84529284019284016145fb565b508196506146298b826144eb565b95505050505061463d876101008801614530565b90509295509295909350565b6020808252825182820181905260009190848201906040850190845b8181101561468157835183529284019291840191600101614665565b50909695505050505050565b600080604083850312156146a057600080fd5b50508035926020909101359150565b600080600080600060a086880312156146c757600080fd5b85359450602086013593506040860135925060608601356146e7816143c3565b915060808601356146f7816143c3565b809150509295509295909350565b6000806040838503121561471857600080fd5b8235614723816143c3565b946020939093013593505050565b60008060006060848603121561474657600080fd5b8335614751816143c3565b95602085013595506040909401359392505050565b6000806040838503121561477957600080fd5b8235614784816143c3565b91506020838101356001600160401b03808211156147a157600080fd5b818601915086601f8301126147b557600080fd5b8135818111156147c7576147c7614411565b8060051b91506147d884830161444f565b81815291830184019184810190898411156147f257600080fd5b938501935b83851015614810578435825293850193908501906147f7565b8096505050505050509250929050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b038381169083168181101561486c5761486c614836565b039392505050565b60006020828403121561488657600080fd5b81516141cc816143c3565b600060208083526000845481600182811c9150808316806148b357607f831692505b8583108114156148d157634e487b7160e01b85526022600452602485fd5b8786018381526020018180156148ee57600181146148ff5761492a565b60ff1986168252878201965061492a565b60008b81526020902060005b868110156149245781548482015290850190890161490b565b83019750505b50949998505050505050505050565b60008282101561494b5761494b614836565b500390565b60006020828403121561496257600080fd5b815160ff811681146141cc57600080fd5b600181815b808511156149ae57816000190482111561499457614994614836565b808516156149a157918102915b93841c9390800290614978565b509250929050565b6000826149c5575060016111ca565b816149d2575060006111ca565b81600181146149e857600281146149f257614a0e565b60019150506111ca565b60ff841115614a0357614a03614836565b50506001821b6111ca565b5060208310610133831016604e8410600b8410161715614a31575081810a6111ca565b614a3b8383614973565b8060001904821115614a4f57614a4f614836565b029392505050565b60006141cc83836149b6565b6000816000190483118215151615614a7d57614a7d614836565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614aa757614aa7614a82565b500490565b60006001600160401b0380831681851681830481118215151615614ad257614ad2614836565b02949350505050565b60008219821115614aee57614aee614836565b500190565b600060208284031215614b0557600080fd5b5051919050565b60006141cc60ff8416836149b6565b600060208284031215614b2d57600080fd5b81516141cc816144dd565b6000600019821415614b4c57614b4c614836565b5060010190565b600065ffffffffffff808316818516808303821115614b7457614b74614836565b01949350505050565b60006001600160401b03808316818516808303821115614b7457614b74614836565b600065ffffffffffff8381169083168181101561486c5761486c614836565b60006001600160401b0380841680614bd857614bd8614a82565b92169190910492915050565b60005b83811015614bff578181015183820152602001614be7565b838111156133fb5750506000910152565b60008251614c22818460208701614be4565b9190910192915050565b6020815260008251806020840152614c4b816040850160208701614be4565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "details": "current price should be in 9 decimals.",
        "params": {
          "_booleans": "[capacity in quote, fixed term]",
          "_intervals": "[deposit interval (seconds), tune interval (seconds)]",
          "_market": "[capacity (in HECTA or quote), initial price / HECTA (9 decimals), debt buffer (3 decimals)]",
          "_quoteToken": "token used to deposit",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "currentControlVariable(uint256)": {
        "details": "accounts for control variable adjustment",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "control variable for market in HECTA decimals"
        }
      },
      "currentDebt(uint256)": {
        "details": "accounts for debt decay since last deposit",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "current debt for market in HECTA decimals"
        }
      },
      "debtDecay(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of debt to decay"
        }
      },
      "debtRatio(uint256)": {
        "details": "uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "debt ratio for market in quote decimals"
        }
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "_0": "the pending notes for the user"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "marketPrice(uint256)": {
        "details": "accounts for debt and control variable decay since last deposit (vs _marketPrice())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "price for market in HECTA decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program"
        }
      },
      "payoutFor(uint256,uint256)": {
        "details": "accounts for debt and control variable decay so it is up to date1e18 = hecta decimals (9) + market price decimals (9)",
        "params": {
          "_amount": "amount of quote tokens to spend",
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of HECTA to be paid in HECTA decimals"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "matured_": "   if the payout can be redeemed",
          "payout_": "    the payout due, in gHECTA"
        }
      },
      "pullNote(address,uint256)": {
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[])": {
        "params": {
          "_indexes": "the note indexes to redeem",
          "_user": "the user to redeem for"
        },
        "returns": {
          "payout_": "    sum of payout sent, in gHECTA"
        }
      },
      "redeemAll(address)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_user": "user to redeem all notes for"
        },
        "returns": {
          "_0": "sum of payout sent, in gHECTA"
        }
      },
      "setPayoutCap(uint256)": {
        "params": {
          "payoutCap_": "ID of market to close"
        }
      }
    },
    "title": "Hectagon Bond Depository V2",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "notice": "creates a new market type"
      },
      "currentControlVariable(uint256)": {
        "notice": "up to date control variable"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(uint256)": {
        "notice": "amount of debt to decay from total debt for market ID"
      },
      "debtRatio(uint256)": {
        "notice": "calculate current ratio of debt to supply"
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsFor(address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "calculate current market price of quote token in base token"
      },
      "payoutFor(uint256,uint256)": {
        "notice": "payout due for amount of quote tokens"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[])": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address)": {
        "notice": "redeem all redeemable markets for user"
      },
      "setPartnerTerm(address,uint256,uint256)": {
        "notice": "set partner term"
      },
      "setPartnerTermCap(uint256)": {
        "notice": "set Cap for referrer % reward"
      },
      "setPayoutCap(uint256)": {
        "notice": "set totalPayoutCap"
      },
      "setReferTerm(address,uint256,uint256)": {
        "notice": "set referrer term"
      },
      "setReferTermCap(uint256)": {
        "notice": "set Cap for referrer % reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11647,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 11650,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IHectagonAuthority)8121"
      },
      {
        "astId": 11298,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "rewards",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11303,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "partnerTerms",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PartnerTerm)11294_storage)"
      },
      {
        "astId": 11308,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "referTerms",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(ReferTerm)11289_storage)"
      },
      {
        "astId": 11311,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "referTermCap",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11314,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "partnerTermCap",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11317,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "daoInvestmentPercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 11320,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "daoCommunityPercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 11756,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "notes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_struct(Note)8134_storage)dyn_storage)"
      },
      {
        "astId": 11762,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 11771,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "treasury",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ITreasury)8285"
      },
      {
        "astId": 2539,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "markets",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Market)7799_storage)dyn_storage"
      },
      {
        "astId": 2543,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "terms",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Terms)7810_storage)dyn_storage"
      },
      {
        "astId": 2547,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "metadata",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(Metadata)7823_storage)dyn_storage"
      },
      {
        "astId": 2552,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "adjustments",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)7832_storage)"
      },
      {
        "astId": 2554,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "totalPayout",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2559,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "payoutCap",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2564,
        "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)7799_storage)dyn_storage": {
        "base": "t_struct(Market)7799_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)7823_storage)dyn_storage": {
        "base": "t_struct(Metadata)7823_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)8134_storage)dyn_storage": {
        "base": "t_struct(Note)8134_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)7810_storage)dyn_storage": {
        "base": "t_struct(Terms)7810_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)820": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IHectagonAuthority)8121": {
        "encoding": "inplace",
        "label": "contract IHectagonAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)8285": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)8134_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)8134_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_struct(PartnerTerm)11294_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FrontEndRewarder.PartnerTerm)",
        "numberOfBytes": "32",
        "value": "t_struct(PartnerTerm)11294_storage"
      },
      "t_mapping(t_address,t_struct(ReferTerm)11289_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FrontEndRewarder.ReferTerm)",
        "numberOfBytes": "32",
        "value": "t_struct(ReferTerm)11289_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)7832_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)7832_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)7832_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 7825,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 7827,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "lastAdjustment",
            "offset": 8,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7829,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "timeToAdjusted",
            "offset": 14,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7831,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "active",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Market)7799_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 7785,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7788,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)820"
          },
          {
            "astId": 7790,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 7792,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "totalDebt",
            "offset": 21,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 7794,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 7796,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "sold",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 7798,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "purchased",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Metadata)7823_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 7812,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7814,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7816,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7818,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7820,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7822,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)8134_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 8125,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8127,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 8129,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 8131,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 8133,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PartnerTerm)11294_storage": {
        "encoding": "inplace",
        "label": "struct FrontEndRewarder.PartnerTerm",
        "members": [
          {
            "astId": 11291,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11293,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "percent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ReferTerm)11289_storage": {
        "encoding": "inplace",
        "label": "struct FrontEndRewarder.ReferTerm",
        "members": [
          {
            "astId": 11286,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "referrerPercent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11288,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "buyerPercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)7810_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 7801,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 7803,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "controlVariable",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 7805,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "vesting",
            "offset": 9,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7807,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "conclusion",
            "offset": 15,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 7809,
            "contract": "contracts/BondDepository.sol:HectagonBondDepositoryV2",
            "label": "maxDebt",
            "offset": 21,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}