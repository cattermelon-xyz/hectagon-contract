{
  "language": "Solidity",
  "sources": {
    "contracts/BondDepository.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"./types/NoteKeeper.sol\";\nimport \"./interfaces/IBondDepository.sol\";\n\n/// @title Hectagon Bond Depository V2\n\ncontract HectagonBondDepositoryV2 is IBondDepository, NoteKeeper {\n    /* ======== DEPENDENCIES ======== */\n\n    using SafeERC20 for IERC20;\n\n    /* ======== EVENTS ======== */\n\n    event CreateMarket(uint256 indexed id, address indexed baseToken, address indexed quoteToken, uint256 initialPrice);\n    event CloseMarket(uint256 indexed id);\n    event Bond(\n        uint256 indexed id,\n        uint256 amount,\n        uint256 price,\n        uint256 noteId,\n        address indexed buyer,\n        address indexed referral,\n        uint256 commission,\n        uint256 toBuyer,\n        uint256 toDaoCommunity,\n        uint256 toDaoInvestment\n    );\n    event Tuned(uint256 indexed id, uint64 oldControlVariable, uint64 newControlVariable);\n\n    /* ======== STATE VARIABLES ======== */\n\n    // Storage\n    Market[] public markets; // persistent market data\n    Terms[] public terms; // deposit construction data\n    Metadata[] public metadata; // extraneous market data\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\n\n    uint256 public totalPayout;\n    uint256 public payoutCap = 2_000_000 * 1e9;\n\n    // Queries\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\n\n    /* ======== CONSTRUCTOR ======== */\n\n    constructor(\n        IHectagonAuthority _authority,\n        IERC20 _hecta,\n        IgHECTA _ghecta,\n        IStaking _staking,\n        ITreasury _treasury\n    ) NoteKeeper(_authority, _hecta, _ghecta, _staking, _treasury) {\n        // save gas for users by bulk approving stake() transactions\n        _hecta.approve(address(_staking), 1e45);\n    }\n\n    /**\n     * @notice                  set totalPayoutCap\n     * @param payoutCap_   ID of market to close\n     */\n    function setPayoutCap(uint256 payoutCap_) external onlyGovernor {\n        payoutCap = payoutCap_;\n    }\n\n    /* ======== DEPOSIT ======== */\n\n    /**\n     * @notice              deposit quote tokens in exchange for a bond from a specified market\n     * @param _id           the ID of the market\n     * @param _amount       the amount of quote token to spend\n     * @param _maxPrice     the maximum price at which to buy\n     * @param _user         the recipient of the payout\n     * @param _referral     the front end operator address\n     */\n    function deposit(\n        uint256 _id,\n        uint256 _amount,\n        uint256 _maxPrice,\n        address _user,\n        address _referral\n    ) external override returns (UserBond memory userBond_) {\n        Give memory give; // Give struct inherited fom FrontEndRewarder\n        Market storage market = markets[_id];\n        Terms memory term = terms[_id];\n        uint48 currentTime = uint48(block.timestamp);\n\n        // Markets end at a defined timestamp\n        // |-------------------------------------| t\n        require(currentTime < term.conclusion, \"Depository: market concluded\");\n\n        // Debt and the control variable decay over time\n        _decay(_id, currentTime);\n\n        // Users input a maximum price, which protects them from price changes after\n        // entering the mempool. max price is a slippage mitigation measure\n        uint256 price = _marketPrice(_id);\n        require(price <= _maxPrice, \"Depository: more than max price\");\n\n        /**\n         * payout for the deposit = amount / price\n         *\n         * where\n         * payout = HECTA out\n         * amount = quote tokens in\n         * price = quote tokens : hecta (i.e. 42069 DAI : HECTA)\n         *\n         * 1e18 = HECTA decimals (9) + price decimals (9)\n         */\n        uint256 payout_ = ((_amount * 1e18) / price) / (10**metadata[_id].quoteDecimals);\n\n        // markets have a max payout amount, capping size because deposits\n        // do not experience slippage. max payout is recalculated upon tuning\n        require(payout_ <= market.maxPayout, \"Depository: max size exceeded\");\n        require((totalPayout + payout_) <= payoutCap, \"Depository: total payout hit payout cap\");\n\n        /*\n         * each market is initialized with a capacity\n         *\n         * this is either the number of HECTA that the market can sell\n         * (if capacity in quote is false),\n         *\n         * or the number of quote tokens that the market can buy\n         * (if capacity in quote is true)\n         */\n        market.capacity -= market.capacityInQuote ? _amount : payout_;\n\n        /**\n         * bonds mature with a cliff at a set timestamp\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\n         * after the expiry timestamp, the entire payout can be redeemed\n         *\n         * there are two types of bonds: fixed-term and fixed-expiration\n         *\n         * fixed-term bonds mature in a set amount of time from deposit\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\n         *\n         * fixed-expiration bonds mature at a set timestamp\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\n         */\n        userBond_.expiry = term.fixedTerm ? term.vesting + currentTime : term.vesting;\n\n        // markets keep track of how many quote tokens have been\n        // purchased, and how much HECTA has been sold\n        market.purchased += _amount;\n        market.sold += uint64(payout_);\n\n        // incrementing total debt raises the price of the next bond\n        market.totalDebt += uint64(payout_);\n\n        /**\n         * user data is stored as Notes. these are isolated array entries\n         * storing the amount due, the time created, the time when payout\n         * is redeemable, the time when payout was redeemed, and the ID\n         * of the market deposited into\n         */\n        (userBond_.index, give) = addNote(_user, payout_, uint48(userBond_.expiry), uint48(_id), _referral);\n\n        userBond_.finalPayout = payout_ + give.toBuyer;\n\n        emit Bond(\n            _id,\n            _amount,\n            price,\n            userBond_.index,\n            _user,\n            _referral,\n            give.toRefer,\n            give.toBuyer,\n            give.toDaoCommunity,\n            give.toDaoInvestment\n        );\n\n        // transfer payment to treasury\n        market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\n\n        totalPayout += payout_;\n\n        // if max debt is breached, the market is closed\n        // this a circuit breaker\n        if (term.maxDebt < market.totalDebt) {\n            market.capacity = 0;\n            emit CloseMarket(_id);\n        } else {\n            // if market will continue, the control variable is tuned to hit targets on time\n            _tune(_id, currentTime);\n        }\n\n        return userBond_;\n    }\n\n    /**\n     * @notice             decay debt, and adjust control variable if there is an active change\n     * @param _id          ID of market\n     * @param _time        uint48 timestamp (saves gas when passed in)\n     */\n    function _decay(uint256 _id, uint48 _time) internal {\n        // Debt decay\n\n        /*\n         * Debt is a time-decayed sum of tokens spent in a market\n         * Debt is added when deposits occur and removed over time\n         * |\n         * |    debt falls with\n         * |   / \\  inactivity       / \\\n         * | /     \\              /\\/    \\\n         * |         \\           /         \\\n         * |           \\      /\\/            \\\n         * |             \\  /  and rises       \\\n         * |                with deposits\n         * |\n         * |------------------------------------| t\n         */\n        markets[_id].totalDebt -= debtDecay(_id);\n        metadata[_id].lastDecay = _time;\n\n        // Control variable decay\n\n        // The bond control variable is continually tuned. When it is lowered (which\n        // lowers the market price), the change is carried out smoothly over time.\n        if (adjustments[_id].active) {\n            Adjustment storage adjustment = adjustments[_id];\n\n            ControlDecay memory controlDecay = _controlDecay(_id);\n            terms[_id].controlVariable -= controlDecay.decay;\n\n            if (controlDecay.active) {\n                adjustment.change -= controlDecay.decay;\n                adjustment.timeToAdjusted -= controlDecay.secondsSince;\n                adjustment.lastAdjustment = _time;\n            } else {\n                adjustment.active = false;\n            }\n        }\n    }\n\n    /**\n     * @notice             auto-adjust control variable to hit capacity/spend target\n     * @param _id          ID of market\n     * @param _time        uint48 timestamp (saves gas when passed in)\n     */\n    function _tune(uint256 _id, uint48 _time) internal {\n        Metadata memory meta = metadata[_id];\n\n        if (_time >= meta.lastTune + meta.tuneInterval) {\n            Market memory market = markets[_id];\n\n            // compute seconds remaining until market will conclude\n            uint256 timeRemaining = terms[_id].conclusion - _time;\n            uint256 price = _marketPrice(_id);\n\n            // standardize capacity into an base token amount\n            // hecta decimals (9) + price decimals (9)\n            uint256 capacity = market.capacityInQuote\n                ? ((market.capacity * 1e18) / price) / (10**meta.quoteDecimals)\n                : market.capacity;\n\n            /**\n             * calculate the correct payout to complete on time assuming each bond\n             * will be max size in the desired deposit interval for the remaining time\n             *\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\n             * is 10,000 HECTA. max payout would be 1,000 HECTA (10,000 * 1 / 10).\n             */\n            markets[_id].maxPayout = uint64((capacity * meta.depositInterval) / timeRemaining);\n\n            // calculate the ideal total debt to satisfy capacity in the remaining time\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\n\n            // derive a new control variable from the target debt and current supply\n            uint64 newControlVariable = uint64((price * hecta.totalSupply()) / targetDebt);\n\n            emit Tuned(_id, terms[_id].controlVariable, newControlVariable);\n\n            if (newControlVariable >= terms[_id].controlVariable) {\n                terms[_id].controlVariable = newControlVariable;\n            } else {\n                // if decrease, control variable change will be carried out over the tune interval\n                // this is because price will be lowered\n                uint64 change = terms[_id].controlVariable - newControlVariable;\n                adjustments[_id] = Adjustment(change, _time, meta.tuneInterval, true);\n            }\n            metadata[_id].lastTune = _time;\n        }\n    }\n\n    /* ======== CREATE ======== */\n\n    /**\n     * @notice             creates a new market type\n     * @dev                current price should be in 9 decimals.\n     * @param _quoteToken  token used to deposit\n     * @param _market      [capacity (in HECTA or quote), initial price / HECTA (9 decimals), debt buffer (3 decimals)]\n     * @param _booleans    [capacity in quote, fixed term]\n     * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\n     * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\n     * @return id_         ID of new bond market\n     */\n    function create(\n        IERC20 _quoteToken,\n        uint256[3] memory _market,\n        bool[2] memory _booleans,\n        uint256[2] memory _terms,\n        uint32[2] memory _intervals\n    ) external override onlyPolicy returns (uint256 id_) {\n        // the length of the program, in seconds\n        uint256 secondsToConclusion = _terms[1] - block.timestamp;\n\n        // the decimal count of the quote token\n        uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\n\n        /*\n         * initial target debt is equal to capacity (this is the amount of debt\n         * that will decay over in the length of the program if price remains the same).\n         * it is converted into base token terms if passed in in quote token terms.\n         *\n         * 1e18 = hecta decimals (9) + initial price decimals (9)\n         */\n        uint64 targetDebt = uint64(_booleans[0] ? ((_market[0] * 1e18) / _market[1]) / 10**decimals : _market[0]);\n\n        /*\n         * max payout is the amount of capacity that should be utilized in a deposit\n         * interval. for example, if capacity is 1,000 HECTA, there are 10 days to conclusion,\n         * and the preferred deposit interval is 1 day, max payout would be 100 HECTA.\n         */\n        uint64 maxPayout = uint64((targetDebt * _intervals[0]) / secondsToConclusion);\n\n        /*\n         * max debt serves as a circuit breaker for the market. let's say the quote\n         * token is a stablecoin, and that stablecoin depegs. without max debt, the\n         * market would continue to buy until it runs out of capacity. this is\n         * configurable with a 3 decimal buffer (1000 = 1% above initial price).\n         * note that its likely advisable to keep this buffer wide.\n         * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\n         */\n        uint256 maxDebt = targetDebt + ((targetDebt * _market[2]) / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\n\n        /*\n         * the control variable is set so that initial price equals the desired\n         * initial price. the control variable is the ultimate determinant of price,\n         * so we compute this last.\n         *\n         * price = control variable * debt ratio\n         * debt ratio = total debt / supply\n         * therefore, control variable = price / debt ratio\n         */\n        uint256 controlVariable = (_market[1] * hecta.totalSupply()) / targetDebt;\n\n        // depositing into, or getting info for, the created market uses this ID\n        id_ = markets.length;\n\n        markets.push(\n            Market({\n                quoteToken: _quoteToken,\n                capacityInQuote: _booleans[0],\n                capacity: _market[0],\n                totalDebt: targetDebt,\n                maxPayout: maxPayout,\n                purchased: 0,\n                sold: 0\n            })\n        );\n\n        terms.push(\n            Terms({\n                fixedTerm: _booleans[1],\n                controlVariable: uint64(controlVariable),\n                vesting: uint48(_terms[0]),\n                conclusion: uint48(_terms[1]),\n                maxDebt: uint64(maxDebt)\n            })\n        );\n\n        metadata.push(\n            Metadata({\n                lastTune: uint48(block.timestamp),\n                lastDecay: uint48(block.timestamp),\n                length: uint48(secondsToConclusion),\n                depositInterval: _intervals[0],\n                tuneInterval: _intervals[1],\n                quoteDecimals: uint8(decimals)\n            })\n        );\n\n        marketsForQuote[address(_quoteToken)].push(id_);\n\n        emit CreateMarket(id_, address(hecta), address(_quoteToken), _market[1]);\n    }\n\n    /**\n     * @notice             disable existing market\n     * @param _id          ID of market to close\n     */\n    function close(uint256 _id) external override onlyPolicy {\n        terms[_id].conclusion = uint48(block.timestamp);\n        markets[_id].capacity = 0;\n        emit CloseMarket(_id);\n    }\n\n    /* ======== EXTERNAL VIEW ======== */\n\n    /**\n     * @notice             calculate current market price of quote token in base token\n     * @dev                accounts for debt and control variable decay since last deposit (vs _marketPrice())\n     * @param _id          ID of market\n     * @return             price for market in HECTA decimals\n     *\n     * price is derived from the equation\n     *\n     * p = cv * dr\n     *\n     * where\n     * p = price\n     * cv = control variable\n     * dr = debt ratio\n     *\n     * dr = d / s\n     *\n     * where\n     * d = debt\n     * s = supply of token at market creation\n     *\n     * d -= ( d * (dt / l) )\n     *\n     * where\n     * dt = change in time\n     * l = length of program\n     */\n    function marketPrice(uint256 _id) public view override returns (uint256) {\n        return (currentControlVariable(_id) * debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\n    }\n\n    /**\n     * @notice             payout due for amount of quote tokens\n     * @dev                accounts for debt and control variable decay so it is up to date\n     * @param _amount      amount of quote tokens to spend\n     * @param _id          ID of market\n     * @return             amount of HECTA to be paid in HECTA decimals\n     *\n     * @dev 1e18 = hecta decimals (9) + market price decimals (9)\n     */\n    function payoutFor(uint256 _amount, uint256 _id) external view override returns (uint256) {\n        Metadata memory meta = metadata[_id];\n        return (_amount * 1e18) / marketPrice(_id) / 10**meta.quoteDecimals;\n    }\n\n    /**\n     * @notice             calculate current ratio of debt to supply\n     * @dev                uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\n     * @param _id          ID of market\n     * @return             debt ratio for market in quote decimals\n     */\n    function debtRatio(uint256 _id) public view override returns (uint256) {\n        return (currentDebt(_id) * (10**metadata[_id].quoteDecimals)) / hecta.totalSupply();\n    }\n\n    /**\n     * @notice             calculate debt factoring in decay\n     * @dev                accounts for debt decay since last deposit\n     * @param _id          ID of market\n     * @return             current debt for market in HECTA decimals\n     */\n    function currentDebt(uint256 _id) public view override returns (uint256) {\n        return markets[_id].totalDebt - debtDecay(_id);\n    }\n\n    /**\n     * @notice             amount of debt to decay from total debt for market ID\n     * @param _id          ID of market\n     * @return             amount of debt to decay\n     */\n    function debtDecay(uint256 _id) public view override returns (uint64) {\n        Metadata memory meta = metadata[_id];\n\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\n\n        return uint64((markets[_id].totalDebt * secondsSince) / meta.length);\n    }\n\n    /**\n     * @notice             up to date control variable\n     * @dev                accounts for control variable adjustment\n     * @param _id          ID of market\n     * @return             control variable for market in HECTA decimals\n     */\n    function currentControlVariable(uint256 _id) public view returns (uint256) {\n        ControlDecay memory controlDecay = _controlDecay(_id);\n        return terms[_id].controlVariable - controlDecay.decay;\n    }\n\n    /**\n     * @notice             is a given market accepting deposits\n     * @param _id          ID of market\n     */\n    function isLive(uint256 _id) public view override returns (bool) {\n        return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\n    }\n\n    /**\n     * @notice returns an array of all active market IDs\n     */\n    function liveMarkets() external view override returns (uint256[] memory) {\n        uint256 num;\n        for (uint256 i = 0; i < markets.length; i++) {\n            if (isLive(i)) num++;\n        }\n\n        uint256[] memory ids = new uint256[](num);\n        uint256 nonce;\n        for (uint256 i = 0; i < markets.length; i++) {\n            if (isLive(i)) {\n                ids[nonce] = i;\n                nonce++;\n            }\n        }\n        return ids;\n    }\n\n    /**\n     * @notice             returns an array of all active market IDs for a given quote token\n     * @param _token       quote token to check for\n     */\n    function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\n        uint256[] memory mkts = marketsForQuote[_token];\n        uint256 num;\n\n        for (uint256 i = 0; i < mkts.length; i++) {\n            if (isLive(mkts[i])) num++;\n        }\n\n        uint256[] memory ids = new uint256[](num);\n        uint256 nonce;\n\n        for (uint256 i = 0; i < mkts.length; i++) {\n            if (isLive(mkts[i])) {\n                ids[nonce] = mkts[i];\n                nonce++;\n            }\n        }\n        return ids;\n    }\n\n    /* ======== INTERNAL VIEW ======== */\n\n    /**\n     * @notice                  calculate current market price of quote token in base token\n     * @dev                     see marketPrice() for explanation of price computation\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\n     * @param _id               market ID\n     * @return                  price for market in HECTA decimals\n     */\n    function _marketPrice(uint256 _id) internal view returns (uint256) {\n        return (terms[_id].controlVariable * _debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\n    }\n\n    /**\n     * @notice                  calculate debt factoring in decay\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\n     * @param _id               market ID\n     * @return                  current debt for market in quote decimals\n     */\n    function _debtRatio(uint256 _id) internal view returns (uint256) {\n        return (markets[_id].totalDebt * (10**metadata[_id].quoteDecimals)) / hecta.totalSupply();\n    }\n\n    /**\n     * @notice                  amount to decay control variable by\n     * @param _id               ID of market\n     * @return controlDecay\n     */\n    function _controlDecay(uint256 _id) internal view returns (ControlDecay memory controlDecay) {\n        Adjustment memory info = adjustments[_id];\n        if (!info.active) return controlDecay;\n\n        controlDecay.secondsSince = uint48(block.timestamp) - info.lastAdjustment;\n\n        controlDecay.active = controlDecay.secondsSince < info.timeToAdjusted;\n        controlDecay.decay = controlDecay.active\n            ? (info.change * controlDecay.secondsSince) / info.timeToAdjusted\n            : info.change;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/types/NoteKeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"../types/FrontEndRewarder.sol\";\nimport \"../interfaces/IgHECTA.sol\";\nimport \"../interfaces/IStaking.sol\";\nimport \"../interfaces/ITreasury.sol\";\nimport \"../interfaces/INoteKeeper.sol\";\n\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\n    mapping(address => Note[]) public notes; // user deposit data\n    mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\n\n    IgHECTA internal immutable gHECTA;\n    IStaking internal immutable staking;\n    ITreasury internal treasury;\n\n    constructor(\n        IHectagonAuthority _authority,\n        IERC20 _hecta,\n        IgHECTA _ghecta,\n        IStaking _staking,\n        ITreasury _treasury\n    ) FrontEndRewarder(_authority, _hecta) {\n        gHECTA = _ghecta;\n        staking = _staking;\n        treasury = _treasury;\n    }\n\n    // if treasury address changes on authority, update it\n    function updateTreasury() external {\n        require(\n            msg.sender == authority.governor() ||\n                msg.sender == authority.guardian() ||\n                msg.sender == authority.policy(),\n            \"Only authorized\"\n        );\n        treasury = ITreasury(authority.vault());\n    }\n\n    /* ========== ADD ========== */\n\n    /**\n     * @notice              adds a new Note for a user, stores Ref & DAO rewards, and mints & stakes payout & rewards\n     * @param _user         the user that owns the Note\n     * @param _payout       the amount of HECTA due to the user\n     * @param _expiry       the timestamp when the Note is redeemable\n     * @param _marketID     the ID of the market deposited into\n     * @return give         rewards data\n     */\n    function addNote(\n        address _user,\n        uint256 _payout,\n        uint48 _expiry,\n        uint48 _marketID,\n        address _referral\n    ) internal returns (uint256, Give memory) {\n        // front end operators can earn rewards by referring users\n        Give memory give = _giveRewards(_payout, _referral, _user); // Give struct inherited fom FrontEndRewarder\n        // the index of the note is the next in the user's array\n        uint256 index_ = notes[_user].length;\n\n        uint256 finalPayout = give.toBuyer + _payout;\n        uint256 daoAmount = give.toDaoCommunity + give.toDaoInvestment - give.toBuyer - give.toRefer;\n\n        // the new note is pushed to the user's array\n        notes[_user].push(\n            Note({\n                payout: gHECTA.balanceTo(finalPayout),\n                created: uint48(block.timestamp),\n                matured: _expiry,\n                redeemed: 0,\n                marketID: _marketID\n            })\n        );\n\n        // mint buyer's final payout and referer commission\n        treasury.mint(address(this), finalPayout + give.toRefer);\n\n        // note that only the buyer's final payout gets staked (referer commission are in HECTA)\n        staking.stake(address(this), finalPayout, true);\n\n        // mint Dao Community Fund and Dao Investment Fund, store in treasury\n        treasury.mint(address(treasury), daoAmount);\n\n        return (index_, give);\n    }\n\n    /* ========== REDEEM ========== */\n\n    /**\n     * @notice             redeem notes for user\n     * @param _user        the user to redeem for\n     * @param _indexes     the note indexes to redeem\n     * @return payout_     sum of payout sent, in gHECTA\n     */\n    function redeem(\n        address _user,\n        uint256[] memory _indexes\n    ) public override returns (uint256 payout_) {\n        uint48 time = uint48(block.timestamp);\n\n        for (uint256 i = 0; i < _indexes.length; i++) {\n            (uint256 pay, bool matured) = pendingFor(_user, _indexes[i]);\n\n            if (matured) {\n                notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\n                payout_ += pay;\n            }\n        }\n\n        gHECTA.transfer(_user, payout_); // send payout as gHECTA\n    }\n\n    /**\n     * @notice             redeem all redeemable markets for user\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\n     * @param _user        user to redeem all notes for\n     * @return             sum of payout sent, in gHECTA\n     */\n    function redeemAll(address _user) external returns (uint256) {\n        return redeem(_user, indexesFor(_user));\n    }\n\n    /* ========== TRANSFER ========== */\n\n    /**\n     * @notice             approve an address to transfer a note\n     * @param _to          address to approve note transfer for\n     * @param _index       index of note to approve transfer for\n     */\n    function pushNote(address _to, uint256 _index) external override {\n        require(notes[msg.sender][_index].created != 0, \"Depository: note not found\");\n        noteTransfers[msg.sender][_index] = _to;\n    }\n\n    /**\n     * @notice             transfer a note that has been approved by an address\n     * @param _from        the address that approved the note transfer\n     * @param _index       the index of the note to transfer (in the sender's array)\n     */\n    function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\n        require(noteTransfers[_from][_index] == msg.sender, \"Depository: transfer not found\");\n        require(notes[_from][_index].redeemed == 0, \"Depository: note redeemed\");\n\n        newIndex_ = notes[msg.sender].length;\n        notes[msg.sender].push(notes[_from][_index]);\n\n        delete notes[_from][_index];\n    }\n\n    /* ========== VIEW ========== */\n\n    // Note info\n\n    /**\n     * @notice             all pending notes for user\n     * @param _user        the user to query notes for\n     * @return             the pending notes for the user\n     */\n    function indexesFor(address _user) public view override returns (uint256[] memory) {\n        Note[] memory info = notes[_user];\n\n        uint256 length;\n        for (uint256 i = 0; i < info.length; i++) {\n            if (info[i].redeemed == 0 && info[i].payout != 0) length++;\n        }\n\n        uint256[] memory indexes = new uint256[](length);\n        uint256 position;\n\n        for (uint256 i = 0; i < info.length; i++) {\n            if (info[i].redeemed == 0 && info[i].payout != 0) {\n                indexes[position] = i;\n                position++;\n            }\n        }\n\n        return indexes;\n    }\n\n    /**\n     * @notice             calculate amount available for claim for a single note\n     * @param _user        the user that the note belongs to\n     * @param _index       the index of the note in the user's array\n     * @return payout_     the payout due, in gHECTA\n     * @return matured_    if the payout can be redeemed\n     */\n    function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\n        Note memory note = notes[_user][_index];\n\n        payout_ = note.payout;\n        matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\n    }\n}\n"
    },
    "contracts/interfaces/IBondDepository.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IBondDepository {\n    // Info about each type of market\n    struct Market {\n        uint256 capacity; // capacity remaining\n        IERC20 quoteToken; // token to accept as payment\n        bool capacityInQuote; // capacity limit is in payment token (true) or in HECTA (false, default)\n        uint64 totalDebt; // total debt from market\n        uint64 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\n        uint64 sold; // base tokens out\n        uint256 purchased; // quote tokens in\n    }\n\n    // Info for creating new markets\n    struct Terms {\n        bool fixedTerm; // fixed term or fixed expiration\n        uint64 controlVariable; // scaling variable for price\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\n        uint64 maxDebt; // 9 decimal debt maximum in HECTA\n    }\n\n    // Additional info about market.\n    struct Metadata {\n        uint48 lastTune; // last timestamp when control variable was tuned\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\n        uint48 depositInterval; // target frequency of deposits\n        uint48 tuneInterval; // frequency of tuning\n        uint8 quoteDecimals; // decimals of quote token\n    }\n\n    // Control variable adjustment data\n    struct Adjustment {\n        uint64 change;\n        uint48 lastAdjustment;\n        uint48 timeToAdjusted;\n        bool active;\n    }\n\n    // user's bond info\n    struct UserBond {\n        uint256 finalPayout;\n        uint256 expiry;\n        uint256 index;\n    }\n\n    struct ControlDecay {\n        uint64 decay; // change in control variable\n        uint48 secondsSince; // seconds since last change in control variable\n        bool active; // whether or not change remains active\n    }\n\n    /**\n     * @notice deposit market\n     * @param _bid uint256\n     * @param _amount uint256\n     * @param _maxPrice uint256\n     * @param _user address\n     * @param _referral address\n     * @return userBond_ UserBond\n     */\n    function deposit(\n        uint256 _bid,\n        uint256 _amount,\n        uint256 _maxPrice,\n        address _user,\n        address _referral\n    ) external returns (UserBond memory userBond_);\n\n    function create(\n        IERC20 _quoteToken, // token used to deposit\n        uint256[3] memory _market, // [capacity, initial price]\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\n        uint256[2] memory _terms, // [vesting, conclusion]\n        uint32[2] memory _intervals // [deposit interval, tune interval]\n    ) external returns (uint256 id_);\n\n    function close(uint256 _id) external;\n\n    function isLive(uint256 _bid) external view returns (bool);\n\n    function liveMarkets() external view returns (uint256[] memory);\n\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\n\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\n\n    function marketPrice(uint256 _bid) external view returns (uint256);\n\n    function currentDebt(uint256 _bid) external view returns (uint256);\n\n    function debtRatio(uint256 _bid) external view returns (uint256);\n\n    function debtDecay(uint256 _bid) external view returns (uint64);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}\n"
    },
    "contracts/types/FrontEndRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"../types/HectagonAccessControlled.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract FrontEndRewarder is HectagonAccessControlled {\n    struct Give {\n        uint256 toRefer;\n        uint256 toDaoInvestment;\n        uint256 toDaoCommunity;\n        uint256 toBuyer;\n    }\n\n    struct ReferTerm {\n        uint256 referrerPercent; // reward for referrer (3 decimals: 100 = 1%)\n        uint256 buyerPercent; // reward for bond buyer (3 decimals: 100 = 1%)\n    }\n\n    struct PartnerTerm {\n        uint256 amount; // partner's remaining hecta bonus, decimal 9\n        uint256 percent; // partner's bonus percent per deposit, 3 decimals: 100 = 1%\n    }\n\n    /* ========= STATE VARIABLES ========== */\n\n    mapping(address => uint256) public rewards; // rewards notes\n\n    mapping(address => PartnerTerm) public partnerTerms; // reward term for each partner\n    mapping(address => ReferTerm) public referTerms; // reward term for refer\n\n    uint256 public referTermCap = 2000; // % cap for referrer (3 decimals: 2000 = 20%)\n    uint256 public partnerTermCap = 10000; // % cap for partner (3 decimals: 10000 = 100%)\n\n    uint256 public daoInvestmentPercent = 10000; // 3 decimals: 10000 = 100%\n\n    uint256 public daoCommunityPercent = 45000; // 3 decimals: 45000 = 450%\n\n    uint256 private immutable RATE_DENOMINATOR = 1e4;\n\n    IERC20 internal immutable hecta; // reward token\n\n    constructor(IHectagonAuthority _authority, IERC20 _hecta) HectagonAccessControlled(_authority) {\n        hecta = _hecta;\n    }\n\n    /* ========= EXTERNAL FUNCTIONS ========== */\n\n    // pay reward to referrer\n    function getReward() external {\n        uint256 reward = rewards[msg.sender];\n\n        rewards[msg.sender] = 0;\n        hecta.transfer(msg.sender, reward);\n    }\n\n    /* ========= INTERNAL ========== */\n\n    /**\n     * @notice          add new market payout to user data\n     * @return give     rewards data\n     */\n    function _giveRewards(\n        uint256 _payout,\n        address _referral,\n        address _buyer\n    ) internal returns (Give memory give) {\n        // first we calculate rewards paid to the DAO and referrer\n        give.toDaoInvestment += (_payout * daoInvestmentPercent) / RATE_DENOMINATOR;\n        give.toDaoCommunity += (_payout * daoCommunityPercent) / RATE_DENOMINATOR;\n\n        // check partner logic\n        if (partnerTerms[_buyer].percent > 0) {\n            uint256 partnerBonus = (_payout * partnerTerms[_buyer].percent) / RATE_DENOMINATOR;\n            if (partnerBonus >= partnerTerms[_buyer].amount) {\n                give.toBuyer = partnerTerms[_buyer].amount;\n            } else {\n                give.toBuyer = partnerBonus;\n            }\n            partnerTerms[_buyer].amount -= give.toBuyer;\n        } else {\n            ReferTerm memory refTerm = referTerms[_referral];\n\n            if (refTerm.referrerPercent > 0) {\n                give.toRefer = (_payout * refTerm.referrerPercent) / RATE_DENOMINATOR;\n                rewards[_referral] += give.toRefer;\n            }\n\n            if (refTerm.buyerPercent > 0) {\n                give.toBuyer = (_payout * refTerm.buyerPercent) / RATE_DENOMINATOR;\n            }\n        }\n\n        return give;\n    }\n\n    /**\n     * @notice set Cap for referrer % reward\n     */\n    function setReferTermCap(uint256 _cap) external onlyGovernor {\n        referTermCap = _cap;\n    }\n\n    /**\n     * @notice set Cap for referrer % reward\n     */\n    function setPartnerTermCap(uint256 _cap) external onlyGovernor {\n        partnerTermCap = _cap;\n    }\n\n    function setDaoRewards(uint256 daoInvestmentPercent_, uint256 daoCommunityPercent_) external onlyGovernor {\n        daoInvestmentPercent = daoInvestmentPercent_;\n        daoCommunityPercent = daoCommunityPercent_;\n    }\n\n    /**\n     * @notice set referrer term\n     */\n    function setReferTerm(\n        address _referrer,\n        uint256 _referrerPercent,\n        uint256 _buyerPercent\n    ) external onlyPolicy {\n        require(_referrer != address(0), \"Zero address: Referrer\");\n        require((_referrerPercent + _buyerPercent) <= referTermCap, \"reward too high\");\n        referTerms[_referrer] = ReferTerm({referrerPercent: _referrerPercent, buyerPercent: _buyerPercent});\n    }\n\n    /**\n     * @notice set partner term\n     */\n    function setPartnerTerm(\n        address _partner,\n        uint256 _amount,\n        uint256 _percent\n    ) external onlyPolicy {\n        require(_partner != address(0), \"Zero address: Partner\");\n        require(_percent <= partnerTermCap, \"reward too high\");\n        partnerTerms[_partner] = PartnerTerm(_amount, _percent);\n    }\n}\n"
    },
    "contracts/interfaces/IgHECTA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IgHECTA is IERC20 {\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n\n    function index() external view returns (uint256);\n\n    function balanceFrom(uint256 _amount) external view returns (uint256);\n\n    function balanceTo(uint256 _amount) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IStaking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IStaking {\n    function stake(\n        address _to,\n        uint256 _amount,\n        bool _claim\n    ) external returns (uint256);\n\n    function claim(address _recipient) external returns (uint256);\n\n    function forfeit() external returns (uint256);\n\n    function toggleLock() external;\n\n    function unstake(\n        address _to,\n        uint256 _amount,\n        bool _trigger\n    ) external returns (uint256);\n\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\n\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\n\n    function rebase() external;\n\n    function index() external view returns (uint256);\n\n    function contractBalance() external view returns (uint256);\n\n    function totalStaked() external view returns (uint256);\n\n    function supplyInWarmup() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface ITreasury {\n    function mint(address _recipient, uint256 _amount) external;\n\n    function withdraw(address _token, uint256 _amount) external;\n}\n"
    },
    "contracts/interfaces/INoteKeeper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface INoteKeeper {\n    // Info for market note\n    struct Note {\n        uint256 payout; // gHECTA remaining to be paid\n        uint48 created; // time market was created\n        uint48 matured; // timestamp when market is matured\n        uint48 redeemed; // time market was redeemed\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\n    }\n\n    function redeem(\n        address _user,\n        uint256[] memory _indexes\n    ) external returns (uint256);\n\n    function redeemAll(address _user) external returns (uint256);\n\n    function pushNote(address to, uint256 index) external;\n\n    function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\n\n    function indexesFor(address _user) external view returns (uint256[] memory);\n\n    function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\n}\n"
    },
    "contracts/types/HectagonAccessControlled.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"../interfaces/IHectagonAuthority.sol\";\n\nabstract contract HectagonAccessControlled {\n    /* ========== EVENTS ========== */\n\n    event AuthorityUpdated(IHectagonAuthority indexed authority);\n\n    string UNAUTHORIZED = \"UNAUTHORIZED\"; // save gas\n\n    /* ========== STATE VARIABLES ========== */\n\n    IHectagonAuthority public authority;\n\n    /* ========== Constructor ========== */\n\n    constructor(IHectagonAuthority _authority) {\n        authority = _authority;\n        emit AuthorityUpdated(_authority);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyGovernor() {\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyGuardian() {\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyPolicy() {\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyVault() {\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\n        _;\n    }\n\n    /* ========== GOV ONLY ========== */\n\n    function setAuthority(IHectagonAuthority _newAuthority) external onlyGovernor {\n        authority = _newAuthority;\n        emit AuthorityUpdated(_newAuthority);\n    }\n}\n"
    },
    "contracts/interfaces/IHectagonAuthority.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IHectagonAuthority {\n    /* ========== EVENTS ========== */\n\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n\n    event GovernorPulled(address indexed from, address indexed to);\n    event GuardianPulled(address indexed from, address indexed to);\n    event PolicyPulled(address indexed from, address indexed to);\n    event VaultPulled(address indexed from, address indexed to);\n\n    /* ========== VIEW ========== */\n\n    function governor() external view returns (address);\n\n    function guardian() external view returns (address);\n\n    function policy() external view returns (address);\n\n    function vault() external view returns (address);\n}\n"
    },
    "contracts/HectagonQuickBond.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Context.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/utils/Address.sol\";\n\nimport \"./interfaces/IBondDepository.sol\";\nimport \"./interfaces/IStaking.sol\";\nimport \"./interfaces/IUniswapV2Router.sol\";\nimport \"./interfaces/IUniswapV2Factory.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\nimport \"./interfaces/IWETH.sol\";\nimport \"./libraries/Babylonian.sol\";\n\ncontract HectagonQuickBond is Ownable, Pausable {\n    using SafeERC20 for IERC20;\n\n    ////////////////////////// STORAGE //////////////////////////\n\n    address public depo;\n\n    bool public stopped = false;\n\n    // bsc mainnet\n    IUniswapV2Factory private constant pancakeswapFactoryAddress =\n        IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\n    IUniswapV2Router private pancakeswapRouter = IUniswapV2Router(0x10ED43C718714eb63d5aA57B78B54704E256024E);\n    address private constant wbnbTokenAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\n\n    uint256 private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\n\n    // Emitted when `sender` successfully calls ZapBond\n    event QuickBond(address indexed sender, address indexed token, uint256 tokensRec, address referral);\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function quickLPBond(\n        address _fromTokenAddress,\n        address _pairAddress,\n        address[] memory _path,\n        uint256 _amount,\n        uint256 _minTokenReceive,\n        bool _transferResidual,\n        bool _shouldSellEntireBalance,\n        address _referral,\n        uint256 _maxPrice,\n        uint256 _bondId\n    ) external payable whenNotPaused returns (uint256) {\n        uint256 toInvest = _pullTokens(_fromTokenAddress, _amount, _shouldSellEntireBalance);\n\n        uint256 LPBought = _performZapIn(_fromTokenAddress, _pairAddress, toInvest, _transferResidual, _path);\n\n        _approveToken(_pairAddress, depo, LPBought);\n        // purchase bond\n        IBondDepository.UserBond memory userBond = IBondDepository(depo).deposit(\n            _bondId,\n            LPBought,\n            _maxPrice,\n            msg.sender, // depositor\n            _referral\n        );\n        require(userBond.finalPayout >= _minTokenReceive, \"High Slippage\");\n\n        emit QuickBond(msg.sender, _pairAddress, userBond.finalPayout, _referral);\n\n        return userBond.finalPayout;\n    }\n\n    function quickStableBond(\n        address _fromTokenAddress,\n        address _principal,\n        address[] memory _path,\n        uint256 _amount,\n        bool _shouldSellEntireBalance,\n        address _referral,\n        uint256 _maxPrice,\n        uint256 _bondId\n    ) external payable whenNotPaused returns (uint256) {\n        uint256 toInvest = _pullTokens(_fromTokenAddress, _amount, _shouldSellEntireBalance);\n\n        uint256 tokensBought = _fillQuote(_fromTokenAddress, toInvest, _path);\n\n        // make sure bond depo is approved to spend this contracts \"principal\"\n        _approveToken(_principal, depo, tokensBought);\n\n        // purchase bond\n        IBondDepository.UserBond memory userBond = IBondDepository(depo).deposit(\n            _bondId,\n            tokensBought,\n            _maxPrice,\n            msg.sender, // depositor\n            _referral\n        );\n\n        emit QuickBond(msg.sender, _principal, userBond.finalPayout, _referral);\n        return userBond.finalPayout;\n    }\n\n    function _getPairTokens(address _pairAddress) internal pure returns (address token0, address token1) {\n        IUniswapV2Pair uniPair = IUniswapV2Pair(_pairAddress);\n        token0 = uniPair.token0();\n        token1 = uniPair.token1();\n    }\n\n    function _performZapIn(\n        address _fromTokenAddress,\n        address _pairAddress,\n        uint256 _amount,\n        bool transferResidual,\n        address[] memory _path\n    ) internal returns (uint256) {\n        uint256 intermediateAmt;\n        address intermediateToken;\n        (address _ToUniswapToken0, address _ToUniswapToken1) = _getPairTokens(_pairAddress);\n\n        if (_fromTokenAddress != _ToUniswapToken0 && _fromTokenAddress != _ToUniswapToken1) {\n            // swap to intermediate\n            (intermediateAmt, intermediateToken) = _fillQuote(_fromTokenAddress, _pairAddress, _amount, _path);\n        } else {\n            intermediateToken = _fromTokenAddress;\n            intermediateAmt = _amount;\n        }\n\n        // divide intermediate into appropriate amount to add liquidity\n        (uint256 token0Bought, uint256 token1Bought) = _swapIntermediate(\n            intermediateToken,\n            _ToUniswapToken0,\n            _ToUniswapToken1,\n            intermediateAmt\n        );\n        return _uniDeposit(_ToUniswapToken0, _ToUniswapToken1, token0Bought, token1Bought, transferResidual);\n    }\n\n    function _pullTokens(\n        address token,\n        uint256 amount,\n        bool shouldSellEntireBalance\n    ) internal returns (uint256 value) {\n        if (token == address(0)) {\n            require(msg.value > 0, \"No BNB sent\");\n            return msg.value;\n        }\n        require(amount > 0, \"Invalid token amount\");\n        require(msg.value == 0, \"BNB sent with token\");\n\n        //transfer token\n        if (shouldSellEntireBalance) {\n            require(Address.isContract(msg.sender), \"ERR: shouldSellEntireBalance is true for EOA\");\n            amount = IERC20(token).allowance(msg.sender, address(this));\n        }\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\n        return amount;\n    }\n\n    function _uniDeposit(\n        address _ToUnipoolToken0,\n        address _ToUnipoolToken1,\n        uint256 token0Bought,\n        uint256 token1Bought,\n        bool transferResidual\n    ) internal returns (uint256) {\n        _approveToken(_ToUnipoolToken0, address(pancakeswapRouter), token0Bought);\n        _approveToken(_ToUnipoolToken1, address(pancakeswapRouter), token1Bought);\n\n        (uint256 amountA, uint256 amountB, uint256 LP) = pancakeswapRouter.addLiquidity(\n            _ToUnipoolToken0,\n            _ToUnipoolToken1,\n            token0Bought,\n            token1Bought,\n            1,\n            1,\n            address(this),\n            deadline\n        );\n\n        if (transferResidual) {\n            //Returning Residue in token0, if any.\n            if (token0Bought - amountA > 0) {\n                IERC20(_ToUnipoolToken0).safeTransfer(msg.sender, token0Bought - amountA);\n            }\n\n            //Returning Residue in token1, if any\n            if (token1Bought - amountB > 0) {\n                IERC20(_ToUnipoolToken1).safeTransfer(msg.sender, token1Bought - amountB);\n            }\n        }\n        return LP;\n    }\n\n    function _fillQuote(\n        address _fromTokenAddress,\n        address _pairAddress,\n        uint256 _amount,\n        address[] memory _path\n    ) internal returns (uint256 amountBought, address intermediateToken) {\n        address fromTokenAddress;\n\n        if (_fromTokenAddress == address(0)) {\n            IWETH(wbnbTokenAddress).deposit{value: _amount}();\n            fromTokenAddress = wbnbTokenAddress;\n        } else {\n            fromTokenAddress = _fromTokenAddress;\n        }\n\n        _approveToken(fromTokenAddress, address(pancakeswapRouter), _amount);\n\n        (address _token0, address _token1) = _getPairTokens(_pairAddress);\n        IERC20 token0 = IERC20(_token0);\n        IERC20 token1 = IERC20(_token1);\n        uint256 initialBalance0 = token0.balanceOf(address(this));\n        uint256 initialBalance1 = token1.balanceOf(address(this));\n\n        _path[0] = fromTokenAddress;\n\n        uint256 tokenBought = pancakeswapRouter.swapExactTokensForTokens(_amount, 1, _path, address(this), deadline)[\n            _path.length - 1\n        ];\n\n        require(tokenBought > 0, \"Error Swapping Tokens 1\");\n\n        uint256 finalBalance0 = token0.balanceOf(address(this)) - initialBalance0;\n        uint256 finalBalance1 = token1.balanceOf(address(this)) - initialBalance1;\n\n        if (finalBalance0 > finalBalance1) {\n            amountBought = finalBalance0;\n            intermediateToken = _token0;\n        } else {\n            amountBought = finalBalance1;\n            intermediateToken = _token1;\n        }\n\n        require(amountBought > 0, \"Swapped to Invalid Intermediate\");\n    }\n\n    function _fillQuote(\n        address _fromTokenAddress,\n        uint256 _amount,\n        address[] memory _path\n    ) internal returns (uint256) {\n        address fromTokenAddress;\n\n        if (_fromTokenAddress == address(0)) {\n            IWETH(wbnbTokenAddress).deposit{value: _amount}();\n            fromTokenAddress = wbnbTokenAddress;\n        } else {\n            fromTokenAddress = _fromTokenAddress;\n        }\n\n        _approveToken(fromTokenAddress, address(pancakeswapRouter), _amount);\n\n        _path[0] = fromTokenAddress;\n\n        uint256 tokenBought = pancakeswapRouter.swapExactTokensForTokens(_amount, 1, _path, address(this), deadline)[\n            _path.length - 1\n        ];\n        require(tokenBought > 0, \"Error Swapping Tokens 1\");\n        return tokenBought;\n    }\n\n    function _swapIntermediate(\n        address _toContractAddress,\n        address _ToUnipoolToken0,\n        address _ToUnipoolToken1,\n        uint256 _amount\n    ) internal returns (uint256 token0Bought, uint256 token1Bought) {\n        IUniswapV2Pair pair = IUniswapV2Pair(pancakeswapFactoryAddress.getPair(_ToUnipoolToken0, _ToUnipoolToken1));\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\n        if (_toContractAddress == _ToUnipoolToken0) {\n            uint256 amountToSwap = calculateSwapInAmount(res0, _amount);\n            //if no reserve or a new pair is created\n            if (amountToSwap <= 0) amountToSwap = _amount / 2;\n            token1Bought = _token2Token(_toContractAddress, _ToUnipoolToken1, amountToSwap);\n            token0Bought = _amount - amountToSwap;\n        } else {\n            uint256 amountToSwap = calculateSwapInAmount(res1, _amount);\n            //if no reserve or a new pair is created\n            if (amountToSwap <= 0) amountToSwap = _amount / 2;\n            token0Bought = _token2Token(_toContractAddress, _ToUnipoolToken0, amountToSwap);\n            token1Bought = _amount - amountToSwap;\n        }\n    }\n\n    function calculateSwapInAmount(uint256 reserveIn, uint256 userIn) internal pure returns (uint256) {\n        // in case fee is 0.25%\n        return\n            (Babylonian.sqrt(reserveIn * ((userIn * 399000000) + (reserveIn * 399000625))) - (reserveIn * 19975)) /\n            19950;\n    }\n\n    /**\n    @notice This function is used to swap ERC20 <> ERC20\n    @param _fromTokenAddress The token address to swap from.\n    @param _ToTokenContractAddress The token address to swap to. \n    @param tokens2Trade The amount of tokens to swap\n    @return tokenBought The quantity of tokens bought\n    */\n    function _token2Token(\n        address _fromTokenAddress,\n        address _ToTokenContractAddress,\n        uint256 tokens2Trade\n    ) internal returns (uint256 tokenBought) {\n        if (_fromTokenAddress == _ToTokenContractAddress) {\n            return tokens2Trade;\n        }\n\n        _approveToken(_fromTokenAddress, address(pancakeswapRouter), tokens2Trade);\n\n        address pair = pancakeswapFactoryAddress.getPair(_fromTokenAddress, _ToTokenContractAddress);\n        require(pair != address(0), \"No Swap Available\");\n        address[] memory path = new address[](2);\n        path[0] = _fromTokenAddress;\n        path[1] = _ToTokenContractAddress;\n\n        tokenBought = pancakeswapRouter.swapExactTokensForTokens(tokens2Trade, 1, path, address(this), deadline)[\n            path.length - 1\n        ];\n\n        require(tokenBought > 0, \"Error Swapping Tokens 2\");\n    }\n\n    ////////////////////////// HECTAGON ONLY //////////////////////////\n\n    /// @notice update state for depo\n    function updateDepo(address _depo) external onlyOwner {\n        depo = _depo;\n    }\n\n    function withdraw(address _token, uint256 _amount) public onlyOwner {\n        IERC20(_token).transfer(msg.sender, _amount);\n    }\n\n    function _approveToken(\n        address token,\n        address spender,\n        uint256 amount\n    ) internal {\n        IERC20(token).safeApprove(spender, 0);\n        IERC20(token).safeApprove(spender, amount);\n    }\n\n    receive() external payable {\n        require(msg.sender != tx.origin, \"Do not send BNB directly\");\n    }\n}\n"
    },
    "@openzeppelin/contracts/security/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (security/Pausable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!paused(), \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(paused(), \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2Router.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IUniswapV2Router {\n    function swapExactTokensForTokens(\n        uint256 amountIn,\n        uint256 amountOutMin,\n        address[] calldata path,\n        address to,\n        uint256 deadline\n    ) external returns (uint256[] memory amounts);\n\n    function addLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 amountADesired,\n        uint256 amountBDesired,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    )\n        external\n        returns (\n            uint256 amountA,\n            uint256 amountB,\n            uint256 liquidity\n        );\n\n    function removeLiquidity(\n        address tokenA,\n        address tokenB,\n        uint256 liquidity,\n        uint256 amountAMin,\n        uint256 amountBMin,\n        address to,\n        uint256 deadline\n    ) external returns (uint256 amountA, uint256 amountB);\n}\n"
    },
    "contracts/interfaces/IUniswapV2Factory.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IUniswapV2Factory {\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\n\n    function feeTo() external view returns (address);\n\n    function feeToSetter() external view returns (address);\n\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\n\n    function allPairs(uint256) external view returns (address pair);\n\n    function allPairsLength() external view returns (uint256);\n\n    function createPair(address tokenA, address tokenB) external returns (address pair);\n\n    function setFeeTo(address) external;\n\n    function setFeeToSetter(address) external;\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"./IUniswapV2ERC20.sol\";\n\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\n    function token0() external pure returns (address);\n\n    function token1() external pure returns (address);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function sync() external;\n}\n"
    },
    "contracts/interfaces/IWETH.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface IWETH {\n    function deposit() external payable;\n\n    function withdraw(uint256 wad) external;\n\n    function totalSupply() external;\n\n    function approve(address guy, uint256 wad) external;\n\n    function transfer(address dst, uint256 wad) external;\n\n    function transferFrom(\n        address src,\n        address dst,\n        uint256 wad\n    ) external;\n\n    function balanceOf(address user) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n}\n"
    },
    "contracts/libraries/Babylonian.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nlibrary Babylonian {\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\n        if (y > 3) {\n            z = y;\n            uint256 x = y / 2 + 1;\n            while (x < z) {\n                z = x;\n                x = (y / x + x) / 2;\n            }\n        } else if (y != 0) {\n            z = 1;\n        }\n        // else z = 0\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/sHectagonERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"./interfaces/IgHECTA.sol\";\nimport \"./interfaces/IsHECTA.sol\";\nimport \"./interfaces/IStaking.sol\";\n\ncontract sHectagon is IsHECTA, ERC20Permit {\n    /* ========== EVENTS ========== */\n\n    event LogSupply(uint256 indexed epoch, uint256 totalSupply);\n    event LogRebase(uint256 indexed epoch, uint256 rebase, uint256 index);\n    event LogStakingContractUpdated(address stakingContract);\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyStakingContract() {\n        require(msg.sender == stakingContract, \"StakingContract:  call is not staking contract\");\n        _;\n    }\n\n    /* ========== DATA STRUCTURES ========== */\n\n    struct Rebase {\n        uint256 epoch;\n        uint256 rebase; // 18 decimals\n        uint256 totalStakedBefore;\n        uint256 totalStakedAfter;\n        uint256 amountRebased;\n        uint256 index;\n        uint256 blockNumberOccured;\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    uint256 private _totalSupply;\n\n    address internal initializer;\n\n    uint256 internal INDEX; // Index Gons - tracks rebase growth\n\n    address public stakingContract; // balance used to calc rebase\n    IgHECTA public gHECTA; // additional staked supply (governance token)\n\n    Rebase[] public rebases; // past rebase data\n\n    uint256 private constant MAX_UINT256 = type(uint256).max;\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 5_000_000 * 10**9;\n\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\n    // Use the highest value that fits in a uint256 for max granularity.\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n\n    // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\n\n    uint256 private _gonsPerFragment;\n    mapping(address => uint256) private _gonBalances;\n\n    mapping(address => mapping(address => uint256)) private _allowedValue;\n\n    address public treasury;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor() ERC20(\"Staked HECTA\", \"sHECTA\") ERC20Permit(\"Staked HECTA\") {\n        initializer = msg.sender;\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n        _gonsPerFragment = TOTAL_GONS / _totalSupply;\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    /* ========== INITIALIZATION ========== */\n\n    function setIndex(uint256 _index) external {\n        require(msg.sender == initializer, \"Initializer:  caller is not initializer\");\n        require(INDEX == 0, \"Cannot set INDEX again\");\n        INDEX = gonsForBalance(_index);\n    }\n\n    function setgHECTA(address _gHECTA) external {\n        require(msg.sender == initializer, \"Initializer:  caller is not initializer\");\n        require(address(gHECTA) == address(0), \"gHECTA:  gHECTA already set\");\n        require(_gHECTA != address(0), \"gHECTA:  gHECTA is not a valid contract\");\n        gHECTA = IgHECTA(_gHECTA);\n    }\n\n    // do this last\n    function initialize(address _stakingContract, address _treasury) external {\n        require(msg.sender == initializer, \"Initializer:  caller is not initializer\");\n\n        require(_stakingContract != address(0), \"Staking\");\n        stakingContract = _stakingContract;\n        _gonBalances[stakingContract] = TOTAL_GONS;\n\n        require(_treasury != address(0), \"Zero address: Treasury\");\n        treasury = _treasury;\n\n        emit Transfer(address(0x0), stakingContract, _totalSupply);\n        emit LogStakingContractUpdated(stakingContract);\n\n        initializer = address(0);\n    }\n\n    /* ========== REBASE ========== */\n\n    /**\n        @notice increases rHECTA supply to increase staking balances relative to profit_\n        @param profit_ uint256\n        @return uint256\n     */\n    function rebase(uint256 profit_, uint256 epoch_) public override onlyStakingContract returns (uint256) {\n        uint256 rebaseAmount;\n        uint256 circulatingSupply_ = circulatingSupply();\n        if (profit_ == 0) {\n            emit LogSupply(epoch_, _totalSupply);\n            emit LogRebase(epoch_, 0, index());\n            return _totalSupply;\n        } else if (circulatingSupply_ > 0) {\n            rebaseAmount = (profit_ * _totalSupply) / circulatingSupply_;\n        } else {\n            rebaseAmount = profit_;\n        }\n\n        _totalSupply = _totalSupply + rebaseAmount;\n\n        if (_totalSupply > MAX_SUPPLY) {\n            _totalSupply = MAX_SUPPLY;\n        }\n\n        _gonsPerFragment = TOTAL_GONS / _totalSupply;\n\n        _storeRebase(circulatingSupply_, profit_, epoch_);\n\n        return _totalSupply;\n    }\n\n    /**\n        @notice emits event with data about rebase\n        @param previousCirculating_ uint\n        @param profit_ uint\n        @param epoch_ uint\n     */\n    function _storeRebase(\n        uint256 previousCirculating_,\n        uint256 profit_,\n        uint256 epoch_\n    ) internal {\n        uint256 rebasePercent = (profit_ * 1e18) / previousCirculating_;\n        rebases.push(\n            Rebase({\n                epoch: epoch_,\n                rebase: rebasePercent, // 18 decimals\n                totalStakedBefore: previousCirculating_,\n                totalStakedAfter: circulatingSupply(),\n                amountRebased: profit_,\n                index: index(),\n                blockNumberOccured: block.number\n            })\n        );\n\n        emit LogSupply(epoch_, _totalSupply);\n        emit LogRebase(epoch_, rebasePercent, index());\n    }\n\n    /* ========== MUTATIVE FUNCTIONS =========== */\n\n    function transfer(address to, uint256 value) public override(IERC20, ERC20) returns (bool) {\n        uint256 gonValue = value * _gonsPerFragment;\n\n        _gonBalances[msg.sender] = _gonBalances[msg.sender] - gonValue;\n        _gonBalances[to] = _gonBalances[to] + gonValue;\n\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) public override(IERC20, ERC20) returns (bool) {\n        _allowedValue[from][msg.sender] = _allowedValue[from][msg.sender] - value;\n        emit Approval(from, msg.sender, _allowedValue[from][msg.sender]);\n\n        uint256 gonValue = gonsForBalance(value);\n        _gonBalances[from] = _gonBalances[from] - gonValue;\n        _gonBalances[to] = _gonBalances[to] + gonValue;\n\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public override(IERC20, ERC20) returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\n        _approve(msg.sender, spender, _allowedValue[msg.sender][spender] + addedValue);\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\n        uint256 oldValue = _allowedValue[msg.sender][spender];\n        if (subtractedValue >= oldValue) {\n            _approve(msg.sender, spender, 0);\n        } else {\n            _approve(msg.sender, spender, oldValue - subtractedValue);\n        }\n        return true;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 value\n    ) internal virtual override {\n        _allowedValue[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    function balanceOf(address who) public view override(IERC20, ERC20) returns (uint256) {\n        return _gonBalances[who] / _gonsPerFragment;\n    }\n\n    function gonsForBalance(uint256 amount) public view override returns (uint256) {\n        return amount * _gonsPerFragment;\n    }\n\n    function balanceForGons(uint256 gons) public view override returns (uint256) {\n        return gons / _gonsPerFragment;\n    }\n\n    // toG converts an sHECTA balance to gHECTA terms. gHECTA is an 18 decimal token. balance given is in 18 decimal format.\n    function toG(uint256 amount) external view override returns (uint256) {\n        return gHECTA.balanceTo(amount);\n    }\n\n    // fromG converts a gHECTA balance to sHECTA terms. sHECTA is a 9 decimal token. balance given is in 9 decimal format.\n    function fromG(uint256 amount) external view override returns (uint256) {\n        return gHECTA.balanceFrom(amount);\n    }\n\n    // Staking contract holds excess sHECTA\n    function circulatingSupply() public view override returns (uint256) {\n        return\n            _totalSupply -\n            balanceOf(stakingContract) +\n            gHECTA.balanceFrom(IERC20(address(gHECTA)).totalSupply()) +\n            IStaking(stakingContract).supplyInWarmup();\n    }\n\n    function index() public view override returns (uint256) {\n        return balanceForGons(INDEX);\n    }\n\n    function allowance(address owner_, address spender) public view override(IERC20, ERC20) returns (uint256) {\n        return _allowedValue[owner_][spender];\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-ERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./draft-IERC20Permit.sol\";\nimport \"../ERC20.sol\";\nimport \"../../../utils/cryptography/draft-EIP712.sol\";\nimport \"../../../utils/cryptography/ECDSA.sol\";\nimport \"../../../utils/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "contracts/interfaces/IsHECTA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IsHECTA is IERC20 {\n    function rebase(uint256 hectaProfit_, uint256 epoch_) external returns (uint256);\n\n    function circulatingSupply() external view returns (uint256);\n\n    function gonsForBalance(uint256 amount) external view returns (uint256);\n\n    function balanceForGons(uint256 gons) external view returns (uint256);\n\n    function index() external view returns (uint256);\n\n    function toG(uint256 amount) external view returns (uint256);\n\n    function fromG(uint256 amount) external view returns (uint256);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/draft-EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/draft-EIP712.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n    address private immutable _CACHED_THIS;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = block.chainid;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _CACHED_THIS = address(this);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        if (address(this) == _CACHED_THIS && block.chainid == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Counters.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title Counters\n * @author Matt Condon (@shrugs)\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\n *\n * Include with `using Counters for Counters.Counter;`\n */\nlibrary Counters {\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        unchecked {\n            counter._value += 1;\n        }\n    }\n\n    function decrement(Counter storage counter) internal {\n        uint256 value = counter._value;\n        require(value > 0, \"Counter: decrement overflow\");\n        unchecked {\n            counter._value = value - 1;\n        }\n    }\n\n    function reset(Counter storage counter) internal {\n        counter._value = 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _HEX_SYMBOLS = \"0123456789abcdef\";\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        // Inspired by OraclizeAPI's implementation - MIT licence\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\n\n        if (value == 0) {\n            return \"0\";\n        }\n        uint256 temp = value;\n        uint256 digits;\n        while (temp != 0) {\n            digits++;\n            temp /= 10;\n        }\n        bytes memory buffer = new bytes(digits);\n        while (value != 0) {\n            digits -= 1;\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\n            value /= 10;\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        if (value == 0) {\n            return \"0x00\";\n        }\n        uint256 temp = value;\n        uint256 length = 0;\n        while (temp != 0) {\n            length++;\n            temp >>= 8;\n        }\n        return toHexString(value, length);\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n}\n"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nimport \"./interfaces/IsHECTA.sol\";\nimport \"./interfaces/IgHECTA.sol\";\nimport \"./interfaces/IDistributor.sol\";\n\nimport \"./types/HectagonAccessControlled.sol\";\n\ncontract HectagonStaking is HectagonAccessControlled {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IsHECTA;\n    using SafeERC20 for IgHECTA;\n\n    /* ========== EVENTS ========== */\n\n    event DistributorSet(address distributor);\n    event WarmupSet(uint256 warmup);\n\n    /* ========== DATA STRUCTURES ========== */\n\n    struct Epoch {\n        uint256 length; // in seconds\n        uint256 number; // since inception\n        uint256 end; // timestamp\n        uint256 distribute; // amount\n    }\n\n    struct Claim {\n        uint256 deposit; // if forfeiting\n        uint256 gons; // staked balance\n        uint256 expiry; // end of warmup period\n        bool lock; // prevents malicious delays for claim\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    IERC20 public immutable HECTA;\n    IsHECTA public immutable sHECTA;\n    IgHECTA public immutable gHECTA;\n\n    Epoch public epoch;\n\n    IDistributor public distributor;\n\n    mapping(address => Claim) public warmupInfo;\n    uint256 public warmupPeriod;\n    uint256 private gonsInWarmup;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _hecta,\n        address _sHECTA,\n        address _gHECTA,\n        uint256 _epochLength,\n        uint256 _firstEpochNumber,\n        uint256 _firstEpochTime,\n        address _authority\n    ) HectagonAccessControlled(IHectagonAuthority(_authority)) {\n        require(_hecta != address(0), \"Zero address: HECTA\");\n        HECTA = IERC20(_hecta);\n        require(_sHECTA != address(0), \"Zero address: sHECTA\");\n        sHECTA = IsHECTA(_sHECTA);\n        require(_gHECTA != address(0), \"Zero address: gHECTA\");\n        gHECTA = IgHECTA(_gHECTA);\n\n        epoch = Epoch({length: _epochLength, number: _firstEpochNumber, end: _firstEpochTime, distribute: 0});\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice stake HECTA to enter warmup\n     * @param _to address\n     * @param _amount uint\n     * @param _claim bool\n     * @return uint\n     */\n    function stake(\n        address _to,\n        uint256 _amount,\n        bool _claim\n    ) external returns (uint256) {\n        HECTA.safeTransferFrom(msg.sender, address(this), _amount);\n        _amount = _amount + rebase(); // add bounty if rebase occurred\n        if (_claim && warmupPeriod == 0) {\n            return _send(_to, _amount);\n        } else {\n            Claim memory info = warmupInfo[_to];\n            if (!info.lock) {\n                require(_to == msg.sender, \"External deposits for account are locked\");\n            }\n\n            warmupInfo[_to] = Claim({\n                deposit: info.deposit + _amount,\n                gons: info.gons + sHECTA.gonsForBalance(_amount),\n                expiry: epoch.number + warmupPeriod,\n                lock: info.lock\n            });\n\n            gonsInWarmup = gonsInWarmup + sHECTA.gonsForBalance(_amount);\n\n            return _amount;\n        }\n    }\n\n    /**\n     * @notice retrieve stake from warmup\n     * @param _to address\n     * @return uint\n     */\n    function claim(address _to) public returns (uint256) {\n        Claim memory info = warmupInfo[_to];\n\n        if (!info.lock) {\n            require(_to == msg.sender, \"External claims for account are locked\");\n        }\n\n        if (epoch.number >= info.expiry && info.expiry != 0) {\n            delete warmupInfo[_to];\n\n            gonsInWarmup = gonsInWarmup - info.gons;\n\n            return _send(_to, sHECTA.balanceForGons(info.gons));\n        }\n        return 0;\n    }\n\n    /**\n     * @notice forfeit stake and retrieve HECTA\n     * @return uint\n     */\n    function forfeit() external returns (uint256) {\n        Claim memory info = warmupInfo[msg.sender];\n        delete warmupInfo[msg.sender];\n\n        gonsInWarmup = gonsInWarmup - info.gons;\n\n        HECTA.safeTransfer(msg.sender, info.deposit);\n\n        return info.deposit;\n    }\n\n    /**\n     * @notice prevent new deposits or claims from ext. address (protection from malicious activity)\n     */\n    function toggleLock() external {\n        warmupInfo[msg.sender].lock = !warmupInfo[msg.sender].lock;\n    }\n\n    /**\n     * @notice redeem sHECTA for HECTAs\n     * @param _to address\n     * @param _amount uint\n     * @param _trigger bool\n     * @return amount_ uint\n     */\n    function unstake(\n        address _to,\n        uint256 _amount,\n        bool _trigger\n    ) external returns (uint256 amount_) {\n        amount_ = _amount;\n        uint256 bounty;\n        if (_trigger) {\n            bounty = rebase();\n        }\n\n        gHECTA.burn(msg.sender, _amount); // amount was given in gHECTA terms\n        amount_ = gHECTA.balanceFrom(amount_) + bounty; // convert amount to HECTA terms & add bounty\n\n        require(amount_ <= HECTA.balanceOf(address(this)), \"Insufficient HECTA balance in contract\");\n        HECTA.safeTransfer(_to, amount_);\n    }\n\n    /**\n     * @notice trigger rebase if epoch over\n     * @return uint256\n     */\n    function rebase() public returns (uint256) {\n        uint256 bounty;\n        if (epoch.end <= block.timestamp) {\n            sHECTA.rebase(epoch.distribute, epoch.number);\n\n            epoch.end = epoch.end + epoch.length;\n            epoch.number++;\n\n            if (address(distributor) != address(0)) {\n                distributor.distribute();\n                bounty = distributor.retrieveBounty(); // Will mint HECTA for this contract if there exists a bounty\n            }\n            uint256 balance = HECTA.balanceOf(address(this));\n            uint256 staked = sHECTA.circulatingSupply();\n            if (balance <= staked + bounty) {\n                epoch.distribute = 0;\n            } else {\n                epoch.distribute = balance - staked - bounty;\n            }\n        }\n        return bounty;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    /**\n     * @notice send staker their amount as sHECTA or gHECTA\n     * @param _to address\n     * @param _amount uint\n     */\n    function _send(\n        address _to,\n        uint256 _amount\n    ) internal returns (uint256) {\n        gHECTA.mint(_to, gHECTA.balanceTo(_amount)); // send as gHECTA (convert units from HECTA)\n        return gHECTA.balanceTo(_amount);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice returns the sHECTA index, which tracks rebase growth\n     * @return uint\n     */\n    function index() public view returns (uint256) {\n        return sHECTA.index();\n    }\n\n    /**\n     * @notice total supply in warmup\n     */\n    function supplyInWarmup() public view returns (uint256) {\n        return sHECTA.balanceForGons(gonsInWarmup);\n    }\n\n    /**\n     * @notice seconds until the next epoch begins\n     */\n    function secondsToNextEpoch() external view returns (uint256) {\n        return epoch.end - block.timestamp;\n    }\n\n    /* ========== MANAGERIAL FUNCTIONS ========== */\n\n    /**\n     * @notice sets the contract address for LP staking\n     * @param _distributor address\n     */\n    function setDistributor(address _distributor) external onlyGovernor {\n        distributor = IDistributor(_distributor);\n        emit DistributorSet(_distributor);\n    }\n\n    /**\n     * @notice set warmup period for new stakers\n     * @param _warmupPeriod uint\n     */\n    function setWarmupLength(uint256 _warmupPeriod) external onlyGovernor {\n        warmupPeriod = _warmupPeriod;\n        emit WarmupSet(_warmupPeriod);\n    }\n}\n"
    },
    "contracts/interfaces/IDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IDistributor {\n    function distribute() external;\n\n    function bounty() external view returns (uint256);\n\n    function retrieveBounty() external returns (uint256);\n\n    function nextRewardAt(uint256 _rate) external view returns (uint256);\n\n    function nextRewardFor(address _recipient) external view returns (uint256);\n\n    function setBounty(uint256 _bounty) external;\n\n    function addRecipient(address _recipient, uint256 _rewardRate) external;\n\n    function removeRecipient(uint256 _index) external;\n\n    function setAdjustment(\n        uint256 _index,\n        bool _add,\n        uint256 _rate,\n        uint256 _target\n    ) external;\n}\n"
    },
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IHECTA.sol\";\nimport \"./interfaces/ITreasury.sol\";\nimport \"./types/HectagonAccessControlled.sol\";\n\ncontract HectagonTreasury is HectagonAccessControlled, ITreasury {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeERC20 for IERC20;\n\n    /* ========== EVENTS ========== */\n\n    event Withdrawal(address indexed token, uint256 amount);\n    event Minted(address indexed caller, address indexed recipient, uint256 amount);\n    event Permissioned(address addr, STATUS indexed status, bool result);\n\n    /* ========== DATA STRUCTURES ========== */\n\n    enum STATUS {\n        TREASURYMANAGER,\n        REWARDMANAGER\n    }\n    /* ========== STATE VARIABLES ========== */\n\n    IHECTA public immutable HECTA;\n\n    mapping(STATUS => mapping(address => bool)) public permissions;\n\n    bool public initialized;\n\n    string internal notApproved = \"Treasury: not approved\";\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _hecta, address _authority) HectagonAccessControlled(IHectagonAuthority(_authority)) {\n        require(_hecta != address(0), \"Zero address: HECTA\");\n        HECTA = IHECTA(_hecta);\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice pre mint Hecta for initilization of protocol\n     * @param _recipient address\n     * @param _amount uint256\n     */\n    function initialize(address _recipient, uint256 _amount) external onlyGovernor {\n        require(initialized == false, \"Already initialized\");\n        initialized = true;\n        HECTA.mint(_recipient, _amount);\n        emit Minted(msg.sender, _recipient, _amount);\n    }\n\n    /**\n     * @notice allow approved address to withdraw assets\n     * @param _token address\n     * @param _amount uint256\n     */\n    function withdraw(address _token, uint256 _amount) external override {\n        require(permissions[STATUS.TREASURYMANAGER][msg.sender], notApproved);\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n        emit Withdrawal(_token, _amount);\n    }\n\n    /**\n     * @notice mint new HECTA\n     * @param _recipient address\n     * @param _amount uint256\n     */\n    function mint(address _recipient, uint256 _amount) external override {\n        require(permissions[STATUS.REWARDMANAGER][msg.sender], notApproved);\n        HECTA.mint(_recipient, _amount);\n        emit Minted(msg.sender, _recipient, _amount);\n    }\n\n    /* ========== MANAGERIAL FUNCTIONS ========== */\n\n    /**\n     * @notice enable permission\n     * @param _status STATUS\n     * @param _address address\n     */\n    function enable(STATUS _status, address _address) external onlyGovernor {\n        permissions[_status][_address] = true;\n        emit Permissioned(_address, _status, true);\n    }\n\n    /**\n     *  @notice disable permission from address\n     *  @param _status STATUS\n     *  @param _address address\n     */\n    function disable(STATUS _status, address _address) external {\n        require(msg.sender == authority.governor() || msg.sender == authority.guardian(), \"Only governor or guardian\");\n        permissions[_status][_address] = false;\n        emit Permissioned(_address, _status, false);\n    }\n}\n"
    },
    "contracts/interfaces/IHECTA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IHECTA is IERC20 {\n    function mint(address account_, uint256 amount_) external;\n\n    function burn(uint256 amount) external;\n\n    function burnFrom(address account_, uint256 amount_) external;\n}\n"
    },
    "contracts/StakingDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/ITreasury.sol\";\nimport \"./interfaces/IDistributor.sol\";\n\nimport \"./types/HectagonAccessControlled.sol\";\nimport \"./interfaces/IHectaCirculatingSupply.sol\";\n\ncontract Distributor is IDistributor, HectagonAccessControlled {\n    /* ========== DEPENDENCIES ========== */\n    using SafeERC20 for IERC20;\n\n    /* ====== VARIABLES ====== */\n    ITreasury private immutable treasury;\n    address private immutable staking;\n    IHectaCirculatingSupply public circulatingHectaContract;\n\n    mapping(uint256 => Adjust) public adjustments;\n    uint256 public override bounty;\n\n    uint256 private immutable rateDenominator = 1_000_000;\n\n    /* ====== STRUCTS ====== */\n\n    struct Info {\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\n        address recipient;\n    }\n    Info[] public info;\n\n    struct Adjust {\n        bool add;\n        uint256 rate;\n        uint256 target;\n    }\n\n    /* ====== CONSTRUCTOR ====== */\n\n    constructor(\n        address _treasury,\n        address _staking,\n        address _authority,\n        address circulatingHectaContract_\n    ) HectagonAccessControlled(IHectagonAuthority(_authority)) {\n        require(_treasury != address(0), \"Zero address: Treasury\");\n        treasury = ITreasury(_treasury);\n        require(_staking != address(0), \"Zero address: Staking\");\n        staking = _staking;\n        require(circulatingHectaContract_ != address(0), \"Zero address: circulatingHectaContract\");\n        circulatingHectaContract = IHectaCirculatingSupply(circulatingHectaContract_);\n    }\n\n    /* ====== PUBLIC FUNCTIONS ====== */\n\n    /**\n        @notice send epoch reward to staking contract\n     */\n    function distribute() external override {\n        require(msg.sender == staking, \"Only staking\");\n        // distribute rewards to each recipient\n        for (uint256 i = 0; i < info.length; i++) {\n            if (info[i].rate > 0) {\n                treasury.mint(info[i].recipient, nextRewardAt(info[i].rate)); // mint and send tokens\n                adjust(i); // check for adjustment\n            }\n        }\n    }\n\n    function retrieveBounty() external override returns (uint256) {\n        require(msg.sender == staking, \"Only staking\");\n        // If the distributor bounty is > 0, mint it for the staking contract.\n        if (bounty > 0) {\n            treasury.mint(address(staking), bounty);\n        }\n\n        return bounty;\n    }\n\n    /* ====== INTERNAL FUNCTIONS ====== */\n\n    /**\n        @notice increment reward rate for collector\n     */\n    function adjust(uint256 _index) internal {\n        Adjust memory adjustment = adjustments[_index];\n        if (adjustment.rate != 0) {\n            if (adjustment.add) {\n                // if rate should increase\n                info[_index].rate = info[_index].rate + adjustment.rate; // raise rate\n                if (info[_index].rate >= adjustment.target) {\n                    // if target met\n                    adjustments[_index].rate = 0; // turn off adjustment\n                    info[_index].rate = adjustment.target; // set to target\n                }\n            } else {\n                // if rate should decrease\n                if (info[_index].rate > adjustment.rate) {\n                    // protect from underflow\n                    info[_index].rate = info[_index].rate - adjustment.rate; // lower rate\n                } else {\n                    info[_index].rate = 0;\n                }\n\n                if (info[_index].rate <= adjustment.target) {\n                    // if target met\n                    adjustments[_index].rate = 0; // turn off adjustment\n                    info[_index].rate = adjustment.target; // set to target\n                }\n            }\n        }\n    }\n\n    /* ====== VIEW FUNCTIONS ====== */\n\n    /**\n        @notice view function for next reward at given rate\n        @param _rate uint\n        @return uint\n     */\n    function nextRewardAt(uint256 _rate) public view override returns (uint256) {\n        return (circulatingHectaContract.circulatingSupply() * _rate) / rateDenominator;\n    }\n\n    /**\n        @notice view function for next reward for specified address\n        @param _recipient address\n        @return uint\n     */\n    function nextRewardFor(address _recipient) public view override returns (uint256) {\n        uint256 reward;\n        for (uint256 i = 0; i < info.length; i++) {\n            if (info[i].recipient == _recipient) {\n                reward = reward + nextRewardAt(info[i].rate);\n            }\n        }\n        return reward;\n    }\n\n    /* ====== POLICY FUNCTIONS ====== */\n\n    /**\n     * @notice set bounty to incentivize keepers\n     * @param _bounty uint256\n     */\n    function setBounty(uint256 _bounty) external override onlyGovernor {\n        require(_bounty <= 2e9, \"Too much\");\n        bounty = _bounty;\n    }\n\n    /**\n        @notice adds recipient for distributions\n        @param _recipient address\n        @param _rewardRate uint\n     */\n    function addRecipient(address _recipient, uint256 _rewardRate) external override onlyGovernor {\n        require(_recipient != address(0), \"Zero address: Recipient\");\n        require(_rewardRate <= rateDenominator, \"Rate cannot exceed denominator\");\n        info.push(Info({recipient: _recipient, rate: _rewardRate}));\n    }\n\n    /**\n        @notice removes recipient for distributions\n        @param _index uint\n     */\n    function removeRecipient(uint256 _index) external override {\n        require(\n            msg.sender == authority.governor() || msg.sender == authority.guardian(),\n            \"Caller is not governor or guardian\"\n        );\n        require(info[_index].recipient != address(0), \"Recipient does not exist\");\n        info[_index].recipient = address(0);\n        info[_index].rate = 0;\n    }\n\n    /**\n        @notice set adjustment info for a collector's reward rate\n        @param _index uint\n        @param _add bool\n        @param _rate uint\n        @param _target uint\n     */\n    function setAdjustment(\n        uint256 _index,\n        bool _add,\n        uint256 _rate,\n        uint256 _target\n    ) external override {\n        require(\n            msg.sender == authority.governor() || msg.sender == authority.guardian(),\n            \"Caller is not governor or guardian\"\n        );\n        require(info[_index].recipient != address(0), \"Recipient does not exist\");\n\n        if (msg.sender == authority.guardian()) {\n            require(_rate <= (info[_index].rate * 25) / 1000, \"Limiter: cannot adjust by >2.5%\");\n        }\n\n        if (!_add) {\n            require(_rate <= info[_index].rate, \"Cannot decrease rate by more than it already is\");\n        }\n\n        adjustments[_index] = Adjust({add: _add, rate: _rate, target: _target});\n    }\n}\n"
    },
    "contracts/interfaces/IHectaCirculatingSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\ninterface IHectaCirculatingSupply {\n    function circulatingSupply() external view returns (uint256);\n}\n"
    },
    "contracts/Snapshot.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./interfaces/IHectaCirculatingSupply.sol\";\nimport \"./interfaces/IsHECTA.sol\";\nimport \"./interfaces/IgHECTA.sol\";\n\ncontract Snapshot {\n    IHectaCirculatingSupply public immutable hectaCirculatingSupply;\n    IERC20 public immutable pHecta;\n    IERC20 public immutable tHecta;\n    IgHECTA public immutable gHecta;\n\n    uint256 public constant TOTAL_POINT = 100 * 10**9;\n    uint256 public constant PHECTA_WEIGHT = 500;\n    uint256 public constant THECTA_WEIGHT = 500;\n\n    constructor(\n        address _hectaCirculatingSupply,\n        address _pHecta,\n        address _tHecta,\n        address _gHecta\n    ) {\n        require(_hectaCirculatingSupply != address(0), \"Zero address: HECTA\");\n        hectaCirculatingSupply = IHectaCirculatingSupply(_hectaCirculatingSupply);\n        require(_pHecta != address(0), \"Zero address: pHECTA\");\n        pHecta = IERC20(_pHecta);\n        require(_tHecta != address(0), \"Zero address: tHECTA\");\n        tHecta = IERC20(_tHecta);\n        require(_gHecta != address(0), \"Zero address: gHECTA\");\n        gHecta = IgHECTA(_gHecta);\n    }\n\n    function getSHectaWeight() public view returns (uint256) {\n        return _caclulateHectaWeight();\n    }\n\n    function getGHectaWeight() public view returns (uint256) {\n        return (_caclulateHectaWeight() * gHecta.index()) / 10**9;\n    }\n\n    function _caclulateHectaWeight() public view returns (uint256) {\n        uint256 pHectaPoint = PHECTA_WEIGHT * pHecta.totalSupply();\n        uint256 tHectaPoint = THECTA_WEIGHT * tHecta.totalSupply();\n        uint256 circulatingSupply = hectaCirculatingSupply.circulatingSupply();\n        if (circulatingSupply == 0) return 0;\n        if (TOTAL_POINT * 10**9 < pHectaPoint + tHectaPoint) return 0;\n        return (TOTAL_POINT * 10**9 - pHectaPoint - tHectaPoint) / circulatingSupply;\n    }\n}\n"
    },
    "contracts/gHECTA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/utils/Address.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"./interfaces/IsHECTA.sol\";\nimport \"./interfaces/IgHECTA.sol\";\n\ncontract gHECTA is IgHECTA, ERC20 {\n    /* ========== DEPENDENCIES ========== */\n    using Address for address;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyApproved() {\n        require(msg.sender == approved, \"Only approved\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /* ========== DATA STRUCTURES ========== */\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint256 fromBlock;\n        uint256 votes;\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    IsHECTA public sHECTA;\n    address public approved;\n    bool public migrated;\n\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\n    mapping(address => uint256) public numCheckpoints;\n    mapping(address => address) public delegates;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _sHECTA) ERC20(\"Governance HECTA\", \"gHECTA\") {\n        require(_sHECTA != address(0), \"Zero address: sHECTA\");\n        sHECTA = IsHECTA(_sHECTA);\n        approved = msg.sender;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice transfer mint rights from deployer to staking\n     * @notice can only be done once, at the time of contract migration\n     * @param _staking address\n     */\n    function setStaking(address _staking) external onlyApproved {\n        require(!migrated, \"Migrated\");\n        migrated = true;\n\n        require(_staking != approved, \"Invalid argument\");\n        require(_staking != address(0), \"Zero address found\");\n        approved = _staking;\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n        @notice mint gHECTA\n        @param _to address\n        @param _amount uint\n     */\n    function mint(address _to, uint256 _amount) external override onlyApproved {\n        _mint(_to, _amount);\n    }\n\n    /**\n        @notice burn gHECTA\n        @param _from address\n        @param _amount uint\n     */\n    function burn(address _from, uint256 _amount) external override onlyApproved {\n        _burn(_from, _amount);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice pull index from sHECTA token\n     */\n    function index() public view override returns (uint256) {\n        return sHECTA.index();\n    }\n\n    /**\n        @notice converts gHECTA amount to HECTA\n        @param _amount uint\n        @return uint\n     */\n    function balanceFrom(uint256 _amount) public view override returns (uint256) {\n        return (_amount * index()) / 10**decimals();\n    }\n\n    /**\n        @notice converts HECTA amount to gHECTA\n        @param _amount uint\n        @return uint\n     */\n    function balanceTo(uint256 _amount) public view override returns (uint256) {\n        return (_amount * (10**decimals())) / index();\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint256) {\n        uint256 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\n        require(blockNumber < block.number, \"gHECTA::getPriorVotes: not yet determined\");\n\n        uint256 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = delegates[delegator];\n        uint256 delegatorBalance = balanceOf(delegator);\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveDelegates(\n        address srcRep,\n        address dstRep,\n        uint256 amount\n    ) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                uint256 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint256 srcRepNew = srcRepOld - amount;\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                uint256 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint256 dstRepNew = dstRepOld + amount;\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint256 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    ) internal {\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == block.number) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(block.number, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    /**\n        @notice Ensure delegation moves when token is transferred.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        _moveDelegates(delegates[from], delegates[to], amount);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/ERC20Burnable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../ERC20.sol\";\nimport \"../../../utils/Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(currentAllowance >= amount, \"ERC20: burn amount exceeds allowance\");\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/preHecta/pHecta.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/security/Pausable.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\";\nimport \"@openzeppelin/contracts/utils/Counters.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\";\nimport \"../interfaces/ITreasury.sol\";\nimport \"../interfaces/IHectaCirculatingSupply.sol\";\n\ncontract PHecta is Pausable, Ownable, ERC20, ERC20Burnable {\n    using Counters for Counters.Counter;\n    using SafeERC20 for IERC20;\n    /** Variables */\n    Counters.Counter public spaceCounter;\n\n    address public hectaAddress;\n    address public treasuryAddress;\n    address public busdAddress;\n    IHectaCirculatingSupply public circulatingHectaContract;\n\n    uint256 public startTimestamp;\n    bool public useWhiteList;\n\n    mapping(address => bool) public investors;\n    mapping(address => Holder) public holders;\n    mapping(uint256 => Space) public spaces;\n    mapping(address => Note[]) public notes; // user exercise data\n\n    uint256 public spaceLength = 604800; // 7 days timestamp\n    uint256 public vestingLength = 864000; // 10 days timestamp\n\n    /** Constant */\n    uint256 public constant RATE_DENOMINATOR = 1000000; // 1,000,000\n    uint256 public constant RATE_NUMERATOR = 100000; // in ten-thousandths ( 5000 = 0.5%, 100,000 = 10%)\n\n    /** Event */\n    event Exercise(address indexed from, uint256 amount);\n\n    /** Struct */\n    struct Holder {\n        bool isTransferable;\n        uint256 lastRebaseSpaceIndex;\n        uint256 maxClaim;\n        uint256 claimed;\n        uint256 currentSpaceProfit;\n    }\n\n    struct Note {\n        uint256 claimableAt;\n        uint256 claimedAt;\n        uint256 amount;\n    }\n\n    struct Space {\n        uint256 totalHecta;\n        uint256 totalPHecta;\n        uint256 startedTime;\n    }\n\n    struct RebaseInfo {\n        uint256 maxClaim;\n        uint256 currentSpaceProfit;\n        uint256 lastRebaseSpaceIndex;\n    }\n\n    /** Modifiers */\n    modifier started() {\n        require(startTimestamp > 0, \"Waiting for owner to start\");\n        _;\n    }\n\n    modifier whitelisted() {\n        if (useWhiteList == true) {\n            require(investors[msg.sender] == true, \"Investor must be whitelisted to use this function\");\n        }\n        _;\n    }\n\n    constructor() ERC20(\"Private Hectagon\", \"pHecta\") {\n        _mint(msg.sender, 50000000000000000); // mint 50,000,000 token\n    }\n\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    /**\n     * @notice mass approval saves gas\n     */\n\n    function massApprove() external {\n        IERC20(busdAddress).approve(treasuryAddress, 1e33);\n    }\n\n    function setSpaceLength(uint256 spaceLength_) external onlyOwner {\n        spaceLength = spaceLength_;\n    }\n\n    function setVestingLength(uint256 vestingLength_) external onlyOwner {\n        vestingLength = vestingLength_;\n    }\n\n    function initialize(\n        address hectaAddress_,\n        address treasuryAddress_,\n        address busdAddress_,\n        IHectaCirculatingSupply circulatingHectaContract_\n    ) external onlyOwner {\n        hectaAddress = hectaAddress_;\n        treasuryAddress = treasuryAddress_;\n        busdAddress = busdAddress_;\n        circulatingHectaContract = circulatingHectaContract_;\n        IERC20(busdAddress).approve(treasuryAddress, 1e33);\n    }\n\n    function start() external onlyOwner {\n        require(startTimestamp == 0, \"Already started!\");\n        startTimestamp = block.timestamp;\n        spaces[spaceCounter.current()] = Space(0, totalSupply(), block.timestamp);\n    }\n\n    function enableWhiteList() external onlyOwner {\n        useWhiteList = true;\n    }\n\n    function disableWhiteList() external onlyOwner {\n        useWhiteList = false;\n    }\n\n    function toggleInvestor(address investor) external onlyOwner {\n        investors[investor] = !investors[investor];\n    }\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n\n    function getClaimable(address addr) external view returns (uint256) {\n        RebaseInfo memory rInfo = _calcRebase(addr);\n        uint256 claimable = rInfo.maxClaim - holders[addr].claimed;\n        return claimable;\n    }\n\n    function transfer(address recipient, uint256 amount) public override whenNotPaused returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function exercise(uint256 amount_) external started whitelisted whenNotPaused {\n        _rebase(msg.sender);\n\n        uint256 busdAmount = toTokenAmount(busdAddress, amount_);\n        require(\n            holders[msg.sender].maxClaim - holders[msg.sender].claimed >= amount_,\n            \"Claim more than maximum amount\"\n        );\n        require(\n            IERC20(busdAddress).allowance(msg.sender, address(this)) >= busdAmount,\n            \"Must approve this contract to spend more than withdrawl amount\"\n        );\n        require(IERC20(busdAddress).balanceOf(msg.sender) >= amount_, \"BUSD balance is not enough\");\n\n        holders[msg.sender].isTransferable = false;\n        _burn(msg.sender, amount_);\n        holders[msg.sender].claimed += amount_;\n\n        IERC20(busdAddress).safeTransferFrom(msg.sender, treasuryAddress, busdAmount);\n\n        // the new note is pushed to the user's array\n        notes[msg.sender].push(Note({claimableAt: block.timestamp + vestingLength, claimedAt: 0, amount: amount_}));\n\n        ITreasury(treasuryAddress).mint(address(this), amount_);\n\n        emit Exercise(msg.sender, amount_);\n    }\n\n    // Within a space: you can not safeTransfer after exercise\n    function _beforeTokenTransfer(\n        address from_,\n        address to_,\n        uint256 amount_\n    ) internal override {\n        if (startTimestamp != 0 && from_ != address(0) && to_ != address(0)) {\n            _rebase(from_);\n            _rebase(to_);\n            if (holders[from_].lastRebaseSpaceIndex != 0) {\n                require(holders[from_].isTransferable, \"Cannot transfer after exercise\");\n            }\n        }\n    }\n\n    /**\n     * Transfer claimable\n     */\n    function _afterTokenTransfer(\n        address from_,\n        address to_,\n        uint256 amount_\n    ) internal override {\n        if (startTimestamp != 0 && from_ != address(0) && to_ != address(0)) {\n            uint256 claimableToTransfer = (amount_ * holders[from_].currentSpaceProfit) / (balanceOf(from_) + amount_);\n            holders[from_].maxClaim = holders[from_].maxClaim - claimableToTransfer;\n            // add claimable from this transaction\n            holders[to_].maxClaim = holders[to_].maxClaim + claimableToTransfer;\n        }\n    }\n\n    /*\n     ** _rebase(address addr) before every transfer or exercise action\n     */\n    function _rebase(address addr) private {\n        beat();\n        // calculate maxClaim\n        if (holders[addr].lastRebaseSpaceIndex < spaceCounter.current()) {\n            RebaseInfo memory rebaseInfo = _calcRebase(addr);\n            holders[addr].currentSpaceProfit = rebaseInfo.currentSpaceProfit;\n            holders[addr].maxClaim = rebaseInfo.maxClaim;\n            holders[addr].lastRebaseSpaceIndex = rebaseInfo.lastRebaseSpaceIndex;\n            holders[addr].isTransferable = true;\n        }\n    }\n\n    function beat() public {\n        Space memory currentSpace = spaces[spaceCounter.current()];\n        if (startTimestamp > 0 && block.timestamp - currentSpace.startedTime > spaceLength) {\n            spaceCounter.increment();\n            spaces[spaceCounter.current()] = Space(\n                circulatingHectaContract.circulatingSupply(),\n                totalSupply(),\n                block.timestamp\n            );\n        }\n    }\n\n    function _calcRebase(address addr) private view returns (RebaseInfo memory) {\n        if (startTimestamp == 0 || totalSupply() == 0) {\n            return RebaseInfo(0, 0, 0);\n        }\n\n        uint256 _spaceCount = spaceCounter.current();\n        Space memory currentSpace = spaces[_spaceCount];\n\n        uint256 accumulatedProfit = 0;\n        uint256 currentSpaceProfit = holders[addr].currentSpaceProfit;\n        // calculate maxClaim\n        if (holders[addr].lastRebaseSpaceIndex < _spaceCount) {\n            for (uint256 i = holders[addr].lastRebaseSpaceIndex; i < _spaceCount; i++) {\n                currentSpaceProfit =\n                    ((((spaces[i + 1].totalHecta - spaces[i].totalHecta) * RATE_NUMERATOR) / RATE_DENOMINATOR) *\n                        balanceOf(addr)) /\n                    spaces[i + 1].totalPHecta;\n                accumulatedProfit += currentSpaceProfit;\n            }\n        }\n\n        if (block.timestamp - currentSpace.startedTime > spaceLength) {\n            Space memory newSpace = Space(circulatingHectaContract.circulatingSupply(), totalSupply(), block.timestamp);\n\n            currentSpaceProfit =\n                ((((newSpace.totalHecta - spaces[_spaceCount].totalHecta) * RATE_NUMERATOR) / RATE_DENOMINATOR) *\n                    balanceOf(addr)) /\n                newSpace.totalPHecta;\n\n            accumulatedProfit += currentSpaceProfit;\n        }\n        return RebaseInfo(holders[addr].maxClaim + accumulatedProfit, currentSpaceProfit, _spaceCount);\n    }\n\n    /* ========== VIEW ========== */\n\n    function indexesFor(address _user) public view returns (uint256[] memory) {\n        Note[] memory info = notes[_user];\n\n        uint256 length;\n        for (uint256 i = 0; i < info.length; i++) {\n            if (info[i].claimedAt == 0 && info[i].amount != 0) length++;\n        }\n\n        uint256[] memory indexes = new uint256[](length);\n        uint256 position;\n\n        for (uint256 i = 0; i < info.length; i++) {\n            if (info[i].claimedAt == 0 && info[i].amount != 0) {\n                indexes[position] = i;\n                position++;\n            }\n        }\n\n        return indexes;\n    }\n\n    function pendingFor(address _user, uint256 _index) public view returns (uint256 amount_, bool claimable_) {\n        Note memory note = notes[_user][_index];\n\n        amount_ = note.amount;\n        claimable_ = note.claimedAt == 0 && note.claimableAt <= block.timestamp && note.amount != 0;\n    }\n\n    /* ========== CLAIM ========== */\n\n    /**\n     * @notice             claim notes for user\n     * @param _user        the user to claim for\n     * @param _indexes     the note indexes to claim\n     * @return amount_     sum of amount sent, in HECTA\n     */\n    function claim(address _user, uint256[] memory _indexes) public returns (uint256 amount_) {\n        uint48 time = uint48(block.timestamp);\n\n        for (uint256 i = 0; i < _indexes.length; i++) {\n            (uint256 amount, bool claimable) = pendingFor(_user, _indexes[i]);\n\n            if (claimable) {\n                notes[_user][_indexes[i]].claimedAt = time; // mark as claimed\n                amount_ += amount;\n            }\n        }\n\n        IERC20(hectaAddress).transfer(_user, amount_);\n    }\n\n    /**\n     * @notice             claim all claimable markets for user\n     * @dev                if possible, query indexesFor() off-chain and input in claim() to save gas\n     * @param _user        user to claim all notes for\n     * @return             sum of amount sent, in HECTA\n     */\n    function claimAll(address _user) external returns (uint256) {\n        return claim(_user, indexesFor(_user));\n    }\n\n    /**\n     * @notice convert pHecta to busd\n     * @param amount_ uint256\n     * @return value_ uint256\n     */\n    function toTokenAmount(address token, uint256 amount_) public view returns (uint256 value_) {\n        value_ = (amount_ * (10**IERC20Metadata(token).decimals())) / (10**decimals());\n    }\n}\n"
    },
    "contracts/HectagonERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"@openzeppelin/contracts/token/ERC20/extensions/draft-ERC20Permit.sol\";\nimport \"./interfaces/IHECTA.sol\";\nimport \"./types/HectagonAccessControlled.sol\";\n\ncontract HectagonERC20Token is ERC20Permit, IHECTA, HectagonAccessControlled {\n    constructor(address _authority)\n        ERC20(\"Hectagon\", \"HECTA\")\n        ERC20Permit(\"Hectagon\")\n        HectagonAccessControlled(IHectagonAuthority(_authority))\n    {}\n\n    function decimals() public view virtual override returns (uint8) {\n        return 9;\n    }\n\n    function mint(address account_, uint256 amount_) external override onlyVault {\n        _mint(account_, amount_);\n    }\n\n    function burn(uint256 amount) external override {\n        _burn(msg.sender, amount);\n    }\n\n    function burnFrom(address account_, uint256 amount_) external override {\n        _burnFrom(account_, amount_);\n    }\n\n    function _burnFrom(address account_, uint256 amount_) internal {\n        require(allowance(account_, msg.sender) >= amount_, \"ERC20: burn amount exceeds allowance\");\n        uint256 decreasedAllowance_ = allowance(account_, msg.sender) - amount_;\n\n        _approve(account_, msg.sender, decreasedAllowance_);\n        _burn(account_, amount_);\n    }\n}\n"
    },
    "contracts/testnet/HectaFaucet.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract HectaFaucet is Ownable {\n    IERC20 public hecta;\n\n    constructor(address _hecta) {\n        hecta = IERC20(_hecta);\n    }\n\n    function setHecta(address _hecta) external onlyOwner {\n        hecta = IERC20(_hecta);\n    }\n\n    function dispense() external {\n        hecta.transfer(msg.sender, 1e9);\n    }\n}\n"
    },
    "contracts/HectaCirculatingSupply.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.10;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"./interfaces/IHectaCirculatingSupply.sol\";\n\ncontract HectaCirculatingSupply is Ownable, IHectaCirculatingSupply {\n    IERC20 public hecta;\n    address[] public nonCirculatingAddresses;\n\n    constructor(IERC20 _hecta) {\n        hecta = _hecta;\n    }\n\n    function circulatingSupply() external view returns (uint256) {\n        uint256 _totalSupply = IERC20(hecta).totalSupply();\n\n        uint256 _circulatingSupply = _totalSupply - getNonCirculating();\n\n        return _circulatingSupply;\n    }\n\n    function getNonCirculating() public view returns (uint256) {\n        uint256 _nonCirculatingHecta;\n\n        for (uint256 i = 0; i < nonCirculatingAddresses.length; i++) {\n            _nonCirculatingHecta = _nonCirculatingHecta + IERC20(hecta).balanceOf(nonCirculatingAddresses[i]);\n        }\n\n        return _nonCirculatingHecta;\n    }\n\n    function setNonCirculatingAddresses(address[] calldata _nonCirculatingAddresses) external onlyOwner {\n        nonCirculatingAddresses = _nonCirculatingAddresses;\n    }\n}\n"
    },
    "contracts/mocks/MockSHECTA.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\nimport {ERC20} from \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\n/**\n * A mock version of sHECTA, with an over-simplified rebase mechanism, for testing purposes only\n */\ncontract MockSHECTA is ERC20 {\n    uint256 public immutable DECIMALS;\n    uint256 public _index; // 9 decimals\n    uint256 public _rebasePct; // 9 decimals\n    uint256 public _totalAgnosticSupply;\n\n    mapping(address => uint256) public _agnosticBalance;\n    mapping(address => mapping(address => uint256)) public _allowedValue;\n\n    constructor(uint256 initialIndex_, uint256 rebasePct_) ERC20(\"Mock sHECTA\", \"sHECTA\") {\n        require(initialIndex_ > 0, \"initial index must be greater than 0\");\n        require(rebasePct_ > 0, \"rebase percentage must be greater than 0\");\n\n        DECIMALS = 10**decimals();\n        _index = initialIndex_;\n        _rebasePct = rebasePct_;\n    }\n\n    function decimals() public pure override returns (uint8) {\n        return 9;\n    }\n\n    function approve(address spender_, uint256 value_) public override returns (bool) {\n        _approve(msg.sender, spender_, value_);\n        return true;\n    }\n\n    function mint(address to_, uint256 amount_) public returns (uint256) {\n        uint256 amount = (amount_ * DECIMALS) / _index;\n\n        _agnosticBalance[to_] += amount;\n        _mint(to_, amount);\n        _totalAgnosticSupply += amount;\n        return amount;\n    }\n\n    function transfer(address to_, uint256 value_) public override returns (bool) {\n        require(to_ != address(0), \"ERC20: transfer to the zero address\");\n\n        _transfer(msg.sender, to_, value_);\n        return true;\n    }\n\n    function transferFrom(\n        address from_,\n        address to_,\n        uint256 value_\n    ) public override returns (bool) {\n        require(from_ != address(0), \"ERC20: transfer from the zero address\");\n        require(to_ != address(0), \"ERC20: transfer to the zero address\");\n\n        _allowedValue[from_][to_] -= value_;\n        _transfer(from_, to_, value_);\n        return true;\n    }\n\n    function _transfer(\n        address from_,\n        address to_,\n        uint256 value_\n    ) internal override {\n        uint256 amount = (value_ * DECIMALS) / _index;\n\n        _agnosticBalance[from_] -= amount;\n        _agnosticBalance[to_] += amount;\n\n        emit Transfer(from_, to_, amount);\n    }\n\n    function balanceOf(address owner_) public view override returns (uint256) {\n        return (_agnosticBalance[owner_] * _index) / DECIMALS;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return (_totalAgnosticSupply * _index) / DECIMALS;\n    }\n\n    // Rebase all balances by rebase percentage\n    function rebase() external {\n        _index += (_index * _rebasePct) / DECIMALS;\n    }\n\n    // Set rebase percentage to new amount. Percentage has 9 decimal places.\n    function setRebasePct(uint256 newRebasePct_) external {\n        require(newRebasePct_ > 0, \"rebase percentage must be greater than 0\");\n        _rebasePct = newRebasePct_;\n    }\n\n    function index() public view returns (uint256) {\n        return _index;\n    }\n\n    // Set index. Index has 9 decimal places.\n    function setIndex(uint256 newIndex_) external {\n        require(newIndex_ > 0, \"new index must be greater than 0\");\n        _index = newIndex_;\n    }\n\n    // Drip 100 sHECTA to caller\n    function drip() external {\n        mint(msg.sender, 100000000000);\n    }\n\n    function _approve(\n        address owner_,\n        address spender_,\n        uint256 value_\n    ) internal override {\n        _allowedValue[owner_][spender_] = value_;\n        emit Approval(owner_, spender_, value_);\n    }\n}\n"
    },
    "contracts/mocks/AccessControlledMock.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\npragma solidity 0.8.10;\n\nimport \"../types/HectagonAccessControlled.sol\";\n\ncontract AccessControlledMock is HectagonAccessControlled {\n    constructor(address _auth) HectagonAccessControlled(IHectagonAuthority(_auth)) {}\n\n    bool public governorOnlyTest;\n\n    bool public guardianOnlyTest;\n\n    bool public policyOnlyTest;\n\n    bool public vaultOnlyTest;\n\n    function governorTest() external onlyGovernor returns (bool) {\n        governorOnlyTest = true;\n        return governorOnlyTest;\n    }\n\n    function guardianTest() external onlyGuardian returns (bool) {\n        guardianOnlyTest = true;\n        return guardianOnlyTest;\n    }\n\n    function policyTest() external onlyPolicy returns (bool) {\n        policyOnlyTest = true;\n        return policyOnlyTest;\n    }\n\n    function vaultTest() external onlyVault returns (bool) {\n        governorOnlyTest = true;\n        return governorOnlyTest;\n    }\n}\n"
    },
    "contracts/HectagonAuthority.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0;\n\nimport \"./interfaces/IHectagonAuthority.sol\";\nimport \"./types/HectagonAccessControlled.sol\";\n\ncontract HectagonAuthority is IHectagonAuthority, HectagonAccessControlled {\n    /* ========== STATE VARIABLES ========== */\n\n    address public override governor;\n\n    address public override guardian;\n\n    address public override policy;\n\n    address public override vault;\n\n    address public newGovernor;\n\n    address public newGuardian;\n\n    address public newPolicy;\n\n    address public newVault;\n\n    /* ========== Constructor ========== */\n\n    constructor(\n        address _governor,\n        address _guardian,\n        address _policy,\n        address _vault\n    ) HectagonAccessControlled(IHectagonAuthority(address(this))) {\n        governor = _governor;\n        emit GovernorPushed(address(0), governor, true);\n        guardian = _guardian;\n        emit GuardianPushed(address(0), guardian, true);\n        policy = _policy;\n        emit PolicyPushed(address(0), policy, true);\n        vault = _vault;\n        emit VaultPushed(address(0), vault, true);\n    }\n\n    /* ========== GOV ONLY ========== */\n\n    function pushGovernor(address _newGovernor, bool _effectiveImmediately) external onlyGovernor {\n        if (_effectiveImmediately) governor = _newGovernor;\n        newGovernor = _newGovernor;\n        emit GovernorPushed(governor, newGovernor, _effectiveImmediately);\n    }\n\n    function pushGuardian(address _newGuardian, bool _effectiveImmediately) external onlyGovernor {\n        if (_effectiveImmediately) guardian = _newGuardian;\n        newGuardian = _newGuardian;\n        emit GuardianPushed(guardian, newGuardian, _effectiveImmediately);\n    }\n\n    function pushPolicy(address _newPolicy, bool _effectiveImmediately) external onlyGovernor {\n        if (_effectiveImmediately) policy = _newPolicy;\n        newPolicy = _newPolicy;\n        emit PolicyPushed(policy, newPolicy, _effectiveImmediately);\n    }\n\n    function pushVault(address _newVault, bool _effectiveImmediately) external onlyGovernor {\n        if (_effectiveImmediately) vault = _newVault;\n        newVault = _newVault;\n        emit VaultPushed(vault, newVault, _effectiveImmediately);\n    }\n\n    /* ========== PENDING ROLE ONLY ========== */\n\n    function pullGovernor() external {\n        require(msg.sender == newGovernor, \"!newGovernor\");\n        emit GovernorPulled(governor, newGovernor);\n        governor = newGovernor;\n    }\n\n    function pullGuardian() external {\n        require(msg.sender == newGuardian, \"!newGuard\");\n        emit GuardianPulled(guardian, newGuardian);\n        guardian = newGuardian;\n    }\n\n    function pullPolicy() external {\n        require(msg.sender == newPolicy, \"!newPolicy\");\n        emit PolicyPulled(policy, newPolicy);\n        policy = newPolicy;\n    }\n\n    function pullVault() external {\n        require(msg.sender == newVault, \"!newVault\");\n        emit VaultPulled(vault, newVault);\n        vault = newVault;\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}