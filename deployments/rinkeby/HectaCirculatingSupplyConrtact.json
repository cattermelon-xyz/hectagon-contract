{
  "address": "0x55c9AB5D70aF02A4a5aEe50B723B14d2b22fbA24",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Hecta",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "HectaCirculatingSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNonCirculatingHecta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_Hecta",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isInitialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "nonCirculatingHectaAddresses",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_nonCirculatingAddresses",
          "type": "address[]"
        }
      ],
      "name": "setNonCirculatingHectaAddresses",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_owner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x252cba5cff12f7182a32d9c218f4ada73329ab1da9f48ebbd09733ae92339124",
  "receipt": {
    "to": null,
    "from": "0x8703d1C3cd670dd678ddFacA1e98237f6a342C3C",
    "contractAddress": "0x55c9AB5D70aF02A4a5aEe50B723B14d2b22fbA24",
    "transactionIndex": 17,
    "gasUsed": "480122",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x4b91452dc37b66b1bc9239887c9e57229db3af75f1a3d7508621c17b8b0b52fb",
    "transactionHash": "0x252cba5cff12f7182a32d9c218f4ada73329ab1da9f48ebbd09733ae92339124",
    "logs": [],
    "blockNumber": 10170110,
    "cumulativeGasUsed": "5630441",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "dfd926d2ec4dcd6257a39de555377cfa",
  "metadata": "{\"compiler\":{\"version\":\"0.7.5+commit.eb77ed08\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Hecta\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"HectaCirculatingSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNonCirculatingHecta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_Hecta\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isInitialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"nonCirculatingHectaAddresses\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_nonCirculatingAddresses\",\"type\":\"address[]\"}],\"name\":\"setNonCirculatingHectaAddresses\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HectaCirculatingSupplyConrtact.sol\":\"HectaCirculatingSupplyConrtact\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"contracts/HectaCirculatingSupplyConrtact.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.7.5;\\n\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./libraries/SafeMath.sol\\\";\\n\\ncontract HectaCirculatingSupplyConrtact {\\n    using SafeMath for uint;\\n\\n    bool public isInitialized;\\n\\n    address public Hecta;\\n    address public owner;\\n    address[] public nonCirculatingHectaAddresses;\\n\\n    constructor() {        \\n        owner = msg.sender;\\n    }\\n\\n    function initialize( address _Hecta ) external returns ( bool ) {\\n        require( msg.sender == owner, \\\"caller is not owner\\\" );\\n        require( isInitialized == false );\\n\\n        Hecta = _Hecta;\\n\\n        isInitialized = true;\\n\\n        return true;\\n    }\\n\\n    function HectaCirculatingSupply() external view returns ( uint ) {\\n        uint _totalSupply = IERC20( Hecta ).totalSupply();\\n\\n        uint _circulatingSupply = _totalSupply.sub( getNonCirculatingHecta() );\\n\\n        return _circulatingSupply;\\n    }\\n\\n    function getNonCirculatingHecta() public view returns ( uint ) {\\n        uint _nonCirculatingHecta;\\n\\n        for( uint i=0; i < nonCirculatingHectaAddresses.length; i = i.add( 1 ) ) {\\n            _nonCirculatingHecta = _nonCirculatingHecta.add( IERC20( Hecta ).balanceOf( nonCirculatingHectaAddresses[i] ) );\\n        }\\n\\n        return _nonCirculatingHecta;\\n    }\\n\\n    function setNonCirculatingHectaAddresses( address[] calldata _nonCirculatingAddresses ) external returns ( bool ) {\\n        require( msg.sender == owner, \\\"Sender is not owner\\\" );\\n        nonCirculatingHectaAddresses = _nonCirculatingAddresses;\\n\\n        return true;\\n    }\\n\\n    function transferOwnership( address _owner ) external returns ( bool ) {\\n        require( msg.sender == owner, \\\"Sender is not owner\\\" );\\n\\n        owner = _owner;\\n\\n        return true;\\n    }\\n}\",\"keccak256\":\"0x766d5bed0cf2e6e5c3092f4b9ac0bc8f34f76b4472d27e0352aeee9e2d9b230d\",\"license\":\"MIT\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity >=0.7.5;\\n\\ninterface IERC20 {\\n  /**\\n   * @dev Returns the amount of tokens in existence.\\n   */\\n  function totalSupply() external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the amount of tokens owned by `account`.\\n   */\\n  function balanceOf(address account) external view returns (uint256);\\n\\n  /**\\n   * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Returns the remaining number of tokens that `spender` will be\\n   * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n   * zero by default.\\n   *\\n   * This value changes when {approve} or {transferFrom} are called.\\n   */\\n  function allowance(address owner, address spender) external view returns (uint256);\\n\\n  /**\\n   * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n   * that someone may use both the old and the new allowance by unfortunate\\n   * transaction ordering. One possible solution to mitigate this race\\n   * condition is to first reduce the spender's allowance to 0 and set the\\n   * desired value afterwards:\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n   *\\n   * Emits an {Approval} event.\\n   */\\n  function approve(address spender, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n   * allowance mechanism. `amount` is then deducted from the caller's\\n   * allowance.\\n   *\\n   * Returns a boolean value indicating whether the operation succeeded.\\n   *\\n   * Emits a {Transfer} event.\\n   */\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  /**\\n   * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n   * another (`to`).\\n   *\\n   * Note that `value` may be zero.\\n   */\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  /**\\n   * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n   * a call to {approve}. `value` is the new allowance.\\n   */\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xa142440b0e1c51ece24b6d074ac883b34e1f33a2472773eeaaf4871875904d09\",\"license\":\"AGPL-3.0\"},\"contracts/libraries/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0\\npragma solidity ^0.7.5;\\n\\n\\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\\nlibrary SafeMath {\\n\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    // Only used in the  BondingCalculator.sol\\n    function sqrrt(uint256 a) internal pure returns (uint c) {\\n        if (a > 3) {\\n            c = a;\\n            uint b = add( div( a, 2), 1 );\\n            while (b < c) {\\n                c = b;\\n                b = div( add( div( a, b ), b), 2 );\\n            }\\n        } else if (a != 0) {\\n            c = 1;\\n        }\\n    }\\n\\n}\",\"keccak256\":\"0x45cfc2aa9d85df2add98d4e899d834c646e8ce7001b00ead65f07dbefbcebeef\",\"license\":\"AGPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50600180546001600160a01b03191633179055610757806100326000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c8063c1d8821111610076578063e3c75cab1161005b578063e3c75cab146101a0578063e425ec92146101a8578063f2fde38b146101c5576100a3565b8063c1d882111461010a578063c4d66de81461017a576100a3565b8063392e53cd146100a85780638da5cb5b146100c457806392d4f6d7146100e8578063c06edf7e14610102575b600080fd5b6100b06101eb565b604080519115158252519081900360200190f35b6100cc6101f4565b604080516001600160a01b039092168252519081900360200190f35b6100f0610203565b60408051918252519081900360200190f35b6100cc6102f0565b6100b06004803603602081101561012057600080fd5b81019060208101813564010000000081111561013b57600080fd5b82018360208201111561014d57600080fd5b8035906020019184602083028401116401000000008311171561016f57600080fd5b509092509050610304565b6100b06004803603602081101561019057600080fd5b50356001600160a01b031661037c565b6100f061043a565b6100cc600480360360208110156101be57600080fd5b50356104d4565b6100b0600480360360208110156101db57600080fd5b50356001600160a01b03166104fe565b60005460ff1681565b6001546001600160a01b031681565b60008060005b6002548110156102ea57600054600280546102d69261010090046001600160a01b0316916370a08231918590811061023d57fe5b60009182526020918290200154604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b1580156102a357600080fd5b505afa1580156102b7573d6000803e3d6000fd5b505050506040513d60208110156102cd57600080fd5b50518390610590565b91506102e3816001610590565b9050610209565b50905090565b60005461010090046001600160a01b031681565b6001546000906001600160a01b03163314610366576040805162461bcd60e51b815260206004820152601360248201527f53656e646572206973206e6f74206f776e657200000000000000000000000000604482015290519081900360640190fd5b610372600284846106c5565b5060019392505050565b6001546000906001600160a01b031633146103de576040805162461bcd60e51b815260206004820152601360248201527f63616c6c6572206973206e6f74206f776e657200000000000000000000000000604482015290519081900360640190fd5b60005460ff16156103ee57600080fd5b506000805460ff196001600160a01b038416610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff90921691909117166001908117909155919050565b600080600060019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048b57600080fd5b505afa15801561049f573d6000803e3d6000fd5b505050506040513d60208110156104b557600080fd5b5051905060006104cd6104c6610203565b83906105f1565b9250505090565b600281815481106104e457600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546000906001600160a01b03163314610560576040805162461bcd60e51b815260206004820152601360248201527f53656e646572206973206e6f74206f776e657200000000000000000000000000604482015290519081900360640190fd5b50600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116178155919050565b6000828201838110156105ea576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60006105ea83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156106bd5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561068257818101518382015260200161066a565b50505050905090810190601f1680156106af5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b828054828255906000526020600020908101928215610725579160200282015b8281111561072557815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038435161782556020909201916001909101906106e5565b50610731929150610735565b5090565b5b80821115610731576000815560010161073656fea164736f6c6343000705000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c8063c1d8821111610076578063e3c75cab1161005b578063e3c75cab146101a0578063e425ec92146101a8578063f2fde38b146101c5576100a3565b8063c1d882111461010a578063c4d66de81461017a576100a3565b8063392e53cd146100a85780638da5cb5b146100c457806392d4f6d7146100e8578063c06edf7e14610102575b600080fd5b6100b06101eb565b604080519115158252519081900360200190f35b6100cc6101f4565b604080516001600160a01b039092168252519081900360200190f35b6100f0610203565b60408051918252519081900360200190f35b6100cc6102f0565b6100b06004803603602081101561012057600080fd5b81019060208101813564010000000081111561013b57600080fd5b82018360208201111561014d57600080fd5b8035906020019184602083028401116401000000008311171561016f57600080fd5b509092509050610304565b6100b06004803603602081101561019057600080fd5b50356001600160a01b031661037c565b6100f061043a565b6100cc600480360360208110156101be57600080fd5b50356104d4565b6100b0600480360360208110156101db57600080fd5b50356001600160a01b03166104fe565b60005460ff1681565b6001546001600160a01b031681565b60008060005b6002548110156102ea57600054600280546102d69261010090046001600160a01b0316916370a08231918590811061023d57fe5b60009182526020918290200154604080517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b1681526001600160a01b0390921660048301525160248083019392829003018186803b1580156102a357600080fd5b505afa1580156102b7573d6000803e3d6000fd5b505050506040513d60208110156102cd57600080fd5b50518390610590565b91506102e3816001610590565b9050610209565b50905090565b60005461010090046001600160a01b031681565b6001546000906001600160a01b03163314610366576040805162461bcd60e51b815260206004820152601360248201527f53656e646572206973206e6f74206f776e657200000000000000000000000000604482015290519081900360640190fd5b610372600284846106c5565b5060019392505050565b6001546000906001600160a01b031633146103de576040805162461bcd60e51b815260206004820152601360248201527f63616c6c6572206973206e6f74206f776e657200000000000000000000000000604482015290519081900360640190fd5b60005460ff16156103ee57600080fd5b506000805460ff196001600160a01b038416610100027fffffffffffffffffffffff0000000000000000000000000000000000000000ff90921691909117166001908117909155919050565b600080600060019054906101000a90046001600160a01b03166001600160a01b03166318160ddd6040518163ffffffff1660e01b815260040160206040518083038186803b15801561048b57600080fd5b505afa15801561049f573d6000803e3d6000fd5b505050506040513d60208110156104b557600080fd5b5051905060006104cd6104c6610203565b83906105f1565b9250505090565b600281815481106104e457600080fd5b6000918252602090912001546001600160a01b0316905081565b6001546000906001600160a01b03163314610560576040805162461bcd60e51b815260206004820152601360248201527f53656e646572206973206e6f74206f776e657200000000000000000000000000604482015290519081900360640190fd5b50600180546001600160a01b03831673ffffffffffffffffffffffffffffffffffffffff19909116178155919050565b6000828201838110156105ea576040805162461bcd60e51b815260206004820152601b60248201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604482015290519081900360640190fd5b9392505050565b60006105ea83836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f770000815250600081848411156106bd5760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561068257818101518382015260200161066a565b50505050905090810190601f1680156106af5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b828054828255906000526020600020908101928215610725579160200282015b8281111561072557815473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038435161782556020909201916001909101906106e5565b50610731929150610735565b5090565b5b80821115610731576000815560010161073656fea164736f6c6343000705000a",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/HectaCirculatingSupplyConrtact.sol:HectaCirculatingSupplyConrtact",
        "label": "isInitialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 10,
        "contract": "contracts/HectaCirculatingSupplyConrtact.sol:HectaCirculatingSupplyConrtact",
        "label": "Hecta",
        "offset": 1,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12,
        "contract": "contracts/HectaCirculatingSupplyConrtact.sol:HectaCirculatingSupplyConrtact",
        "label": "owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15,
        "contract": "contracts/HectaCirculatingSupplyConrtact.sol:HectaCirculatingSupplyConrtact",
        "label": "nonCirculatingHectaAddresses",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}