{
  "address": "0x52FED7aa5C4062127462d99B285bBd2E51c11b5c",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokensRec",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        }
      ],
      "name": "QuickBond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "depo",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pairAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minTokenReceive",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_transferResidual",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "_shouldSellEntireBalance",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        }
      ],
      "name": "quickLPBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_fromTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_principal",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_shouldSellEntireBalance",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_bondId",
          "type": "uint256"
        }
      ],
      "name": "quickStableBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stopped",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_depo",
          "type": "address"
        }
      ],
      "name": "updateDepo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6b7a22184448f15967150076d7e46142491b7ed01b6d68a1ebcee21e94cace76",
  "receipt": {
    "to": null,
    "from": "0x8703d1C3cd670dd678ddFacA1e98237f6a342C3C",
    "contractAddress": "0x52FED7aa5C4062127462d99B285bBd2E51c11b5c",
    "transactionIndex": 4,
    "gasUsed": "2067900",
    "logsBloom": "0x
    "blockHash": "0x8bd378ea524b75a55ece50abeb2a58988b3101ad7c0dda2a3cfe61fd732abdf2",
    "transactionHash": "0x6b7a22184448f15967150076d7e46142491b7ed01b6d68a1ebcee21e94cace76",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 21566671,
        "transactionHash": "0x6b7a22184448f15967150076d7e46142491b7ed01b6d68a1ebcee21e94cace76",
        "address": "0x52FED7aa5C4062127462d99B285bBd2E51c11b5c",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008703d1c3cd670dd678ddfaca1e98237f6a342c3c"
        ],
        "data": "0x",
        "logIndex": 11,
        "blockHash": "0x8bd378ea524b75a55ece50abeb2a58988b3101ad7c0dda2a3cfe61fd732abdf2"
      }
    ],
    "blockNumber": 21566671,
    "cumulativeGasUsed": "3165911",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "324cd8bf7a6832202abf9a0d2c64407f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokensRec\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"}],\"name\":\"QuickBond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"depo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pairAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokenReceive\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_transferResidual\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"_shouldSellEntireBalance\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"}],\"name\":\"quickLPBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_fromTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_principal\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_shouldSellEntireBalance\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bondId\",\"type\":\"uint256\"}],\"name\":\"quickStableBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stopped\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_depo\",\"type\":\"address\"}],\"name\":\"updateDepo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"updateDepo(address)\":{\"notice\":\"update state for depo\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/HectagonQuickBond.sol\":\"HectagonQuickBond\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/HectagonQuickBond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport \\\"./interfaces/IBondDepository.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Router.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"./interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"./interfaces/IWETH.sol\\\";\\nimport \\\"./libraries/Babylonian.sol\\\";\\n\\ncontract HectagonQuickBond is Ownable, Pausable {\\n    using SafeERC20 for IERC20;\\n\\n    ////////////////////////// STORAGE //////////////////////////\\n\\n    address public depo;\\n\\n    bool public stopped = false;\\n\\n    // bsc mainnet\\n    IUniswapV2Factory private constant pancakeswapFactoryAddress =\\n        IUniswapV2Factory(0xcA143Ce32Fe78f1f7019d7d551a6402fC5350c73);\\n    IUniswapV2Router private pancakeswapRouter = IUniswapV2Router(0x10ED43C718714eb63d5aA57B78B54704E256024E);\\n    address private constant wbnbTokenAddress = 0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c;\\n\\n    uint256 private constant deadline = 0xf000000000000000000000000000000000000000000000000000000000000000;\\n\\n    // Emitted when `sender` successfully calls ZapBond\\n    event QuickBond(address indexed sender, address indexed token, uint256 tokensRec, address referral);\\n\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n\\n    function quickLPBond(\\n        address _fromTokenAddress,\\n        address _pairAddress,\\n        address[] memory _path,\\n        uint256 _amount,\\n        uint256 _minTokenReceive,\\n        bool _transferResidual,\\n        bool _shouldSellEntireBalance,\\n        address _referral,\\n        uint256 _maxPrice,\\n        uint256 _bondId\\n    ) external payable whenNotPaused returns (uint256) {\\n        uint256 toInvest = _pullTokens(_fromTokenAddress, _amount, _shouldSellEntireBalance);\\n\\n        uint256 LPBought = _performZapIn(_fromTokenAddress, _pairAddress, toInvest, _transferResidual, _path);\\n\\n        _approveToken(_pairAddress, depo, LPBought);\\n        // purchase bond\\n        IBondDepository.UserBond memory userBond = IBondDepository(depo).deposit(\\n            _bondId,\\n            LPBought,\\n            _maxPrice,\\n            msg.sender, // depositor\\n            _referral\\n        );\\n        require(userBond.finalPayout >= _minTokenReceive, \\\"High Slippage\\\");\\n\\n        emit QuickBond(msg.sender, _pairAddress, userBond.finalPayout, _referral);\\n\\n        return userBond.finalPayout;\\n    }\\n\\n    function quickStableBond(\\n        address _fromTokenAddress,\\n        address _principal,\\n        address[] memory _path,\\n        uint256 _amount,\\n        bool _shouldSellEntireBalance,\\n        address _referral,\\n        uint256 _maxPrice,\\n        uint256 _bondId\\n    ) external payable whenNotPaused returns (uint256) {\\n        uint256 toInvest = _pullTokens(_fromTokenAddress, _amount, _shouldSellEntireBalance);\\n\\n        uint256 tokensBought = _fillQuote(_fromTokenAddress, toInvest, _path);\\n\\n        // make sure bond depo is approved to spend this contracts \\\"principal\\\"\\n        _approveToken(_principal, depo, tokensBought);\\n\\n        // purchase bond\\n        IBondDepository.UserBond memory userBond = IBondDepository(depo).deposit(\\n            _bondId,\\n            tokensBought,\\n            _maxPrice,\\n            msg.sender, // depositor\\n            _referral\\n        );\\n\\n        emit QuickBond(msg.sender, _principal, userBond.finalPayout, _referral);\\n        return userBond.finalPayout;\\n    }\\n\\n    function _getPairTokens(address _pairAddress) internal pure returns (address token0, address token1) {\\n        IUniswapV2Pair uniPair = IUniswapV2Pair(_pairAddress);\\n        token0 = uniPair.token0();\\n        token1 = uniPair.token1();\\n    }\\n\\n    function _performZapIn(\\n        address _fromTokenAddress,\\n        address _pairAddress,\\n        uint256 _amount,\\n        bool transferResidual,\\n        address[] memory _path\\n    ) internal returns (uint256) {\\n        uint256 intermediateAmt;\\n        address intermediateToken;\\n        (address _ToUniswapToken0, address _ToUniswapToken1) = _getPairTokens(_pairAddress);\\n\\n        if (_fromTokenAddress != _ToUniswapToken0 && _fromTokenAddress != _ToUniswapToken1) {\\n            // swap to intermediate\\n            (intermediateAmt, intermediateToken) = _fillQuote(_fromTokenAddress, _pairAddress, _amount, _path);\\n        } else {\\n            intermediateToken = _fromTokenAddress;\\n            intermediateAmt = _amount;\\n        }\\n\\n        // divide intermediate into appropriate amount to add liquidity\\n        (uint256 token0Bought, uint256 token1Bought) = _swapIntermediate(\\n            intermediateToken,\\n            _ToUniswapToken0,\\n            _ToUniswapToken1,\\n            intermediateAmt\\n        );\\n        return _uniDeposit(_ToUniswapToken0, _ToUniswapToken1, token0Bought, token1Bought, transferResidual);\\n    }\\n\\n    function _pullTokens(\\n        address token,\\n        uint256 amount,\\n        bool shouldSellEntireBalance\\n    ) internal returns (uint256 value) {\\n        if (token == address(0)) {\\n            require(msg.value > 0, \\\"No BNB sent\\\");\\n            return msg.value;\\n        }\\n        require(amount > 0, \\\"Invalid token amount\\\");\\n        require(msg.value == 0, \\\"BNB sent with token\\\");\\n\\n        //transfer token\\n        if (shouldSellEntireBalance) {\\n            require(Address.isContract(msg.sender), \\\"ERR: shouldSellEntireBalance is true for EOA\\\");\\n            amount = IERC20(token).allowance(msg.sender, address(this));\\n        }\\n        IERC20(token).safeTransferFrom(msg.sender, address(this), amount);\\n        return amount;\\n    }\\n\\n    function _uniDeposit(\\n        address _ToUnipoolToken0,\\n        address _ToUnipoolToken1,\\n        uint256 token0Bought,\\n        uint256 token1Bought,\\n        bool transferResidual\\n    ) internal returns (uint256) {\\n        _approveToken(_ToUnipoolToken0, address(pancakeswapRouter), token0Bought);\\n        _approveToken(_ToUnipoolToken1, address(pancakeswapRouter), token1Bought);\\n\\n        (uint256 amountA, uint256 amountB, uint256 LP) = pancakeswapRouter.addLiquidity(\\n            _ToUnipoolToken0,\\n            _ToUnipoolToken1,\\n            token0Bought,\\n            token1Bought,\\n            1,\\n            1,\\n            address(this),\\n            deadline\\n        );\\n\\n        if (transferResidual) {\\n            //Returning Residue in token0, if any.\\n            if (token0Bought - amountA > 0) {\\n                IERC20(_ToUnipoolToken0).safeTransfer(msg.sender, token0Bought - amountA);\\n            }\\n\\n            //Returning Residue in token1, if any\\n            if (token1Bought - amountB > 0) {\\n                IERC20(_ToUnipoolToken1).safeTransfer(msg.sender, token1Bought - amountB);\\n            }\\n        }\\n        return LP;\\n    }\\n\\n    function _fillQuote(\\n        address _fromTokenAddress,\\n        address _pairAddress,\\n        uint256 _amount,\\n        address[] memory _path\\n    ) internal returns (uint256 amountBought, address intermediateToken) {\\n        address fromTokenAddress;\\n\\n        if (_fromTokenAddress == address(0)) {\\n            IWETH(wbnbTokenAddress).deposit{value: _amount}();\\n            fromTokenAddress = wbnbTokenAddress;\\n        } else {\\n            fromTokenAddress = _fromTokenAddress;\\n        }\\n\\n        _approveToken(fromTokenAddress, address(pancakeswapRouter), _amount);\\n\\n        (address _token0, address _token1) = _getPairTokens(_pairAddress);\\n        IERC20 token0 = IERC20(_token0);\\n        IERC20 token1 = IERC20(_token1);\\n        uint256 initialBalance0 = token0.balanceOf(address(this));\\n        uint256 initialBalance1 = token1.balanceOf(address(this));\\n\\n        _path[0] = fromTokenAddress;\\n\\n        uint256 tokenBought = pancakeswapRouter.swapExactTokensForTokens(_amount, 1, _path, address(this), deadline)[\\n            _path.length - 1\\n        ];\\n\\n        require(tokenBought > 0, \\\"Error Swapping Tokens 1\\\");\\n\\n        uint256 finalBalance0 = token0.balanceOf(address(this)) - initialBalance0;\\n        uint256 finalBalance1 = token1.balanceOf(address(this)) - initialBalance1;\\n\\n        if (finalBalance0 > finalBalance1) {\\n            amountBought = finalBalance0;\\n            intermediateToken = _token0;\\n        } else {\\n            amountBought = finalBalance1;\\n            intermediateToken = _token1;\\n        }\\n\\n        require(amountBought > 0, \\\"Swapped to Invalid Intermediate\\\");\\n    }\\n\\n    function _fillQuote(\\n        address _fromTokenAddress,\\n        uint256 _amount,\\n        address[] memory _path\\n    ) internal returns (uint256) {\\n        address fromTokenAddress;\\n\\n        if (_fromTokenAddress == address(0)) {\\n            IWETH(wbnbTokenAddress).deposit{value: _amount}();\\n            fromTokenAddress = wbnbTokenAddress;\\n        } else {\\n            fromTokenAddress = _fromTokenAddress;\\n        }\\n\\n        _approveToken(fromTokenAddress, address(pancakeswapRouter), _amount);\\n\\n        _path[0] = fromTokenAddress;\\n\\n        uint256 tokenBought = pancakeswapRouter.swapExactTokensForTokens(_amount, 1, _path, address(this), deadline)[\\n            _path.length - 1\\n        ];\\n        require(tokenBought > 0, \\\"Error Swapping Tokens 1\\\");\\n        return tokenBought;\\n    }\\n\\n    function _swapIntermediate(\\n        address _toContractAddress,\\n        address _ToUnipoolToken0,\\n        address _ToUnipoolToken1,\\n        uint256 _amount\\n    ) internal returns (uint256 token0Bought, uint256 token1Bought) {\\n        IUniswapV2Pair pair = IUniswapV2Pair(pancakeswapFactoryAddress.getPair(_ToUnipoolToken0, _ToUnipoolToken1));\\n        (uint256 res0, uint256 res1, ) = pair.getReserves();\\n        if (_toContractAddress == _ToUnipoolToken0) {\\n            uint256 amountToSwap = calculateSwapInAmount(res0, _amount);\\n            //if no reserve or a new pair is created\\n            if (amountToSwap <= 0) amountToSwap = _amount / 2;\\n            token1Bought = _token2Token(_toContractAddress, _ToUnipoolToken1, amountToSwap);\\n            token0Bought = _amount - amountToSwap;\\n        } else {\\n            uint256 amountToSwap = calculateSwapInAmount(res1, _amount);\\n            //if no reserve or a new pair is created\\n            if (amountToSwap <= 0) amountToSwap = _amount / 2;\\n            token0Bought = _token2Token(_toContractAddress, _ToUnipoolToken0, amountToSwap);\\n            token1Bought = _amount - amountToSwap;\\n        }\\n    }\\n\\n    function calculateSwapInAmount(uint256 reserveIn, uint256 userIn) internal pure returns (uint256) {\\n        // in case fee is 0.25%\\n        return\\n            (Babylonian.sqrt(reserveIn * ((userIn * 399000000) + (reserveIn * 399000625))) - (reserveIn * 19975)) /\\n            19950;\\n    }\\n\\n    /**\\n    @notice This function is used to swap ERC20 <> ERC20\\n    @param _fromTokenAddress The token address to swap from.\\n    @param _ToTokenContractAddress The token address to swap to. \\n    @param tokens2Trade The amount of tokens to swap\\n    @return tokenBought The quantity of tokens bought\\n    */\\n    function _token2Token(\\n        address _fromTokenAddress,\\n        address _ToTokenContractAddress,\\n        uint256 tokens2Trade\\n    ) internal returns (uint256 tokenBought) {\\n        if (_fromTokenAddress == _ToTokenContractAddress) {\\n            return tokens2Trade;\\n        }\\n\\n        _approveToken(_fromTokenAddress, address(pancakeswapRouter), tokens2Trade);\\n\\n        address pair = pancakeswapFactoryAddress.getPair(_fromTokenAddress, _ToTokenContractAddress);\\n        require(pair != address(0), \\\"No Swap Available\\\");\\n        address[] memory path = new address[](2);\\n        path[0] = _fromTokenAddress;\\n        path[1] = _ToTokenContractAddress;\\n\\n        tokenBought = pancakeswapRouter.swapExactTokensForTokens(tokens2Trade, 1, path, address(this), deadline)[\\n            path.length - 1\\n        ];\\n\\n        require(tokenBought > 0, \\\"Error Swapping Tokens 2\\\");\\n    }\\n\\n    ////////////////////////// HECTAGON ONLY //////////////////////////\\n\\n    /// @notice update state for depo\\n    function updateDepo(address _depo) external onlyOwner {\\n        depo = _depo;\\n    }\\n\\n    function withdraw(address _token, uint256 _amount) public onlyOwner {\\n        IERC20(_token).transfer(msg.sender, _amount);\\n    }\\n\\n    function _approveToken(\\n        address token,\\n        address spender,\\n        uint256 amount\\n    ) internal {\\n        IERC20(token).safeApprove(spender, 0);\\n        IERC20(token).safeApprove(spender, amount);\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender != tx.origin, \\\"Do not send BNB directly\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x4cbf80260d36b0b0aa47804bf2f793387b548ea88fc9f5c28eb8a0a49e4f79ff\",\"license\":\"MIT\"},\"contracts/interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n    // Info about each type of market\\n    struct Market {\\n        uint256 capacity; // capacity remaining\\n        IERC20 quoteToken; // token to accept as payment\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in HECTA (false, default)\\n        uint64 totalDebt; // total debt from market\\n        uint64 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n        uint64 sold; // base tokens out\\n        uint256 purchased; // quote tokens in\\n    }\\n\\n    // Info for creating new markets\\n    struct Terms {\\n        bool fixedTerm; // fixed term or fixed expiration\\n        uint64 controlVariable; // scaling variable for price\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n        uint64 maxDebt; // 9 decimal debt maximum in HECTA\\n    }\\n\\n    // Additional info about market.\\n    struct Metadata {\\n        uint48 lastTune; // last timestamp when control variable was tuned\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n        uint48 depositInterval; // target frequency of deposits\\n        uint48 tuneInterval; // frequency of tuning\\n        uint8 quoteDecimals; // decimals of quote token\\n    }\\n\\n    // Control variable adjustment data\\n    struct Adjustment {\\n        uint64 change;\\n        uint48 lastAdjustment;\\n        uint48 timeToAdjusted;\\n        bool active;\\n    }\\n\\n    // user's bond info\\n    struct UserBond {\\n        uint256 finalPayout;\\n        uint256 expiry;\\n        uint256 index;\\n    }\\n\\n    struct ControlDecay {\\n        uint64 decay; // change in control variable\\n        uint48 secondsSince; // seconds since last change in control variable\\n        bool active; // whether or not change remains active\\n    }\\n\\n    /**\\n     * @notice deposit market\\n     * @param _bid uint256\\n     * @param _amount uint256\\n     * @param _maxPrice uint256\\n     * @param _user address\\n     * @param _referral address\\n     * @return userBond_ UserBond\\n     */\\n    function deposit(\\n        uint256 _bid,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    ) external returns (UserBond memory userBond_);\\n\\n    function create(\\n        IERC20 _quoteToken, // token used to deposit\\n        uint256[3] memory _market, // [capacity, initial price]\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\n        uint256[2] memory _terms, // [vesting, conclusion]\\n        uint32[2] memory _intervals // [deposit interval, tune interval]\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\n\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\n\\n    function debtRatio(uint256 _bid) external view returns (uint256);\\n\\n    function debtDecay(uint256 _bid) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd29ad3151a8150075e2ecd78f5042eeaf0b7d94ce6f9b24ad54a178c2d372b1e\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2ERC20 {\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    function name() external pure returns (string memory);\\n\\n    function symbol() external pure returns (string memory);\\n\\n    function decimals() external pure returns (uint8);\\n\\n    function totalSupply() external view returns (uint256);\\n\\n    function balanceOf(address owner) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 value\\n    ) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n\\n    function nonces(address owner) external view returns (uint256);\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n}\\n\",\"keccak256\":\"0xc1d7705a0adebcd7174f2b62b3e87ec71200d2dbfb84cf9beb80a7c4f2c42061\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint256);\\n\\n    function feeTo() external view returns (address);\\n\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n\\n    function allPairs(uint256) external view returns (address pair);\\n\\n    function allPairsLength() external view returns (uint256);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0x4aa34da1fbd7396335cb31393b5375e2bd6a087be9ea7ebf6f7e66746a7cfd2d\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"./IUniswapV2ERC20.sol\\\";\\n\\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\\n    function token0() external pure returns (address);\\n\\n    function token1() external pure returns (address);\\n\\n    function swap(\\n        uint256 amount0Out,\\n        uint256 amount1Out,\\n        address to,\\n        bytes calldata data\\n    ) external;\\n\\n    function getReserves()\\n        external\\n        view\\n        returns (\\n            uint112 reserve0,\\n            uint112 reserve1,\\n            uint32 blockTimestampLast\\n        );\\n\\n    function mint(address to) external returns (uint256 liquidity);\\n\\n    function sync() external;\\n}\\n\",\"keccak256\":\"0xefb1ab7f6fb01b7a1a42afe487440a00766193481f12464c62ae56b77ecb16d5\",\"license\":\"MIT\"},\"contracts/interfaces/IUniswapV2Router.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IUniswapV2Router {\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256[] memory amounts);\\n\\n    function addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 amountADesired,\\n        uint256 amountBDesired,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    )\\n        external\\n        returns (\\n            uint256 amountA,\\n            uint256 amountB,\\n            uint256 liquidity\\n        );\\n\\n    function removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint256 liquidity,\\n        uint256 amountAMin,\\n        uint256 amountBMin,\\n        address to,\\n        uint256 deadline\\n    ) external returns (uint256 amountA, uint256 amountB);\\n}\\n\",\"keccak256\":\"0xc1e104f4e4069a9b7cbb8bcc6525de54274874225f0320470b970d9455229f33\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n\\n    function totalSupply() external;\\n\\n    function approve(address guy, uint256 wad) external;\\n\\n    function transfer(address dst, uint256 wad) external;\\n\\n    function transferFrom(\\n        address src,\\n        address dst,\\n        uint256 wad\\n    ) external;\\n\\n    function balanceOf(address user) external view returns (uint256);\\n\\n    function allowance(address owner, address spender) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x2c05e0c03e9813e9064add83c45c1d14779933f6223077fb45ab345b319bce51\",\"license\":\"MIT\"},\"contracts/libraries/Babylonian.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nlibrary Babylonian {\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n        // else z = 0\\n    }\\n}\\n\",\"keccak256\":\"0x2bb98466ec6c327a94e7998ba71cc131099bd20e30b8643c2d97ca4de3f947b9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526001805460ff60a01b19169055600280546001600160a01b0319167310ed43c718714eb63d5aa57b78b54704e256024e17905534801561004357600080fd5b5061004d3361005f565b6000805460ff60a01b191690556100af565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b61239e806100be6000396000f3fe6080604052600436106100cb5760003560e01c80638456cb5911610074578063e122e2071161004e578063e122e20714610253578063f2fde38b14610266578063f3fef3a31461028657600080fd5b80638456cb59146102005780638da5cb5b14610215578063c28083b31461023357600080fd5b806362823dda116100a557806362823dda146101a9578063715018a6146101ca57806375f12b21146101df57600080fd5b806320740e9a1461012c5780633f4ba83a146101695780635c975abb1461017e57600080fd5b3661012757333214156101255760405162461bcd60e51b815260206004820152601860248201527f446f206e6f742073656e6420424e42206469726563746c79000000000000000060448201526064015b60405180910390fd5b005b600080fd5b34801561013857600080fd5b5060015461014c906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561017557600080fd5b506101256102a6565b34801561018a57600080fd5b50600054600160a01b900460ff165b6040519015158152602001610160565b6101bc6101b7366004611e85565b6102b8565b604051908152602001610160565b3480156101d657600080fd5b50610125610438565b3480156101eb57600080fd5b5060015461019990600160a01b900460ff1681565b34801561020c57600080fd5b5061012561044a565b34801561022157600080fd5b506000546001600160a01b031661014c565b34801561023f57600080fd5b5061012561024e366004611f4a565b61045a565b6101bc610261366004611f67565b610491565b34801561027257600080fd5b50610125610281366004611f4a565b6105bb565b34801561029257600080fd5b506101256102a136600461200c565b61064b565b6102ae6106c9565b6102b6610723565b565b60006102c2610778565b60006102cf8c8a886107d2565b905060006102e08d8d848b8f6109e1565b6001549091506102fb908d906001600160a01b031683610a7c565b600154604051633e3b855760e11b81526004810186905260248101839052604481018790523360648201526001600160a01b0388811660848301526000921690637c770aae9060a4016060604051808303816000875af1158015610363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103879190612038565b905089816000015110156103dd5760405162461bcd60e51b815260206004820152600d60248201527f4869676820536c69707061676500000000000000000000000000000000000000604482015260640161011c565b8051604080519182526001600160a01b0389811660208401528f169133917fb3cfe798a3d4ba15a66c461fdde35fa00e946f2177bd2f068a39c966558df6ff910160405180910390a3519d9c50505050505050505050505050565b6104406106c9565b6102b66000610aa5565b6104526106c9565b6102b6610b02565b6104626106c9565b6001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b600061049b610778565b60006104a88a88886107d2565b905060006104b78b838b610b45565b6001549091506104d2908b906001600160a01b031683610a7c565b600154604051633e3b855760e11b81526004810186905260248101839052604481018790523360648201526001600160a01b0388811660848301526000921690637c770aae9060a4016060604051808303816000875af115801561053a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055e9190612038565b8051604080519182526001600160a01b038a81166020840152929350918d169133917fb3cfe798a3d4ba15a66c461fdde35fa00e946f2177bd2f068a39c966558df6ff910160405180910390a3519b9a5050505050505050505050565b6105c36106c9565b6001600160a01b03811661063f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161011c565b61064881610aa5565b50565b6106536106c9565b60405163a9059cbb60e01b8152336004820152602481018290526001600160a01b0383169063a9059cbb906044016020604051808303816000875af11580156106a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c49190612094565b505050565b6000546001600160a01b031633146102b65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161011c565b61072b610d20565b6000805460ff60a01b191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b600054600160a01b900460ff16156102b65760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a2070617573656400000000000000000000000000000000604482015260640161011c565b60006001600160a01b03841661083957600034116108325760405162461bcd60e51b815260206004820152600b60248201527f4e6f20424e422073656e74000000000000000000000000000000000000000000604482015260640161011c565b50346109da565b600083116108895760405162461bcd60e51b815260206004820152601460248201527f496e76616c696420746f6b656e20616d6f756e74000000000000000000000000604482015260640161011c565b34156108d75760405162461bcd60e51b815260206004820152601360248201527f424e422073656e74207769746820746f6b656e00000000000000000000000000604482015260640161011c565b81156109c257333b6109515760405162461bcd60e51b815260206004820152602c60248201527f4552523a2073686f756c6453656c6c456e7469726542616c616e63652069732060448201527f7472756520666f7220454f410000000000000000000000000000000000000000606482015260840161011c565b604051636eb1769f60e11b81523360048201523060248201526001600160a01b0385169063dd62ed3e90604401602060405180830381865afa15801561099b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109bf91906120b1565b92505b6109d76001600160a01b038516333086610d79565b50815b9392505050565b60008060008060006109f289610e17565b91509150816001600160a01b03168a6001600160a01b031614158015610a2a5750806001600160a01b03168a6001600160a01b031614155b15610a4557610a3b8a8a8a89610eed565b9094509250610a4c565b8992508793505b600080610a5b85858589611341565b91509150610a6c848484848d611500565b9c9b505050505050505050505050565b610a916001600160a01b038416836000611658565b6106c46001600160a01b0384168383611658565b600080546001600160a01b0383811673ffffffffffffffffffffffffffffffffffffffff19831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b610b0a610778565b6000805460ff60a01b1916600160a01b1790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a25861075b3390565b6000806001600160a01b038516610bda5773bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c6001600160a01b031663d0e30db0856040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ba557600080fd5b505af1158015610bb9573d6000803e3d6000fd5b505050505073bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c9050610bdd565b50835b600254610bf59082906001600160a01b031686610a7c565b8083600081518110610c0957610c096120ca565b6001600160a01b0392831660209182029290920101526002546040516338ed173960e01b815260009291909116906338ed173990610c5890889060019089903090600f60fc1b906004016120e0565b6000604051808303816000875af1158015610c77573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c9f9190810190612151565b60018551610cad91906121ed565b81518110610cbd57610cbd6120ca565b6020026020010151905060008111610d175760405162461bcd60e51b815260206004820152601760248201527f4572726f72205377617070696e6720546f6b656e732031000000000000000000604482015260640161011c565b95945050505050565b600054600160a01b900460ff166102b65760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f7420706175736564000000000000000000000000604482015260640161011c565b6040516001600160a01b0380851660248301528316604482015260648101829052610e119085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611774565b50505050565b6000806000839050806001600160a01b0316630dfe16816040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e819190612204565b9250806001600160a01b031663d21220a76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee59190612204565b915050915091565b600080806001600160a01b038716610f835773bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c6001600160a01b031663d0e30db0866040518263ffffffff1660e01b81526004016000604051808303818588803b158015610f4e57600080fd5b505af1158015610f62573d6000803e3d6000fd5b505050505073bb4cdb9cbd36b01bd1cbaebf2de08d9173bc095c9050610f86565b50855b600254610f9e9082906001600160a01b031687610a7c565b600080610faa88610e17565b6040516370a0823160e01b81523060048201529193509150829082906000906001600160a01b038416906370a0823190602401602060405180830381865afa158015610ffa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101e91906120b1565b6040516370a0823160e01b81523060048201529091506000906001600160a01b038416906370a0823190602401602060405180830381865afa158015611068573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061108c91906120b1565b9050868a6000815181106110a2576110a26120ca565b60200260200101906001600160a01b031690816001600160a01b0316815250506000600260009054906101000a90046001600160a01b03166001600160a01b03166338ed17398d60018e30600f60fc1b6040518663ffffffff1660e01b81526004016111129594939291906120e0565b6000604051808303816000875af1158015611131573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526111599190810190612151565b60018c5161116791906121ed565b81518110611177576111776120ca565b60200260200101519050600081116111d15760405162461bcd60e51b815260206004820152601760248201527f4572726f72205377617070696e6720546f6b656e732031000000000000000000604482015260640161011c565b6040516370a0823160e01b815230600482015260009084906001600160a01b038816906370a0823190602401602060405180830381865afa15801561121a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061123e91906120b1565b61124891906121ed565b6040516370a0823160e01b815230600482015290915060009084906001600160a01b038816906370a0823190602401602060405180830381865afa158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b891906120b1565b6112c291906121ed565b9050808211156112d757819b50889a506112de565b809b50879a505b60008c1161132e5760405162461bcd60e51b815260206004820152601f60248201527f5377617070656420746f20496e76616c696420496e7465726d65646961746500604482015260640161011c565b5050505050505050505094509492505050565b60405163e6a4390560e01b81526001600160a01b038085166004830152831660248201526000908190819073ca143ce32fe78f1f7019d7d551a6402fc5350c739063e6a4390590604401602060405180830381865afa1580156113a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cc9190612204565b9050600080826001600160a01b0316630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561140f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611433919061223f565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff169150876001600160a01b0316896001600160a01b031614156114b557600061147e8388611859565b9050600081116114965761149360028861228f565b90505b6114a18a89836118b6565b94506114ad81886121ed565b9550506114f4565b60006114c18288611859565b9050600081116114d9576114d660028861228f565b90505b6114e48a8a836118b6565b95506114f081886121ed565b9450505b50505094509492505050565b60025460009061151b9087906001600160a01b031686610a7c565b6002546115339086906001600160a01b031685610a7c565b60025460405162e8e33760e81b81526001600160a01b0388811660048301528781166024830152604482018790526064820186905260016084830181905260a48301523060c4830152600f60fc1b60e4830152600092839283929091169063e8e3370090610104016060604051808303816000875af11580156115ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115de91906122b1565b925092509250841561164c5760006115f684896121ed565b111561161b5761161b3361160a858a6121ed565b6001600160a01b038c169190611b4b565b600061162783886121ed565b111561164c5761164c3361163b84896121ed565b6001600160a01b038b169190611b4b565b98975050505050505050565b8015806116d25750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156116ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116d091906120b1565b155b6117445760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e636500000000000000000000606482015260840161011c565b6040516001600160a01b0383166024820152604481018290526106c490849063095ea7b360e01b90606401610dad565b60006117c9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611b7b9092919063ffffffff16565b8051909150156106c457808060200190518101906117e79190612094565b6106c45760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161011c565b6000614dee61186a84614e076122df565b6118a261187b866317c844316122df565b611889866317c841c06122df565b61189391906122fe565b61189d90876122df565b611b92565b6118ac91906121ed565b6109da919061228f565b6000826001600160a01b0316846001600160a01b031614156118d95750806109da565b6002546118f19085906001600160a01b031684610a7c565b60405163e6a4390560e01b81526001600160a01b0380861660048301528416602482015260009073ca143ce32fe78f1f7019d7d551a6402fc5350c739063e6a4390590604401602060405180830381865afa158015611954573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119789190612204565b90506001600160a01b0381166119d05760405162461bcd60e51b815260206004820152601160248201527f4e6f205377617020417661696c61626c65000000000000000000000000000000604482015260640161011c565b6040805160028082526060820183526000926020830190803683370190505090508581600081518110611a0557611a056120ca565b60200260200101906001600160a01b031690816001600160a01b0316815250508481600181518110611a3957611a396120ca565b6001600160a01b0392831660209182029290920101526002546040516338ed173960e01b81529116906338ed173990611a8390879060019086903090600f60fc1b906004016120e0565b6000604051808303816000875af1158015611aa2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611aca9190810190612151565b60018251611ad891906121ed565b81518110611ae857611ae86120ca565b6020026020010151925060008311611b425760405162461bcd60e51b815260206004820152601760248201527f4572726f72205377617070696e6720546f6b656e732032000000000000000000604482015260640161011c565b50509392505050565b6040516001600160a01b0383166024820152604481018290526106c490849063a9059cbb60e01b90606401610dad565b6060611b8a8484600085611c02565b949350505050565b60006003821115611bf35750806000611bac60028361228f565b611bb79060016122fe565b90505b81811015611bed57905080600281611bd2818661228f565b611bdc91906122fe565b611be6919061228f565b9050611bba565b50919050565b8115611bfd575060015b919050565b606082471015611c7a5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161011c565b6001600160a01b0385163b611cd15760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161011c565b600080866001600160a01b03168587604051611ced9190612342565b60006040518083038185875af1925050503d8060008114611d2a576040519150601f19603f3d011682016040523d82523d6000602084013e611d2f565b606091505b5091509150611d3f828286611d4a565b979650505050505050565b60608315611d595750816109da565b825115611d695782518084602001fd5b8160405162461bcd60e51b815260040161011c919061235e565b6001600160a01b038116811461064857600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611dd757611dd7611d98565b604052919050565b600067ffffffffffffffff821115611df957611df9611d98565b5060051b60200190565b600082601f830112611e1457600080fd5b81356020611e29611e2483611ddf565b611dae565b82815260059290921b84018101918181019086841115611e4857600080fd5b8286015b84811015611e6c578035611e5f81611d83565b8352918301918301611e4c565b509695505050505050565b801515811461064857600080fd5b6000806000806000806000806000806101408b8d031215611ea557600080fd5b8a35611eb081611d83565b995060208b0135611ec081611d83565b985060408b013567ffffffffffffffff811115611edc57600080fd5b611ee88d828e01611e03565b98505060608b0135965060808b0135955060a08b0135611f0781611e77565b945060c08b0135611f1781611e77565b935060e08b0135611f2781611d83565b809350506101008b013591506101208b013590509295989b9194979a5092959850565b600060208284031215611f5c57600080fd5b81356109da81611d83565b600080600080600080600080610100898b031215611f8457600080fd5b8835611f8f81611d83565b97506020890135611f9f81611d83565b9650604089013567ffffffffffffffff811115611fbb57600080fd5b611fc78b828c01611e03565b965050606089013594506080890135611fdf81611e77565b935060a0890135611fef81611d83565b979a969950949793969295929450505060c08201359160e0013590565b6000806040838503121561201f57600080fd5b823561202a81611d83565b946020939093013593505050565b60006060828403121561204a57600080fd5b6040516060810181811067ffffffffffffffff8211171561206d5761206d611d98565b80604052508251815260208301516020820152604083015160408201528091505092915050565b6000602082840312156120a657600080fd5b81516109da81611e77565b6000602082840312156120c357600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b600060a082018783526020878185015260a0604085015281875180845260c086019150828901935060005b818110156121305784516001600160a01b03168352938301939183019160010161210b565b50506001600160a01b03969096166060850152505050608001529392505050565b6000602080838503121561216457600080fd5b825167ffffffffffffffff81111561217b57600080fd5b8301601f8101851361218c57600080fd5b805161219a611e2482611ddf565b81815260059190911b820183019083810190878311156121b957600080fd5b928401925b82841015611d3f578351825292840192908401906121be565b634e487b7160e01b600052601160045260246000fd5b6000828210156121ff576121ff6121d7565b500390565b60006020828403121561221657600080fd5b81516109da81611d83565b80516dffffffffffffffffffffffffffff81168114611bfd57600080fd5b60008060006060848603121561225457600080fd5b61225d84612221565b925061226b60208501612221565b9150604084015163ffffffff8116811461228457600080fd5b809150509250925092565b6000826122ac57634e487b7160e01b600052601260045260246000fd5b500490565b6000806000606084860312156122c657600080fd5b8351925060208401519150604084015190509250925092565b60008160001904831182151516156122f9576122f96121d7565b500290565b60008219821115612311576123116121d7565b500190565b60005b83811015612331578181015183820152602001612319565b83811115610e115750506000910152565b60008251612354818460208701612316565b9190910192915050565b602081526000825180602084015261237d816040850160208701612316565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "updateDepo(address)": {
        "notice": "update state for depo"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/HectagonQuickBond.sol:HectagonQuickBond",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 298,
        "contract": "contracts/HectagonQuickBond.sol:HectagonQuickBond",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6766,
        "contract": "contracts/HectagonQuickBond.sol:HectagonQuickBond",
        "label": "depo",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 6769,
        "contract": "contracts/HectagonQuickBond.sol:HectagonQuickBond",
        "label": "stopped",
        "offset": 20,
        "slot": "1",
        "type": "t_bool"
      },
      {
        "astId": 6781,
        "contract": "contracts/HectagonQuickBond.sol:HectagonQuickBond",
        "label": "pancakeswapRouter",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IUniswapV2Router)9006"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IUniswapV2Router)9006": {
        "encoding": "inplace",
        "label": "contract IUniswapV2Router",
        "numberOfBytes": "20"
      }
    }
  }
}