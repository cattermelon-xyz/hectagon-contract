{
  "address": "0x5E91C79231a9b6c90f546617BA796B4ca30b48Eb",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IHectagonAuthority",
          "name": "_authority",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_hecta",
          "type": "address"
        },
        {
          "internalType": "contract IgHECTA",
          "name": "_gHecta",
          "type": "address"
        },
        {
          "internalType": "contract ITreasury",
          "name": "_treasury",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IHectagonAuthority",
          "name": "authority",
          "type": "address"
        }
      ],
      "name": "AuthorityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "noteId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "referral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "commission",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toBuyer",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toDaoCommunity",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "toDaoInvestment",
          "type": "uint256"
        }
      ],
      "name": "Bond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "CloseMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "baseToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        }
      ],
      "name": "CreateMarket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "oldControlVariable",
          "type": "uint64"
        },
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "newControlVariable",
          "type": "uint64"
        }
      ],
      "name": "Tuned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "adjustments",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "change",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "lastAdjustment",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "timeToAdjusted",
          "type": "uint48"
        },
        {
          "internalType": "bool",
          "name": "active",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "authority",
      "outputs": [
        {
          "internalType": "contract IHectagonAuthority",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "close",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_quoteToken",
          "type": "address"
        },
        {
          "internalType": "uint256[3]",
          "name": "_market",
          "type": "uint256[3]"
        },
        {
          "internalType": "bool[2]",
          "name": "_booleans",
          "type": "bool[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "_terms",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint32[2]",
          "name": "_intervals",
          "type": "uint32[2]"
        }
      ],
      "name": "create",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentControlVariable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "currentDebt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoCommunityPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "daoInvestmentPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtDecay",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "debtRatio",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxPrice",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_referral",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "finalPayout",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiry",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "internalType": "struct IBondDepository.UserBond",
          "name": "userBond_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "indexesFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "isLive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liveMarkets",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "liveMarketsFor",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "marketPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "capacity",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "capacityInQuote",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "totalDebt",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "maxPayout",
          "type": "uint64"
        },
        {
          "internalType": "uint64",
          "name": "sold",
          "type": "uint64"
        },
        {
          "internalType": "uint256",
          "name": "purchased",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "marketsForQuote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "metadata",
      "outputs": [
        {
          "internalType": "uint48",
          "name": "lastTune",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "lastDecay",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "length",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "depositInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "tuneInterval",
          "type": "uint48"
        },
        {
          "internalType": "uint8",
          "name": "quoteDecimals",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "notes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout",
          "type": "uint256"
        },
        {
          "internalType": "uint48",
          "name": "created",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "matured",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "redeemed",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "marketID",
          "type": "uint48"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "partnerTermCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "partnerTerms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "percent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "payoutCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_id",
          "type": "uint256"
        }
      ],
      "name": "payoutFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pendingFor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "payout_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "matured_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pullNote",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "newIndex_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_index",
          "type": "uint256"
        }
      ],
      "name": "pushNote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_indexes",
          "type": "uint256[]"
        },
        {
          "internalType": "bool",
          "name": "_unstake",
          "type": "bool"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_unstake",
          "type": "bool"
        }
      ],
      "name": "redeemAll",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "referTermCap",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "referTerms",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "referrerPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyerPercent",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IHectagonAuthority",
          "name": "_newAuthority",
          "type": "address"
        }
      ],
      "name": "setAuthority",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "daoInvestmentPercent_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "daoCommunityPercent_",
          "type": "uint256"
        }
      ],
      "name": "setDaoRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_partner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_percent",
          "type": "uint256"
        }
      ],
      "name": "setPartnerTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setPartnerTermCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "payoutCap_",
          "type": "uint256"
        }
      ],
      "name": "setPayoutCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_referrer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_referrerPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_buyerPercent",
          "type": "uint256"
        }
      ],
      "name": "setReferTerm",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_cap",
          "type": "uint256"
        }
      ],
      "name": "setReferTermCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "terms",
      "outputs": [
        {
          "internalType": "bool",
          "name": "fixedTerm",
          "type": "bool"
        },
        {
          "internalType": "uint64",
          "name": "controlVariable",
          "type": "uint64"
        },
        {
          "internalType": "uint48",
          "name": "vesting",
          "type": "uint48"
        },
        {
          "internalType": "uint48",
          "name": "conclusion",
          "type": "uint48"
        },
        {
          "internalType": "uint64",
          "name": "maxDebt",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalPayout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateTreasury",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x3dc843d5fae3f2a837462c696fa05b4468d8f2256af2ad9f454793a0dee8f282",
  "receipt": {
    "to": null,
    "from": "0x8703d1C3cd670dd678ddFacA1e98237f6a342C3C",
    "contractAddress": "0x5E91C79231a9b6c90f546617BA796B4ca30b48Eb",
    "transactionIndex": 2,
    "gasUsed": "4498866",
    "logsBloom": "0x
    "blockHash": "0x3a5870ebac60ef4fb46d265d6e10d1671cbcf05a995b349edd109f714d682038",
    "transactionHash": "0x3dc843d5fae3f2a837462c696fa05b4468d8f2256af2ad9f454793a0dee8f282",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 21566664,
        "transactionHash": "0x3dc843d5fae3f2a837462c696fa05b4468d8f2256af2ad9f454793a0dee8f282",
        "address": "0x5E91C79231a9b6c90f546617BA796B4ca30b48Eb",
        "topics": [
          "0x2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad",
          "0x000000000000000000000000173ab5e87b593f68d2bc469554463ffefaa61c1d"
        ],
        "data": "0x",
        "logIndex": 6,
        "blockHash": "0x3a5870ebac60ef4fb46d265d6e10d1671cbcf05a995b349edd109f714d682038"
      },
      {
        "transactionIndex": 2,
        "blockNumber": 21566664,
        "transactionHash": "0x3dc843d5fae3f2a837462c696fa05b4468d8f2256af2ad9f454793a0dee8f282",
        "address": "0x1409e3889287eb45FcF2BF99F59A5d689CdF339e",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x0000000000000000000000005e91c79231a9b6c90f546617ba796b4ca30b48eb",
          "0x0000000000000000000000008724bfbec2868cefc4849a2c3359e322415e4054"
        ],
        "data": "0x000000000000000000000000002cd76fe086b93ce2f768a00b22a00000000000",
        "logIndex": 7,
        "blockHash": "0x3a5870ebac60ef4fb46d265d6e10d1671cbcf05a995b349edd109f714d682038"
      }
    ],
    "blockNumber": 21566664,
    "cumulativeGasUsed": "5210976",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x173Ab5e87B593f68d2BC469554463FfeFAa61C1d",
    "0x1409e3889287eb45FcF2BF99F59A5d689CdF339e",
    "0x8724bFBEc2868CEFc4849A2c3359e322415E4054",
    "0x1Bd552B08B9D7ee239eBbAE747d210aEAA598620"
  ],
  "solcInputHash": "324cd8bf7a6832202abf9a0d2c64407f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.10+commit.fc410830\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IHectagonAuthority\",\"name\":\"_authority\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_hecta\",\"type\":\"address\"},{\"internalType\":\"contract IgHECTA\",\"name\":\"_gHecta\",\"type\":\"address\"},{\"internalType\":\"contract ITreasury\",\"name\":\"_treasury\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IHectagonAuthority\",\"name\":\"authority\",\"type\":\"address\"}],\"name\":\"AuthorityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"noteId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"referral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"commission\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toBuyer\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toDaoCommunity\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"toDaoInvestment\",\"type\":\"uint256\"}],\"name\":\"Bond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"CloseMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"baseToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"}],\"name\":\"CreateMarket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"oldControlVariable\",\"type\":\"uint64\"},{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"newControlVariable\",\"type\":\"uint64\"}],\"name\":\"Tuned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"adjustments\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"change\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"lastAdjustment\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"timeToAdjusted\",\"type\":\"uint48\"},{\"internalType\":\"bool\",\"name\":\"active\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"authority\",\"outputs\":[{\"internalType\":\"contract IHectagonAuthority\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"close\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_quoteToken\",\"type\":\"address\"},{\"internalType\":\"uint256[3]\",\"name\":\"_market\",\"type\":\"uint256[3]\"},{\"internalType\":\"bool[2]\",\"name\":\"_booleans\",\"type\":\"bool[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"_terms\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint32[2]\",\"name\":\"_intervals\",\"type\":\"uint32[2]\"}],\"name\":\"create\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentControlVariable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"currentDebt\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoCommunityPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"daoInvestmentPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtDecay\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"debtRatio\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxPrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_referral\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"finalPayout\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiry\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"internalType\":\"struct IBondDepository.UserBond\",\"name\":\"userBond_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"indexesFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"isLive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liveMarkets\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"liveMarketsFor\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"marketPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"capacity\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"capacityInQuote\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"totalDebt\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"maxPayout\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"sold\",\"type\":\"uint64\"},{\"internalType\":\"uint256\",\"name\":\"purchased\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"marketsForQuote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"metadata\",\"outputs\":[{\"internalType\":\"uint48\",\"name\":\"lastTune\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"lastDecay\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"length\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"depositInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"tuneInterval\",\"type\":\"uint48\"},{\"internalType\":\"uint8\",\"name\":\"quoteDecimals\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"notes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout\",\"type\":\"uint256\"},{\"internalType\":\"uint48\",\"name\":\"created\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"matured\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"redeemed\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"marketID\",\"type\":\"uint48\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"partnerTermCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"partnerTerms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"percent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_id\",\"type\":\"uint256\"}],\"name\":\"payoutFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pendingFor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"payout_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"matured_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pullNote\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"newIndex_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"pushNote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_indexes\",\"type\":\"uint256[]\"},{\"internalType\":\"bool\",\"name\":\"_unstake\",\"type\":\"bool\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_unstake\",\"type\":\"bool\"}],\"name\":\"redeemAll\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"referTermCap\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"referTerms\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"referrerPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyerPercent\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IHectagonAuthority\",\"name\":\"_newAuthority\",\"type\":\"address\"}],\"name\":\"setAuthority\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"daoInvestmentPercent_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"daoCommunityPercent_\",\"type\":\"uint256\"}],\"name\":\"setDaoRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_partner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_percent\",\"type\":\"uint256\"}],\"name\":\"setPartnerTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setPartnerTermCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"payoutCap_\",\"type\":\"uint256\"}],\"name\":\"setPayoutCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_referrer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_referrerPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_buyerPercent\",\"type\":\"uint256\"}],\"name\":\"setReferTerm\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_cap\",\"type\":\"uint256\"}],\"name\":\"setReferTermCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"terms\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"fixedTerm\",\"type\":\"bool\"},{\"internalType\":\"uint64\",\"name\":\"controlVariable\",\"type\":\"uint64\"},{\"internalType\":\"uint48\",\"name\":\"vesting\",\"type\":\"uint48\"},{\"internalType\":\"uint48\",\"name\":\"conclusion\",\"type\":\"uint48\"},{\"internalType\":\"uint64\",\"name\":\"maxDebt\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalPayout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateTreasury\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"close(uint256)\":{\"params\":{\"_id\":\"ID of market to close\"}},\"create(address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"details\":\"current price should be in 9 decimals.\",\"params\":{\"_booleans\":\"[capacity in quote, fixed term]\",\"_intervals\":\"[deposit interval (seconds), tune interval (seconds)]\",\"_market\":\"[capacity (in HECTA or quote), initial price / HECTA (9 decimals), debt buffer (3 decimals)]\",\"_quoteToken\":\"token used to deposit\",\"_terms\":\"[vesting length (if fixed term) or vested timestamp, conclusion timestamp]\"},\"returns\":{\"id_\":\"        ID of new bond market\"}},\"currentControlVariable(uint256)\":{\"details\":\"accounts for control variable adjustment\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"control variable for market in HECTA decimals\"}},\"currentDebt(uint256)\":{\"details\":\"accounts for debt decay since last deposit\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"current debt for market in HECTA decimals\"}},\"debtDecay(uint256)\":{\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of debt to decay\"}},\"debtRatio(uint256)\":{\"details\":\"uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"debt ratio for market in quote decimals\"}},\"deposit(uint256,uint256,uint256,address,address)\":{\"params\":{\"_amount\":\"the amount of quote token to spend\",\"_id\":\"the ID of the market\",\"_maxPrice\":\"the maximum price at which to buy\",\"_referral\":\"the front end operator address\",\"_user\":\"the recipient of the payout\"}},\"indexesFor(address)\":{\"params\":{\"_user\":\"the user to query notes for\"},\"returns\":{\"_0\":\"the pending notes for the user\"}},\"isLive(uint256)\":{\"params\":{\"_id\":\"ID of market\"}},\"liveMarketsFor(address)\":{\"params\":{\"_token\":\"quote token to check for\"}},\"marketPrice(uint256)\":{\"details\":\"accounts for debt and control variable decay since last deposit (vs _marketPrice())\",\"params\":{\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"price for market in HECTA decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program\"}},\"payoutFor(uint256,uint256)\":{\"details\":\"accounts for debt and control variable decay so it is up to date1e18 = hecta decimals (9) + market price decimals (9)\",\"params\":{\"_amount\":\"amount of quote tokens to spend\",\"_id\":\"ID of market\"},\"returns\":{\"_0\":\"amount of HECTA to be paid in HECTA decimals\"}},\"pendingFor(address,uint256)\":{\"params\":{\"_index\":\"the index of the note in the user's array\",\"_user\":\"the user that the note belongs to\"},\"returns\":{\"matured_\":\"   if the payout can be redeemed\",\"payout_\":\"    the payout due, in gHecta\"}},\"pullNote(address,uint256)\":{\"params\":{\"_from\":\"the address that approved the note transfer\",\"_index\":\"the index of the note to transfer (in the sender's array)\"}},\"pushNote(address,uint256)\":{\"params\":{\"_index\":\"index of note to approve transfer for\",\"_to\":\"address to approve note transfer for\"}},\"redeem(address,uint256[],bool)\":{\"params\":{\"_indexes\":\"the note indexes to redeem\",\"_unstake\":\"option for redeem gHecta or Hecta\",\"_user\":\"the user to redeem for\"},\"returns\":{\"_0\":\"sum of payout sent, in gHecta or Hecta\"}},\"redeemAll(address,bool)\":{\"details\":\"if possible, query indexesFor() off-chain and input in redeem() to save gas\",\"params\":{\"_unstake\":\"option for redeem gHecta or Hecta\",\"_user\":\"user to redeem all notes for\"},\"returns\":{\"_0\":\"sum of payout sent, in gHecta or Hecta\"}},\"setPayoutCap(uint256)\":{\"params\":{\"payoutCap_\":\"ID of market to close\"}}},\"title\":\"Hectagon Bond Depository\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"close(uint256)\":{\"notice\":\"disable existing market\"},\"create(address,uint256[3],bool[2],uint256[2],uint32[2])\":{\"notice\":\"creates a new market type\"},\"currentControlVariable(uint256)\":{\"notice\":\"up to date control variable\"},\"currentDebt(uint256)\":{\"notice\":\"calculate debt factoring in decay\"},\"debtDecay(uint256)\":{\"notice\":\"amount of debt to decay from total debt for market ID\"},\"debtRatio(uint256)\":{\"notice\":\"calculate current ratio of debt to supply\"},\"deposit(uint256,uint256,uint256,address,address)\":{\"notice\":\"deposit quote tokens in exchange for a bond from a specified market\"},\"indexesFor(address)\":{\"notice\":\"all pending notes for user\"},\"isLive(uint256)\":{\"notice\":\"is a given market accepting deposits\"},\"liveMarkets()\":{\"notice\":\"returns an array of all active market IDs\"},\"liveMarketsFor(address)\":{\"notice\":\"returns an array of all active market IDs for a given quote token\"},\"marketPrice(uint256)\":{\"notice\":\"calculate current market price of quote token in base token\"},\"payoutFor(uint256,uint256)\":{\"notice\":\"payout due for amount of quote tokens\"},\"pendingFor(address,uint256)\":{\"notice\":\"calculate amount available for claim for a single note\"},\"pullNote(address,uint256)\":{\"notice\":\"transfer a note that has been approved by an address\"},\"pushNote(address,uint256)\":{\"notice\":\"approve an address to transfer a note\"},\"redeem(address,uint256[],bool)\":{\"notice\":\"redeem notes for user\"},\"redeemAll(address,bool)\":{\"notice\":\"redeem all redeemable markets for user\"},\"setPartnerTerm(address,uint256,uint256)\":{\"notice\":\"set partner term\"},\"setPartnerTermCap(uint256)\":{\"notice\":\"set Cap for referrer % reward\"},\"setPayoutCap(uint256)\":{\"notice\":\"set totalPayoutCap\"},\"setReferTerm(address,uint256,uint256)\":{\"notice\":\"set referrer term\"},\"setReferTermCap(uint256)\":{\"notice\":\"set Cap for referrer % reward\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BondDepository.sol\":\"HectagonBondDepository\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"none\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":800},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC4626.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (interfaces/IERC4626.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\nimport \\\"../token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\n/**\\n * @dev Interface of the ERC4626 \\\"Tokenized Vault Standard\\\", as defined in\\n * https://eips.ethereum.org/EIPS/eip-4626[ERC-4626].\\n *\\n * _Available since v4.7._\\n */\\ninterface IERC4626 is IERC20, IERC20Metadata {\\n    event Deposit(address indexed caller, address indexed owner, uint256 assets, uint256 shares);\\n\\n    event Withdraw(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed owner,\\n        uint256 assets,\\n        uint256 shares\\n    );\\n\\n    /**\\n     * @dev Returns the address of the underlying token used for the Vault for accounting, depositing, and withdrawing.\\n     *\\n     * - MUST be an ERC-20 token contract.\\n     * - MUST NOT revert.\\n     */\\n    function asset() external view returns (address assetTokenAddress);\\n\\n    /**\\n     * @dev Returns the total amount of the underlying asset that is \\u201cmanaged\\u201d by Vault.\\n     *\\n     * - SHOULD include any compounding that occurs from yield.\\n     * - MUST be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT revert.\\n     */\\n    function totalAssets() external view returns (uint256 totalManagedAssets);\\n\\n    /**\\n     * @dev Returns the amount of shares that the Vault would exchange for the amount of assets provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToShares(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the amount of assets that the Vault would exchange for the amount of shares provided, in an ideal\\n     * scenario where all the conditions are met.\\n     *\\n     * - MUST NOT be inclusive of any fees that are charged against assets in the Vault.\\n     * - MUST NOT show any variations depending on the caller.\\n     * - MUST NOT reflect slippage or other on-chain conditions, when performing the actual exchange.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: This calculation MAY NOT reflect the \\u201cper-user\\u201d price-per-share, and instead should reflect the\\n     * \\u201caverage-user\\u2019s\\u201d price-per-share, meaning what the average user should expect to see when exchanging to and\\n     * from.\\n     */\\n    function convertToAssets(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be deposited into the Vault for the receiver,\\n     * through a deposit call.\\n     *\\n     * - MUST return a limited value if receiver is subject to some deposit limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of assets that may be deposited.\\n     * - MUST NOT revert.\\n     */\\n    function maxDeposit(address receiver) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their deposit at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of Vault shares that would be minted in a deposit\\n     *   call in the same transaction. I.e. deposit should return the same or more shares as previewDeposit if called\\n     *   in the same transaction.\\n     * - MUST NOT account for deposit limits like those returned from maxDeposit and should always act as though the\\n     *   deposit would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewDeposit SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewDeposit(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Mints shares Vault shares to receiver by depositing exactly amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   deposit execution, and are accounted for during deposit.\\n     * - MUST revert if all of assets cannot be deposited (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function deposit(uint256 assets, address receiver) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of the Vault shares that can be minted for the receiver, through a mint call.\\n     * - MUST return a limited value if receiver is subject to some mint limit.\\n     * - MUST return 2 ** 256 - 1 if there is no limit on the maximum amount of shares that may be minted.\\n     * - MUST NOT revert.\\n     */\\n    function maxMint(address receiver) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their mint at the current block, given\\n     * current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of assets that would be deposited in a mint call\\n     *   in the same transaction. I.e. mint should return the same or fewer assets as previewMint if called in the\\n     *   same transaction.\\n     * - MUST NOT account for mint limits like those returned from maxMint and should always act as though the mint\\n     *   would be accepted, regardless if the user has enough tokens approved, etc.\\n     * - MUST be inclusive of deposit fees. Integrators should be aware of the existence of deposit fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewMint SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by minting.\\n     */\\n    function previewMint(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Mints exactly shares Vault shares to receiver by depositing amount of underlying tokens.\\n     *\\n     * - MUST emit the Deposit event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the mint\\n     *   execution, and are accounted for during mint.\\n     * - MUST revert if all of shares cannot be minted (due to deposit limit being reached, slippage, the user not\\n     *   approving enough underlying tokens to the Vault contract, etc).\\n     *\\n     * NOTE: most implementations will require pre-approval of the Vault with the Vault\\u2019s underlying asset token.\\n     */\\n    function mint(uint256 shares, address receiver) external returns (uint256 assets);\\n\\n    /**\\n     * @dev Returns the maximum amount of the underlying asset that can be withdrawn from the owner balance in the\\n     * Vault, through a withdraw call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxWithdraw(address owner) external view returns (uint256 maxAssets);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their withdrawal at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no fewer than the exact amount of Vault shares that would be burned in a withdraw\\n     *   call in the same transaction. I.e. withdraw should return the same or fewer shares as previewWithdraw if\\n     *   called\\n     *   in the same transaction.\\n     * - MUST NOT account for withdrawal limits like those returned from maxWithdraw and should always act as though\\n     *   the withdrawal would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToShares and previewWithdraw SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by depositing.\\n     */\\n    function previewWithdraw(uint256 assets) external view returns (uint256 shares);\\n\\n    /**\\n     * @dev Burns shares from owner and sends exactly assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   withdraw execution, and are accounted for during withdraw.\\n     * - MUST revert if all of assets cannot be withdrawn (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * Note that some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function withdraw(\\n        uint256 assets,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 shares);\\n\\n    /**\\n     * @dev Returns the maximum amount of Vault shares that can be redeemed from the owner balance in the Vault,\\n     * through a redeem call.\\n     *\\n     * - MUST return a limited value if owner is subject to some withdrawal limit or timelock.\\n     * - MUST return balanceOf(owner) if owner is not subject to any withdrawal limit or timelock.\\n     * - MUST NOT revert.\\n     */\\n    function maxRedeem(address owner) external view returns (uint256 maxShares);\\n\\n    /**\\n     * @dev Allows an on-chain or off-chain user to simulate the effects of their redeemption at the current block,\\n     * given current on-chain conditions.\\n     *\\n     * - MUST return as close to and no more than the exact amount of assets that would be withdrawn in a redeem call\\n     *   in the same transaction. I.e. redeem should return the same or more assets as previewRedeem if called in the\\n     *   same transaction.\\n     * - MUST NOT account for redemption limits like those returned from maxRedeem and should always act as though the\\n     *   redemption would be accepted, regardless if the user has enough shares, etc.\\n     * - MUST be inclusive of withdrawal fees. Integrators should be aware of the existence of withdrawal fees.\\n     * - MUST NOT revert.\\n     *\\n     * NOTE: any unfavorable discrepancy between convertToAssets and previewRedeem SHOULD be considered slippage in\\n     * share price or some other type of condition, meaning the depositor will lose assets by redeeming.\\n     */\\n    function previewRedeem(uint256 shares) external view returns (uint256 assets);\\n\\n    /**\\n     * @dev Burns exactly shares from owner and sends assets of underlying tokens to receiver.\\n     *\\n     * - MUST emit the Withdraw event.\\n     * - MAY support an additional flow in which the underlying tokens are owned by the Vault contract before the\\n     *   redeem execution, and are accounted for during redeem.\\n     * - MUST revert if all of shares cannot be redeemed (due to withdrawal limit being reached, slippage, the owner\\n     *   not having enough shares, etc).\\n     *\\n     * NOTE: some implementations will require pre-requesting to the Vault before a withdrawal may be performed.\\n     * Those methods should be performed separately.\\n     */\\n    function redeem(\\n        uint256 shares,\\n        address receiver,\\n        address owner\\n    ) external returns (uint256 assets);\\n}\\n\",\"keccak256\":\"0x9750c6fec736eb3320e85924f36a3060fa4a4ab1758d06d9585e175d164eefdb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/BondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\nimport \\\"./types/NoteKeeper.sol\\\";\\nimport \\\"./interfaces/IBondDepository.sol\\\";\\nimport \\\"./interfaces/IgHECTA.sol\\\";\\n\\n/// @title Hectagon Bond Depository\\n\\ncontract HectagonBondDepository is IBondDepository, NoteKeeper {\\n    /* ======== DEPENDENCIES ======== */\\n\\n    using SafeERC20 for IERC20;\\n\\n    /* ======== EVENTS ======== */\\n\\n    event CreateMarket(uint256 indexed id, address indexed baseToken, address indexed quoteToken, uint256 initialPrice);\\n    event CloseMarket(uint256 indexed id);\\n    event Bond(\\n        uint256 indexed id,\\n        uint256 amount,\\n        uint256 price,\\n        uint256 noteId,\\n        address indexed buyer,\\n        address indexed referral,\\n        uint256 commission,\\n        uint256 toBuyer,\\n        uint256 toDaoCommunity,\\n        uint256 toDaoInvestment\\n    );\\n    event Tuned(uint256 indexed id, uint64 oldControlVariable, uint64 newControlVariable);\\n\\n    /* ======== STATE VARIABLES ======== */\\n\\n    // Storage\\n    Market[] public markets; // persistent market data\\n    Terms[] public terms; // deposit construction data\\n    Metadata[] public metadata; // extraneous market data\\n    mapping(uint256 => Adjustment) public adjustments; // control variable changes\\n\\n    uint256 public totalPayout;\\n    uint256 public payoutCap = 2_000_000 * 1e9;\\n\\n    // Queries\\n    mapping(address => uint256[]) public marketsForQuote; // market IDs for quote token\\n\\n    /* ======== CONSTRUCTOR ======== */\\n\\n    constructor(\\n        IHectagonAuthority _authority,\\n        IERC20 _hecta,\\n        IgHECTA _gHecta,\\n        ITreasury _treasury\\n    ) NoteKeeper(_authority, _hecta, _gHecta, _treasury) {\\n        // save gas for users by bulk approving stake() transactions\\n        _hecta.approve(address(_gHecta), 1e45);\\n    }\\n\\n    /**\\n     * @notice                  set totalPayoutCap\\n     * @param payoutCap_   ID of market to close\\n     */\\n    function setPayoutCap(uint256 payoutCap_) external onlyGovernor {\\n        payoutCap = payoutCap_;\\n    }\\n\\n    /* ======== DEPOSIT ======== */\\n\\n    /**\\n     * @notice              deposit quote tokens in exchange for a bond from a specified market\\n     * @param _id           the ID of the market\\n     * @param _amount       the amount of quote token to spend\\n     * @param _maxPrice     the maximum price at which to buy\\n     * @param _user         the recipient of the payout\\n     * @param _referral     the front end operator address\\n     */\\n    function deposit(\\n        uint256 _id,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    ) external override returns (UserBond memory userBond_) {\\n        Give memory give; // Give struct inherited fom FrontEndRewarder\\n        Market storage market = markets[_id];\\n        Terms memory term = terms[_id];\\n        uint48 currentTime = uint48(block.timestamp);\\n\\n        // Markets end at a defined timestamp\\n        // |-------------------------------------| t\\n        require(currentTime < term.conclusion, \\\"Depository: market concluded\\\");\\n\\n        // Debt and the control variable decay over time\\n        _decay(_id, currentTime);\\n\\n        // Users input a maximum price, which protects them from price changes after\\n        // entering the mempool. max price is a slippage mitigation measure\\n        uint256 price = _marketPrice(_id);\\n        require(price <= _maxPrice, \\\"Depository: more than max price\\\");\\n\\n        /**\\n         * payout for the deposit = amount / price\\n         *\\n         * where\\n         * payout = HECTA out\\n         * amount = quote tokens in\\n         * price = quote tokens : hecta (i.e. 42069 DAI : HECTA)\\n         *\\n         * 1e18 = HECTA decimals (9) + price decimals (9)\\n         */\\n        uint256 payout_ = ((_amount * 1e18) / price) / (10**metadata[_id].quoteDecimals);\\n\\n        // markets have a max payout amount, capping size because deposits\\n        // do not experience slippage. max payout is recalculated upon tuning\\n        require(payout_ <= market.maxPayout, \\\"Depository: max size exceeded\\\");\\n        require((totalPayout + payout_) <= payoutCap, \\\"Depository: total payout hit payout cap\\\");\\n\\n        /*\\n         * each market is initialized with a capacity\\n         *\\n         * this is either the number of HECTA that the market can sell\\n         * (if capacity in quote is false),\\n         *\\n         * or the number of quote tokens that the market can buy\\n         * (if capacity in quote is true)\\n         */\\n        market.capacity -= market.capacityInQuote ? _amount : payout_;\\n\\n        /**\\n         * bonds mature with a cliff at a set timestamp\\n         * prior to the expiry timestamp, no payout tokens are accessible to the user\\n         * after the expiry timestamp, the entire payout can be redeemed\\n         *\\n         * there are two types of bonds: fixed-term and fixed-expiration\\n         *\\n         * fixed-term bonds mature in a set amount of time from deposit\\n         * i.e. term = 1 week. when alice deposits on day 1, her bond\\n         * expires on day 8. when bob deposits on day 2, his bond expires day 9.\\n         *\\n         * fixed-expiration bonds mature at a set timestamp\\n         * i.e. expiration = day 10. when alice deposits on day 1, her term\\n         * is 9 days. when bob deposits on day 2, his term is 8 days.\\n         */\\n        userBond_.expiry = term.fixedTerm ? term.vesting + currentTime : term.vesting;\\n\\n        // markets keep track of how many quote tokens have been\\n        // purchased, and how much HECTA has been sold\\n        market.purchased += _amount;\\n        market.sold += uint64(payout_);\\n\\n        // incrementing total debt raises the price of the next bond\\n        market.totalDebt += uint64(payout_);\\n\\n        /**\\n         * user data is stored as Notes. these are isolated array entries\\n         * storing the amount due, the time created, the time when payout\\n         * is redeemable, the time when payout was redeemed, and the ID\\n         * of the market deposited into\\n         */\\n        (userBond_.index, give) = addNote(_user, payout_, uint48(userBond_.expiry), uint48(_id), _referral);\\n\\n        userBond_.finalPayout = payout_ + give.toBuyer;\\n\\n        emit Bond(\\n            _id,\\n            _amount,\\n            price,\\n            userBond_.index,\\n            _user,\\n            _referral,\\n            give.toRefer,\\n            give.toBuyer,\\n            give.toDaoCommunity,\\n            give.toDaoInvestment\\n        );\\n\\n        // transfer payment to treasury\\n        market.quoteToken.safeTransferFrom(msg.sender, address(treasury), _amount);\\n\\n        totalPayout += payout_;\\n\\n        // if max debt is breached, the market is closed\\n        // this a circuit breaker\\n        if (term.maxDebt < market.totalDebt) {\\n            market.capacity = 0;\\n            emit CloseMarket(_id);\\n        } else {\\n            // if market will continue, the control variable is tuned to hit targets on time\\n            _tune(_id, currentTime);\\n        }\\n\\n        return userBond_;\\n    }\\n\\n    /**\\n     * @notice             decay debt, and adjust control variable if there is an active change\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _decay(uint256 _id, uint48 _time) internal {\\n        // Debt decay\\n\\n        /*\\n         * Debt is a time-decayed sum of tokens spent in a market\\n         * Debt is added when deposits occur and removed over time\\n         * |\\n         * |    debt falls with\\n         * |   / \\\\  inactivity       / \\\\\\n         * | /     \\\\              /\\\\/    \\\\\\n         * |         \\\\           /         \\\\\\n         * |           \\\\      /\\\\/            \\\\\\n         * |             \\\\  /  and rises       \\\\\\n         * |                with deposits\\n         * |\\n         * |------------------------------------| t\\n         */\\n        markets[_id].totalDebt -= debtDecay(_id);\\n        metadata[_id].lastDecay = _time;\\n\\n        // Control variable decay\\n\\n        // The bond control variable is continually tuned. When it is lowered (which\\n        // lowers the market price), the change is carried out smoothly over time.\\n        if (adjustments[_id].active) {\\n            Adjustment storage adjustment = adjustments[_id];\\n\\n            ControlDecay memory controlDecay = _controlDecay(_id);\\n            terms[_id].controlVariable -= controlDecay.decay;\\n\\n            if (controlDecay.active) {\\n                adjustment.change -= controlDecay.decay;\\n                adjustment.timeToAdjusted -= controlDecay.secondsSince;\\n                adjustment.lastAdjustment = _time;\\n            } else {\\n                adjustment.active = false;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @notice             auto-adjust control variable to hit capacity/spend target\\n     * @param _id          ID of market\\n     * @param _time        uint48 timestamp (saves gas when passed in)\\n     */\\n    function _tune(uint256 _id, uint48 _time) internal {\\n        Metadata memory meta = metadata[_id];\\n\\n        if (_time >= meta.lastTune + meta.tuneInterval) {\\n            Market memory market = markets[_id];\\n\\n            // compute seconds remaining until market will conclude\\n            uint256 timeRemaining = terms[_id].conclusion - _time;\\n            uint256 price = _marketPrice(_id);\\n\\n            // standardize capacity into an base token amount\\n            // hecta decimals (9) + price decimals (9)\\n            uint256 capacity = market.capacityInQuote\\n                ? ((market.capacity * 1e18) / price) / (10**meta.quoteDecimals)\\n                : market.capacity;\\n\\n            /**\\n             * calculate the correct payout to complete on time assuming each bond\\n             * will be max size in the desired deposit interval for the remaining time\\n             *\\n             * i.e. market has 10 days remaining. deposit interval is 1 day. capacity\\n             * is 10,000 HECTA. max payout would be 1,000 HECTA (10,000 * 1 / 10).\\n             */\\n            markets[_id].maxPayout = uint64((capacity * meta.depositInterval) / timeRemaining);\\n\\n            // calculate the ideal total debt to satisfy capacity in the remaining time\\n            uint256 targetDebt = (capacity * meta.length) / timeRemaining;\\n\\n            // derive a new control variable from the target debt and current supply\\n            uint64 newControlVariable = uint64((price * hecta.totalSupply()) / targetDebt);\\n\\n            emit Tuned(_id, terms[_id].controlVariable, newControlVariable);\\n\\n            if (newControlVariable >= terms[_id].controlVariable) {\\n                terms[_id].controlVariable = newControlVariable;\\n            } else {\\n                // if decrease, control variable change will be carried out over the tune interval\\n                // this is because price will be lowered\\n                uint64 change = terms[_id].controlVariable - newControlVariable;\\n                adjustments[_id] = Adjustment(change, _time, meta.tuneInterval, true);\\n            }\\n            metadata[_id].lastTune = _time;\\n        }\\n    }\\n\\n    /* ======== CREATE ======== */\\n\\n    /**\\n     * @notice             creates a new market type\\n     * @dev                current price should be in 9 decimals.\\n     * @param _quoteToken  token used to deposit\\n     * @param _market      [capacity (in HECTA or quote), initial price / HECTA (9 decimals), debt buffer (3 decimals)]\\n     * @param _booleans    [capacity in quote, fixed term]\\n     * @param _terms       [vesting length (if fixed term) or vested timestamp, conclusion timestamp]\\n     * @param _intervals   [deposit interval (seconds), tune interval (seconds)]\\n     * @return id_         ID of new bond market\\n     */\\n    function create(\\n        IERC20 _quoteToken,\\n        uint256[3] memory _market,\\n        bool[2] memory _booleans,\\n        uint256[2] memory _terms,\\n        uint32[2] memory _intervals\\n    ) external override onlyPolicy returns (uint256 id_) {\\n        // the length of the program, in seconds\\n        uint256 secondsToConclusion = _terms[1] - block.timestamp;\\n\\n        // the decimal count of the quote token\\n        uint256 decimals = IERC20Metadata(address(_quoteToken)).decimals();\\n\\n        /*\\n         * initial target debt is equal to capacity (this is the amount of debt\\n         * that will decay over in the length of the program if price remains the same).\\n         * it is converted into base token terms if passed in in quote token terms.\\n         *\\n         * 1e18 = hecta decimals (9) + initial price decimals (9)\\n         */\\n        uint64 targetDebt = uint64(_booleans[0] ? ((_market[0] * 1e18) / _market[1]) / 10**decimals : _market[0]);\\n\\n        /*\\n         * max payout is the amount of capacity that should be utilized in a deposit\\n         * interval. for example, if capacity is 1,000 HECTA, there are 10 days to conclusion,\\n         * and the preferred deposit interval is 1 day, max payout would be 100 HECTA.\\n         */\\n        uint64 maxPayout = uint64((targetDebt * _intervals[0]) / secondsToConclusion);\\n\\n        /*\\n         * max debt serves as a circuit breaker for the market. let's say the quote\\n         * token is a stablecoin, and that stablecoin depegs. without max debt, the\\n         * market would continue to buy until it runs out of capacity. this is\\n         * configurable with a 3 decimal buffer (1000 = 1% above initial price).\\n         * note that its likely advisable to keep this buffer wide.\\n         * note that the buffer is above 100%. i.e. 10% buffer = initial debt * 1.1\\n         */\\n        uint256 maxDebt = targetDebt + ((targetDebt * _market[2]) / 1e5); // 1e5 = 100,000. 10,000 / 100,000 = 10%.\\n\\n        /*\\n         * the control variable is set so that initial price equals the desired\\n         * initial price. the control variable is the ultimate determinant of price,\\n         * so we compute this last.\\n         *\\n         * price = control variable * debt ratio\\n         * debt ratio = total debt / supply\\n         * therefore, control variable = price / debt ratio\\n         */\\n        uint256 controlVariable = (_market[1] * hecta.totalSupply()) / targetDebt;\\n\\n        // depositing into, or getting info for, the created market uses this ID\\n        id_ = markets.length;\\n\\n        markets.push(\\n            Market({\\n                quoteToken: _quoteToken,\\n                capacityInQuote: _booleans[0],\\n                capacity: _market[0],\\n                totalDebt: targetDebt,\\n                maxPayout: maxPayout,\\n                purchased: 0,\\n                sold: 0\\n            })\\n        );\\n\\n        terms.push(\\n            Terms({\\n                fixedTerm: _booleans[1],\\n                controlVariable: uint64(controlVariable),\\n                vesting: uint48(_terms[0]),\\n                conclusion: uint48(_terms[1]),\\n                maxDebt: uint64(maxDebt)\\n            })\\n        );\\n\\n        metadata.push(\\n            Metadata({\\n                lastTune: uint48(block.timestamp),\\n                lastDecay: uint48(block.timestamp),\\n                length: uint48(secondsToConclusion),\\n                depositInterval: _intervals[0],\\n                tuneInterval: _intervals[1],\\n                quoteDecimals: uint8(decimals)\\n            })\\n        );\\n\\n        marketsForQuote[address(_quoteToken)].push(id_);\\n\\n        emit CreateMarket(id_, address(hecta), address(_quoteToken), _market[1]);\\n    }\\n\\n    /**\\n     * @notice             disable existing market\\n     * @param _id          ID of market to close\\n     */\\n    function close(uint256 _id) external override onlyPolicy {\\n        terms[_id].conclusion = uint48(block.timestamp);\\n        markets[_id].capacity = 0;\\n        emit CloseMarket(_id);\\n    }\\n\\n    /* ======== EXTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice             calculate current market price of quote token in base token\\n     * @dev                accounts for debt and control variable decay since last deposit (vs _marketPrice())\\n     * @param _id          ID of market\\n     * @return             price for market in HECTA decimals\\n     *\\n     * price is derived from the equation\\n     *\\n     * p = cv * dr\\n     *\\n     * where\\n     * p = price\\n     * cv = control variable\\n     * dr = debt ratio\\n     *\\n     * dr = d / s\\n     *\\n     * where\\n     * d = debt\\n     * s = supply of token at market creation\\n     *\\n     * d -= ( d * (dt / l) )\\n     *\\n     * where\\n     * dt = change in time\\n     * l = length of program\\n     */\\n    function marketPrice(uint256 _id) public view override returns (uint256) {\\n        return (currentControlVariable(_id) * debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice             payout due for amount of quote tokens\\n     * @dev                accounts for debt and control variable decay so it is up to date\\n     * @param _amount      amount of quote tokens to spend\\n     * @param _id          ID of market\\n     * @return             amount of HECTA to be paid in HECTA decimals\\n     *\\n     * @dev 1e18 = hecta decimals (9) + market price decimals (9)\\n     */\\n    function payoutFor(uint256 _amount, uint256 _id) external view override returns (uint256) {\\n        Metadata memory meta = metadata[_id];\\n        return (_amount * 1e18) / marketPrice(_id) / 10**meta.quoteDecimals;\\n    }\\n\\n    /**\\n     * @notice             calculate current ratio of debt to supply\\n     * @dev                uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())\\n     * @param _id          ID of market\\n     * @return             debt ratio for market in quote decimals\\n     */\\n    function debtRatio(uint256 _id) public view override returns (uint256) {\\n        return (currentDebt(_id) * (10**metadata[_id].quoteDecimals)) / hecta.totalSupply();\\n    }\\n\\n    /**\\n     * @notice             calculate debt factoring in decay\\n     * @dev                accounts for debt decay since last deposit\\n     * @param _id          ID of market\\n     * @return             current debt for market in HECTA decimals\\n     */\\n    function currentDebt(uint256 _id) public view override returns (uint256) {\\n        return markets[_id].totalDebt - debtDecay(_id);\\n    }\\n\\n    /**\\n     * @notice             amount of debt to decay from total debt for market ID\\n     * @param _id          ID of market\\n     * @return             amount of debt to decay\\n     */\\n    function debtDecay(uint256 _id) public view override returns (uint64) {\\n        Metadata memory meta = metadata[_id];\\n\\n        uint256 secondsSince = block.timestamp - meta.lastDecay;\\n\\n        return uint64((markets[_id].totalDebt * secondsSince) / meta.length);\\n    }\\n\\n    /**\\n     * @notice             up to date control variable\\n     * @dev                accounts for control variable adjustment\\n     * @param _id          ID of market\\n     * @return             control variable for market in HECTA decimals\\n     */\\n    function currentControlVariable(uint256 _id) public view returns (uint256) {\\n        ControlDecay memory controlDecay = _controlDecay(_id);\\n        return terms[_id].controlVariable - controlDecay.decay;\\n    }\\n\\n    /**\\n     * @notice             is a given market accepting deposits\\n     * @param _id          ID of market\\n     */\\n    function isLive(uint256 _id) public view override returns (bool) {\\n        return (markets[_id].capacity != 0 && terms[_id].conclusion > block.timestamp);\\n    }\\n\\n    /**\\n     * @notice returns an array of all active market IDs\\n     */\\n    function liveMarkets() external view override returns (uint256[] memory) {\\n        uint256 num;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n        for (uint256 i = 0; i < markets.length; i++) {\\n            if (isLive(i)) {\\n                ids[nonce] = i;\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /**\\n     * @notice             returns an array of all active market IDs for a given quote token\\n     * @param _token       quote token to check for\\n     */\\n    function liveMarketsFor(address _token) external view override returns (uint256[] memory) {\\n        uint256[] memory mkts = marketsForQuote[_token];\\n        uint256 num;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) num++;\\n        }\\n\\n        uint256[] memory ids = new uint256[](num);\\n        uint256 nonce;\\n\\n        for (uint256 i = 0; i < mkts.length; i++) {\\n            if (isLive(mkts[i])) {\\n                ids[nonce] = mkts[i];\\n                nonce++;\\n            }\\n        }\\n        return ids;\\n    }\\n\\n    /* ======== INTERNAL VIEW ======== */\\n\\n    /**\\n     * @notice                  calculate current market price of quote token in base token\\n     * @dev                     see marketPrice() for explanation of price computation\\n     * @dev                     uses info from storage because data has been updated before call (vs marketPrice())\\n     * @param _id               market ID\\n     * @return                  price for market in HECTA decimals\\n     */\\n    function _marketPrice(uint256 _id) internal view returns (uint256) {\\n        return (terms[_id].controlVariable * _debtRatio(_id)) / (10**metadata[_id].quoteDecimals);\\n    }\\n\\n    /**\\n     * @notice                  calculate debt factoring in decay\\n     * @dev                     uses info from storage because data has been updated before call (vs debtRatio())\\n     * @param _id               market ID\\n     * @return                  current debt for market in quote decimals\\n     */\\n    function _debtRatio(uint256 _id) internal view returns (uint256) {\\n        return (markets[_id].totalDebt * (10**metadata[_id].quoteDecimals)) / hecta.totalSupply();\\n    }\\n\\n    /**\\n     * @notice                  amount to decay control variable by\\n     * @param _id               ID of market\\n     * @return controlDecay\\n     */\\n    function _controlDecay(uint256 _id) internal view returns (ControlDecay memory controlDecay) {\\n        Adjustment memory info = adjustments[_id];\\n        if (!info.active) return controlDecay;\\n\\n        controlDecay.secondsSince = uint48(block.timestamp) - info.lastAdjustment;\\n\\n        controlDecay.active = controlDecay.secondsSince < info.timeToAdjusted;\\n        controlDecay.decay = controlDecay.active\\n            ? (info.change * controlDecay.secondsSince) / info.timeToAdjusted\\n            : info.change;\\n    }\\n}\\n\",\"keccak256\":\"0x2c93bff617adea69f74cefb44f6ae7a7bd1c6b1fa3ad4b997c44256a2b8cc573\",\"license\":\"MIT\"},\"contracts/interfaces/IBondDepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IBondDepository {\\n    // Info about each type of market\\n    struct Market {\\n        uint256 capacity; // capacity remaining\\n        IERC20 quoteToken; // token to accept as payment\\n        bool capacityInQuote; // capacity limit is in payment token (true) or in HECTA (false, default)\\n        uint64 totalDebt; // total debt from market\\n        uint64 maxPayout; // max tokens in/out (determined by capacityInQuote false/true, respectively)\\n        uint64 sold; // base tokens out\\n        uint256 purchased; // quote tokens in\\n    }\\n\\n    // Info for creating new markets\\n    struct Terms {\\n        bool fixedTerm; // fixed term or fixed expiration\\n        uint64 controlVariable; // scaling variable for price\\n        uint48 vesting; // length of time from deposit to maturity if fixed-term\\n        uint48 conclusion; // timestamp when market no longer offered (doubles as time when market matures if fixed-expiry)\\n        uint64 maxDebt; // 9 decimal debt maximum in HECTA\\n    }\\n\\n    // Additional info about market.\\n    struct Metadata {\\n        uint48 lastTune; // last timestamp when control variable was tuned\\n        uint48 lastDecay; // last timestamp when market was created and debt was decayed\\n        uint48 length; // time from creation to conclusion. used as speed to decay debt.\\n        uint48 depositInterval; // target frequency of deposits\\n        uint48 tuneInterval; // frequency of tuning\\n        uint8 quoteDecimals; // decimals of quote token\\n    }\\n\\n    // Control variable adjustment data\\n    struct Adjustment {\\n        uint64 change;\\n        uint48 lastAdjustment;\\n        uint48 timeToAdjusted;\\n        bool active;\\n    }\\n\\n    // user's bond info\\n    struct UserBond {\\n        uint256 finalPayout;\\n        uint256 expiry;\\n        uint256 index;\\n    }\\n\\n    struct ControlDecay {\\n        uint64 decay; // change in control variable\\n        uint48 secondsSince; // seconds since last change in control variable\\n        bool active; // whether or not change remains active\\n    }\\n\\n    /**\\n     * @notice deposit market\\n     * @param _bid uint256\\n     * @param _amount uint256\\n     * @param _maxPrice uint256\\n     * @param _user address\\n     * @param _referral address\\n     * @return userBond_ UserBond\\n     */\\n    function deposit(\\n        uint256 _bid,\\n        uint256 _amount,\\n        uint256 _maxPrice,\\n        address _user,\\n        address _referral\\n    ) external returns (UserBond memory userBond_);\\n\\n    function create(\\n        IERC20 _quoteToken, // token used to deposit\\n        uint256[3] memory _market, // [capacity, initial price]\\n        bool[2] memory _booleans, // [capacity in quote, fixed term]\\n        uint256[2] memory _terms, // [vesting, conclusion]\\n        uint32[2] memory _intervals // [deposit interval, tune interval]\\n    ) external returns (uint256 id_);\\n\\n    function close(uint256 _id) external;\\n\\n    function isLive(uint256 _bid) external view returns (bool);\\n\\n    function liveMarkets() external view returns (uint256[] memory);\\n\\n    function liveMarketsFor(address _quoteToken) external view returns (uint256[] memory);\\n\\n    function payoutFor(uint256 _amount, uint256 _bid) external view returns (uint256);\\n\\n    function marketPrice(uint256 _bid) external view returns (uint256);\\n\\n    function currentDebt(uint256 _bid) external view returns (uint256);\\n\\n    function debtRatio(uint256 _bid) external view returns (uint256);\\n\\n    function debtDecay(uint256 _bid) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xd29ad3151a8150075e2ecd78f5042eeaf0b7d94ce6f9b24ad54a178c2d372b1e\",\"license\":\"MIT\"},\"contracts/interfaces/IHectagonAuthority.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface IHectagonAuthority {\\n    /* ========== EVENTS ========== */\\n\\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\\n\\n    event GovernorPulled(address indexed from, address indexed to);\\n    event GuardianPulled(address indexed from, address indexed to);\\n    event PolicyPulled(address indexed from, address indexed to);\\n    event VaultPulled(address indexed from, address indexed to);\\n\\n    /* ========== VIEW ========== */\\n\\n    function governor() external view returns (address);\\n\\n    function guardian() external view returns (address);\\n\\n    function policy() external view returns (address);\\n\\n    function vault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xfaa879566aba4585e5f8d1e7d14a0a811e93b9de12e7052db78f8add61ef05b0\",\"license\":\"MIT\"},\"contracts/interfaces/INoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface INoteKeeper {\\n    // Info for market note\\n    struct Note {\\n        uint256 payout; // gHecta remaining to be paid\\n        uint48 created; // time market was created\\n        uint48 matured; // timestamp when market is matured\\n        uint48 redeemed; // time market was redeemed\\n        uint48 marketID; // market ID of deposit. uint48 to avoid adding a slot.\\n    }\\n\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _unstake\\n    ) external returns (uint256);\\n\\n    function redeemAll(address _user, bool _unstake) external returns (uint256);\\n\\n    function pushNote(address to, uint256 index) external;\\n\\n    function pullNote(address from, uint256 index) external returns (uint256 newIndex_);\\n\\n    function indexesFor(address _user) external view returns (uint256[] memory);\\n\\n    function pendingFor(address _user, uint256 _index) external view returns (uint256 payout_, bool matured_);\\n}\\n\",\"keccak256\":\"0xfbbd756a3529fc5fe53ec335da832e45d1ac7d57baabdc3cbaafa6eda5464b51\",\"license\":\"MIT\"},\"contracts/interfaces/ITreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\ninterface ITreasury {\\n    function mint(address _recipient, uint256 _amount) external;\\n\\n    function withdraw(address _token, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb6fc1fe9fb92231c70a4d042409757db3655f168a3f33f59297d6e1a684af2db\",\"license\":\"MIT\"},\"contracts/interfaces/IgHECTA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\n\\ninterface IgHECTA is IERC4626 {\\n    function nextEpoch() external returns (uint256);\\n\\n    function index() external view returns (uint256);\\n\\n    function setDistributor(address _distributor) external;\\n\\n    function bountyHunter() external;\\n}\\n\",\"keccak256\":\"0x1faea97343c58dc20391fe1045c0dc4717f60b3520723213d38daab74aaa7239\",\"license\":\"MIT\"},\"contracts/types/FrontEndRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"../types/HectagonAccessControlled.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract FrontEndRewarder is HectagonAccessControlled {\\n    struct Give {\\n        uint256 toRefer;\\n        uint256 toDaoInvestment;\\n        uint256 toDaoCommunity;\\n        uint256 toBuyer;\\n    }\\n\\n    struct ReferTerm {\\n        uint256 referrerPercent; // reward for referrer (3 decimals: 100 = 1%)\\n        uint256 buyerPercent; // reward for bond buyer (3 decimals: 100 = 1%)\\n    }\\n\\n    struct PartnerTerm {\\n        uint256 amount; // partner's remaining hecta bonus, decimal 9\\n        uint256 percent; // partner's bonus percent per deposit, 3 decimals: 100 = 1%\\n    }\\n\\n    /* ========= STATE VARIABLES ========== */\\n\\n    mapping(address => uint256) public rewards; // rewards notes\\n\\n    mapping(address => PartnerTerm) public partnerTerms; // reward term for each partner\\n    mapping(address => ReferTerm) public referTerms; // reward term for refer\\n\\n    uint256 public referTermCap = 2000; // % cap for referrer (3 decimals: 2000 = 20%)\\n    uint256 public partnerTermCap = 10000; // % cap for partner (3 decimals: 10000 = 100%)\\n\\n    uint256 public daoInvestmentPercent = 10000; // 3 decimals: 10000 = 100%\\n\\n    uint256 public daoCommunityPercent = 45000; // 3 decimals: 45000 = 450%\\n\\n    uint256 private immutable RATE_DENOMINATOR = 1e4;\\n\\n    IERC20 internal immutable hecta; // reward token\\n\\n    constructor(IHectagonAuthority _authority, IERC20 _hecta) HectagonAccessControlled(_authority) {\\n        hecta = _hecta;\\n    }\\n\\n    /* ========= EXTERNAL FUNCTIONS ========== */\\n\\n    // pay reward to referrer\\n    function getReward() external {\\n        uint256 reward = rewards[msg.sender];\\n\\n        rewards[msg.sender] = 0;\\n        hecta.transfer(msg.sender, reward);\\n    }\\n\\n    /* ========= INTERNAL ========== */\\n\\n    /**\\n     * @notice          add new market payout to user data\\n     * @return give     rewards data\\n     */\\n    function _giveRewards(\\n        uint256 _payout,\\n        address _referral,\\n        address _buyer\\n    ) internal returns (Give memory give) {\\n        // first we calculate rewards paid to the DAO and referrer\\n        give.toDaoInvestment += (_payout * daoInvestmentPercent) / RATE_DENOMINATOR;\\n        give.toDaoCommunity += (_payout * daoCommunityPercent) / RATE_DENOMINATOR;\\n\\n        // check partner logic\\n        if (partnerTerms[_buyer].percent > 0) {\\n            uint256 partnerBonus = (_payout * partnerTerms[_buyer].percent) / RATE_DENOMINATOR;\\n            if (partnerBonus >= partnerTerms[_buyer].amount) {\\n                give.toBuyer = partnerTerms[_buyer].amount;\\n            } else {\\n                give.toBuyer = partnerBonus;\\n            }\\n            partnerTerms[_buyer].amount -= give.toBuyer;\\n        } else {\\n            ReferTerm memory refTerm = referTerms[_referral];\\n\\n            if (refTerm.referrerPercent > 0) {\\n                give.toRefer = (_payout * refTerm.referrerPercent) / RATE_DENOMINATOR;\\n                rewards[_referral] += give.toRefer;\\n            }\\n\\n            if (refTerm.buyerPercent > 0) {\\n                give.toBuyer = (_payout * refTerm.buyerPercent) / RATE_DENOMINATOR;\\n            }\\n        }\\n\\n        return give;\\n    }\\n\\n    /**\\n     * @notice set Cap for referrer % reward\\n     */\\n    function setReferTermCap(uint256 _cap) external onlyGovernor {\\n        referTermCap = _cap;\\n    }\\n\\n    /**\\n     * @notice set Cap for referrer % reward\\n     */\\n    function setPartnerTermCap(uint256 _cap) external onlyGovernor {\\n        partnerTermCap = _cap;\\n    }\\n\\n    function setDaoRewards(uint256 daoInvestmentPercent_, uint256 daoCommunityPercent_) external onlyGovernor {\\n        daoInvestmentPercent = daoInvestmentPercent_;\\n        daoCommunityPercent = daoCommunityPercent_;\\n    }\\n\\n    /**\\n     * @notice set referrer term\\n     */\\n    function setReferTerm(\\n        address _referrer,\\n        uint256 _referrerPercent,\\n        uint256 _buyerPercent\\n    ) external onlyPolicy {\\n        require(_referrer != address(0), \\\"Zero address: Referrer\\\");\\n        require((_referrerPercent + _buyerPercent) <= referTermCap, \\\"reward too high\\\");\\n        referTerms[_referrer] = ReferTerm({referrerPercent: _referrerPercent, buyerPercent: _buyerPercent});\\n    }\\n\\n    /**\\n     * @notice set partner term\\n     */\\n    function setPartnerTerm(\\n        address _partner,\\n        uint256 _amount,\\n        uint256 _percent\\n    ) external onlyPolicy {\\n        require(_partner != address(0), \\\"Zero address: Partner\\\");\\n        require(_percent <= partnerTermCap, \\\"reward too high\\\");\\n        partnerTerms[_partner] = PartnerTerm(_amount, _percent);\\n    }\\n}\\n\",\"keccak256\":\"0x22b8b12c9781ac58144b549d7d0071a350fc7893c671859a5b9af4ce61475b0e\",\"license\":\"MIT\"},\"contracts/types/HectagonAccessControlled.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0;\\n\\nimport \\\"../interfaces/IHectagonAuthority.sol\\\";\\n\\nabstract contract HectagonAccessControlled {\\n    /* ========== EVENTS ========== */\\n\\n    event AuthorityUpdated(IHectagonAuthority indexed authority);\\n\\n    string UNAUTHORIZED = \\\"UNAUTHORIZED\\\"; // save gas\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    IHectagonAuthority public authority;\\n\\n    /* ========== Constructor ========== */\\n\\n    constructor(IHectagonAuthority _authority) {\\n        authority = _authority;\\n        emit AuthorityUpdated(_authority);\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyGuardian() {\\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyPolicy() {\\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    modifier onlyVault() {\\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\\n        _;\\n    }\\n\\n    /* ========== GOV ONLY ========== */\\n\\n    function setAuthority(IHectagonAuthority _newAuthority) external onlyGovernor {\\n        authority = _newAuthority;\\n        emit AuthorityUpdated(_newAuthority);\\n    }\\n}\\n\",\"keccak256\":\"0x8e290761a0b4a58d0614771e19f5ab283030daf2b1019a39bcc8faa726d6dcc2\",\"license\":\"MIT\"},\"contracts/types/NoteKeeper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.10;\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC4626.sol\\\";\\nimport \\\"../types/FrontEndRewarder.sol\\\";\\nimport \\\"../interfaces/ITreasury.sol\\\";\\nimport \\\"../interfaces/INoteKeeper.sol\\\";\\nimport \\\"../interfaces/IgHECTA.sol\\\";\\n\\nabstract contract NoteKeeper is INoteKeeper, FrontEndRewarder {\\n    mapping(address => Note[]) public notes; // user deposit data\\n    mapping(address => mapping(uint256 => address)) private noteTransfers; // change note ownership\\n\\n    IgHECTA internal immutable gHecta;\\n    ITreasury internal treasury;\\n\\n    constructor(\\n        IHectagonAuthority _authority,\\n        IERC20 _hecta,\\n        IgHECTA _ghecta,\\n        ITreasury _treasury\\n    ) FrontEndRewarder(_authority, _hecta) {\\n        gHecta = _ghecta;\\n        treasury = _treasury;\\n    }\\n\\n    // if treasury address changes on authority, update it\\n    function updateTreasury() external {\\n        require(\\n            msg.sender == authority.governor() ||\\n                msg.sender == authority.guardian() ||\\n                msg.sender == authority.policy(),\\n            \\\"Only authorized\\\"\\n        );\\n        treasury = ITreasury(authority.vault());\\n    }\\n\\n    /* ========== ADD ========== */\\n\\n    /**\\n     * @notice              adds a new Note for a user, stores Ref & DAO rewards, and mints & stakes payout & rewards\\n     * @param _user         the user that owns the Note\\n     * @param _payout       the amount of HECTA due to the user\\n     * @param _expiry       the timestamp when the Note is redeemable\\n     * @param _marketID     the ID of the market deposited into\\n     * @return give         rewards data\\n     */\\n    function addNote(\\n        address _user,\\n        uint256 _payout,\\n        uint48 _expiry,\\n        uint48 _marketID,\\n        address _referral\\n    ) internal returns (uint256, Give memory) {\\n        // front end operators can earn rewards by referring users\\n        Give memory give = _giveRewards(_payout, _referral, _user); // Give struct inherited fom FrontEndRewarder\\n        // the index of the note is the next in the user's array\\n        uint256 index_ = notes[_user].length;\\n\\n        uint256 finalPayout = give.toBuyer + _payout;\\n        uint256 daoAmount = give.toDaoCommunity + give.toDaoInvestment - give.toBuyer - give.toRefer;\\n\\n        // mint buyer's final payout and referer commission\\n        treasury.mint(address(this), finalPayout + give.toRefer);\\n\\n        // note that only the buyer's final payout gets staked (referer commission are in HECTA)\\n        uint256 shares = gHecta.deposit(finalPayout, address(this));\\n\\n        // mint Dao Community Fund and Dao Investment Fund, store in treasury\\n        treasury.mint(address(treasury), daoAmount);\\n\\n        // the new note is pushed to the user's array\\n        // This logic needs to be executed after staking\\n        notes[_user].push(\\n            Note({\\n                payout: shares,\\n                created: uint48(block.timestamp),\\n                matured: _expiry,\\n                redeemed: 0,\\n                marketID: _marketID\\n            })\\n        );\\n\\n        return (index_, give);\\n    }\\n\\n    /* ========== REDEEM ========== */\\n\\n    /**\\n     * @notice             redeem notes for user\\n     * @param _user        the user to redeem for\\n     * @param _indexes     the note indexes to redeem\\n     * @param _unstake     option for redeem gHecta or Hecta\\n     * @return sum of payout sent, in gHecta or Hecta\\n     */\\n    function redeem(\\n        address _user,\\n        uint256[] memory _indexes,\\n        bool _unstake\\n    ) public override returns (uint256) {\\n        uint256 payout_;\\n        uint48 time = uint48(block.timestamp);\\n\\n        for (uint256 i = 0; i < _indexes.length; i++) {\\n            (uint256 pay, bool matured) = pendingFor(_user, _indexes[i]);\\n\\n            if (matured) {\\n                notes[_user][_indexes[i]].redeemed = time; // mark as redeemed\\n                payout_ += pay;\\n            }\\n        }\\n\\n        if (_unstake) {\\n            return gHecta.redeem(payout_, _user, address(this)); // send payout as hecta\\n        } else {\\n            gHecta.transfer(_user, payout_); // send payout as gHecta\\n            return payout_;\\n        }\\n    }\\n\\n    /**\\n     * @notice             redeem all redeemable markets for user\\n     * @dev                if possible, query indexesFor() off-chain and input in redeem() to save gas\\n     * @param _user        user to redeem all notes for\\n     * @param _unstake     option for redeem gHecta or Hecta\\n     * @return             sum of payout sent, in gHecta or Hecta\\n     */\\n    function redeemAll(address _user, bool _unstake) external returns (uint256) {\\n        return redeem(_user, indexesFor(_user), _unstake);\\n    }\\n\\n    /* ========== TRANSFER ========== */\\n\\n    /**\\n     * @notice             approve an address to transfer a note\\n     * @param _to          address to approve note transfer for\\n     * @param _index       index of note to approve transfer for\\n     */\\n    function pushNote(address _to, uint256 _index) external override {\\n        require(notes[msg.sender][_index].created != 0, \\\"Depository: note not found\\\");\\n        noteTransfers[msg.sender][_index] = _to;\\n    }\\n\\n    /**\\n     * @notice             transfer a note that has been approved by an address\\n     * @param _from        the address that approved the note transfer\\n     * @param _index       the index of the note to transfer (in the sender's array)\\n     */\\n    function pullNote(address _from, uint256 _index) external override returns (uint256 newIndex_) {\\n        require(noteTransfers[_from][_index] == msg.sender, \\\"Depository: transfer not found\\\");\\n        require(notes[_from][_index].redeemed == 0, \\\"Depository: note redeemed\\\");\\n\\n        newIndex_ = notes[msg.sender].length;\\n        notes[msg.sender].push(notes[_from][_index]);\\n\\n        delete notes[_from][_index];\\n    }\\n\\n    /* ========== VIEW ========== */\\n\\n    // Note info\\n\\n    /**\\n     * @notice             all pending notes for user\\n     * @param _user        the user to query notes for\\n     * @return             the pending notes for the user\\n     */\\n    function indexesFor(address _user) public view override returns (uint256[] memory) {\\n        Note[] memory info = notes[_user];\\n\\n        uint256 length;\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) length++;\\n        }\\n\\n        uint256[] memory indexes = new uint256[](length);\\n        uint256 position;\\n\\n        for (uint256 i = 0; i < info.length; i++) {\\n            if (info[i].redeemed == 0 && info[i].payout != 0) {\\n                indexes[position] = i;\\n                position++;\\n            }\\n        }\\n\\n        return indexes;\\n    }\\n\\n    /**\\n     * @notice             calculate amount available for claim for a single note\\n     * @param _user        the user that the note belongs to\\n     * @param _index       the index of the note in the user's array\\n     * @return payout_     the payout due, in gHecta\\n     * @return matured_    if the payout can be redeemed\\n     */\\n    function pendingFor(address _user, uint256 _index) public view override returns (uint256 payout_, bool matured_) {\\n        Note memory note = notes[_user][_index];\\n\\n        payout_ = note.payout;\\n        matured_ = note.redeemed == 0 && note.matured <= block.timestamp && note.payout != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x36128bfb1ee563edbb560b918d83e7a3048f0d42ec30fd8dd3746314e5481a05\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610120604052600c60e08190526b15539055551213d49256915160a21b6101009081526200003191600091906200019a565b506107d06005556127106006819055600781905561afc860085560805266071afd498d00006011553480156200006657600080fd5b506040516200508b3803806200508b833981016040819052620000899162000259565b600180546001600160a01b0319166001600160a01b0386169081179091556040518591859185918591859185918391907f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a2506001600160a01b0390811660a05292831660c05250600b80546001600160a01b03191691831691909117905560405163095ea7b360e01b81528582166004820152722cd76fe086b93ce2f768a00b22a000000000006024820152908616925063095ea7b391506044016020604051808303816000875af115801562000169573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018f9190620002c1565b505050505062000329565b828054620001a890620002ec565b90600052602060002090601f016020900481019282620001cc576000855562000217565b82601f10620001e757805160ff191683800117855562000217565b8280016001018555821562000217579182015b8281111562000217578251825591602001919060010190620001fa565b506200022592915062000229565b5090565b5b808211156200022557600081556001016200022a565b6001600160a01b03811681146200025657600080fd5b50565b600080600080608085870312156200027057600080fd5b84516200027d8162000240565b6020860151909450620002908162000240565b6040860151909350620002a38162000240565b6060860151909250620002b68162000240565b939692955090935050565b600060208284031215620002d457600080fd5b81518015158114620002e557600080fd5b9392505050565b600181811c908216806200030157607f821691505b602082108114156200032357634e487b7160e01b600052602260045260246000fd5b50919050565b60805160a05160c051614ce5620003a660003960008181612a7801528181612b14015261367a015260008181610bb8015281816110df0152818161131701528181612fea01528181613b3b0152613e40015260008181613f6201528181613fb2015281816140390152818161413201526141a30152614ce56000f3fe608060405234801561001057600080fd5b50600436106102e95760003560e01c80639c76978711610191578063c0aa0e8a116100e3578063e0b117ff11610097578063e481b26511610071578063e481b265146107f0578063f1b7dc7814610803578063ff43a1bf1461081657600080fd5b8063e0b117ff1461073e578063e364360014610786578063e3684e391461079957600080fd5b8063c9b67af5116100c8578063c9b67af514610710578063d62fbdd314610718578063d6db4df81461072b57600080fd5b8063c0aa0e8a14610699578063c3e0fb1c146106e857600080fd5b8063b157804611610145578063bcb296671161011f578063bcb2966714610648578063bf7e214f1461065b578063c0680e201461068657600080fd5b8063b157804614610579578063bc24cea9146105a0578063bc3b2b12146105b357600080fd5b8063a587462711610176578063a5874627146104db578063abbf4b17146104ee578063b1283e771461051957600080fd5b80639c769787146104c0578063a4220610146104c857600080fd5b80633d18b9121161024a5780636f345cae116101fe5780637c770aae116101d85780637c770aae1461047957806386ff8b84146104ae578063953db4a4146104b757600080fd5b80636f345cae1461044a5780636f6ff0ad146104535780637a9e5e4b1461046657600080fd5b806346aed74e1161022f57806346aed74e1461040457806364914439146104175780636a6c575d1461043757600080fd5b80633d18b912146103f3578063454f7b8f146103fb57600080fd5b806327507458116102a15780633a3d63ba116102865780633a3d63ba146103915780633adec5a7146103a45780633c4290e1146103b757600080fd5b80632750745814610365578063282c89ce1461038857600080fd5b80630a9d85eb116102d25780630a9d85eb1461032a5780630aebeb4e1461033d57806321a7d29b1461035257600080fd5b806306d008db146102ee5780630700037d1461030a575b600080fd5b6102f760085481565b6040519081526020015b60405180910390f35b6102f76103183660046143fb565b60026020526000908152604090205481565b6102f7610338366004614418565b610829565b61035061034b366004614418565b610883565b005b6102f76103603660046145b8565b6109ce565b610378610373366004614418565b611167565b6040519015158152602001610301565b6102f760115481565b61035061039f366004614418565b6111d0565b6102f76103b2366004614418565b611281565b6103de6103c53660046143fb565b6004602052600090815260409020805460019091015482565b60408051928352602083019190915201610301565b6103506112dd565b6102f760105481565b6102f7610412366004614679565b611388565b61042a6104253660046143fb565b6113a4565b60405161030191906146b2565b6102f76104453660046146f6565b611532565b6102f760065481565b6103506104613660046146f6565b611602565b6103506104743660046143fb565b6116b9565b61048c610487366004614718565b6117bc565b6040805182518152602080840151908201529181015190820152606001610301565b6102f760075481565b6102f760055481565b610350611d3a565b6102f76104d636600461476e565b611fdb565b6103506104e936600461479a565b61226e565b6105016104fc366004614418565b6123ee565b6040516001600160401b039091168152602001610301565b61052c610527366004614418565b6124d2565b604080519788526001600160a01b039096166020880152931515948601949094526001600160401b0391821660608601528116608085015290911660a083015260c082015260e001610301565b6103de6105873660046143fb565b6003602052600090815260409020805460019091015482565b6103506105ae36600461479a565b612540565b6106106105c1366004614418565b600f602052600090815260409020546001600160401b0381169065ffffffffffff600160401b82048116916e01000000000000000000000000000081049091169060ff600160a01b9091041684565b604080516001600160401b0395909516855265ffffffffffff9384166020860152919092169083015215156060820152608001610301565b6102f7610656366004614418565b6126c9565b60015461066e906001600160a01b031681565b6040516001600160a01b039091168152602001610301565b6102f761069436600461476e565b612725565b6106ac6106a7366004614418565b612756565b6040805195151586526001600160401b03948516602087015265ffffffffffff938416908601529116606084015216608082015260a001610301565b6106fb6106f636600461476e565b6127b5565b60408051928352901515602083015201610301565b61042a612880565b6102f76107263660046147cf565b612968565b61035061073936600461476e565b612b81565b61075161074c36600461476e565b612c50565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a001610301565b610350610794366004614418565b612cb3565b6107ac6107a7366004614418565b612d64565b6040805165ffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015260ff90911660a082015260c001610301565b61042a6107fe3660046143fb565b612dc2565b6102f7610811366004614418565b612fe6565b610350610824366004614418565b6130a7565b60008061083583613158565b90508060000151600d848154811061084f5761084f614899565b600091825260209091200154610873919061010090046001600160401b03166148c5565b6001600160401b03169392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa91906148ed565b6001600160a01b0316336001600160a01b0316146000906109375760405162461bcd60e51b815260040161092e919061490a565b60405180910390fd5b5042600d828154811061094c5761094c614899565b90600052602060002001600001600f6101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600c828154811061099057610990614899565b6000918252602082206004909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b60015460408051630505c8c960e01b815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c91906148ed565b6001600160a01b0316336001600160a01b031614600090610a705760405162461bcd60e51b815260040161092e919061490a565b506020830151600090610a849042906149b2565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea91906149c9565b60ff169050600086816020020151610b03578751610b3b565b610b0e82600a614ad0565b60208901518951610b2790670de0b6b3a7640000614adc565b610b319190614b11565b610b3b9190614b11565b85519091506000908490610b559063ffffffff1684614b25565b6001600160401b0316610b689190614b11565b90506000620186a08a60026020020151610b8b906001600160401b038616614adc565b610b959190614b11565b610ba8906001600160401b038516614b54565b90506000836001600160401b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c389190614b6c565b60208d0151610c479190614adc565b610c519190614b11565b600c80546040805160e0810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060028110610c9757610c97614899565b60209081029190910151151582526001600160401b0380891683830152878116604080850191909152600060608086018290526080958601829052875460018181018a5598835291859020875160049093020191825593860151818801805488850151968901518616600160a81b0267ffffffffffffffff60a81b19971515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009092166001600160a01b03909416939093171795909516179093559284015160028301805460a0808801518516600160401b026fffffffffffffffffffffffffffffffff19909216939094169290921791909117905560c09093015160039091015580519182019052600d9181908d90602002015115158152602001836001600160401b031681526020018b600060028110610ddb57610ddb614899565b602002015165ffffffffffff1681526020018b600160028110610e0057610e00614899565b6020908102919091015165ffffffffffff90811683526001600160401b038088169383019390935284546001810186556000958652828620855191018054868501516040808901516060808b01516080909b01518a16600160a81b0267ffffffffffffffff60a81b199b8916600160781b027fffffffffffffffffffffff000000000000ffffffffffffffffffffffffffffff938a16690100000000000000000002939093167fffffffffffffffffffffff000000000000000000000000ffffffffffffffffff95909b166101000268ffffffffffffffff00199815159890981668ffffffffffffffffff1990961695909517969096179290921697909717179690961695909517909455825160c081018452428216808252928101929092528a1691810191909152600e9290918201908b906020908102919091015163ffffffff168252018a6001602002015163ffffffff1665ffffffffffff1681526020018760ff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff1602179055505050601260008d6001600160a01b03166001600160a01b031681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150558b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e60016003811061113c5761113c614899565b602002015160405161115091815260200190565b60405180910390a450505050505095945050505050565b6000600c828154811061117c5761117c614899565b9060005260206000209060040201600001546000141580156111ca575042600d83815481106111ad576111ad614899565b600091825260209091200154600160781b900465ffffffffffff16115b92915050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611223573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124791906148ed565b6001600160a01b0316336001600160a01b03161460009061127b5760405162461bcd60e51b815260040161092e919061490a565b50600655565b6000600e828154811061129657611296614899565b6000918252602090912001546112b790600160f01b900460ff16600a614b85565b6112c083612fe6565b6112c984610829565b6112d39190614adc565b6111ca9190614b11565b3360008181526002602052604080822080549290555163a9059cbb60e01b8152600481019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611360573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113849190614b94565b5050565b600061139d8361139785612dc2565b84612968565b9392505050565b6001600160a01b038116600090815260126020908152604080832080548251818502810185019093528083526060949383018282801561140357602002820191906000526020600020905b8154815260200190600101908083116113ef575b50505050509050600080600090505b82518110156114625761143d83828151811061143057611430614899565b6020026020010151611167565b15611450578161144c81614bb1565b9250505b8061145a81614bb1565b915050611412565b506000816001600160401b0381111561147d5761147d614431565b6040519080825280602002602001820160405280156114a6578160200160208202803683370190505b5090506000805b8451811015611527576114cb85828151811061143057611430614899565b15611515578481815181106114e2576114e2614899565b60200260200101518383815181106114fc576114fc614899565b60209081029190910101528161151181614bb1565b9250505b8061151f81614bb1565b9150506114ad565b509095945050505050565b600080600e838154811061154857611548614899565b60009182526020918290206040805160c081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b9091041660a082018190529091506115cb90600a614b85565b6115d484611281565b6115e686670de0b6b3a7640000614adc565b6115f09190614b11565b6115fa9190614b11565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611655573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167991906148ed565b6001600160a01b0316336001600160a01b0316146000906116ad5760405162461bcd60e51b815260040161092e919061490a565b50600791909155600855565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561170c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173091906148ed565b6001600160a01b0316336001600160a01b0316146000906117645760405162461bcd60e51b815260040161092e919061490a565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6117e060405180606001604052806000815260200160008152602001600081525090565b61180b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000600c888154811061182057611820614899565b906000526020600020906004020190506000600d898154811061184557611845614899565b60009182526020918290206040805160a081018252919092015460ff8116151582526001600160401b03610100820481169483019490945265ffffffffffff69010000000000000000008204811693830193909352600160781b8104831660608301819052600160a81b9091049093166080820152925042919082161061190e5760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c7564656400000000604482015260640161092e565b6119188a8261326d565b60006119238b6134af565b9050888111156119755760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d617820707269636500604482015260640161092e565b6000600e8c8154811061198a5761198a614899565b6000918252602090912001546119ab90600160f01b900460ff16600a614b85565b826119be8d670de0b6b3a7640000614adc565b6119c89190614b11565b6119d29190614b11565b60028601549091506001600160401b0316811115611a325760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a65206578636565646564000000604482015260640161092e565b60115481601054611a439190614b54565b1115611ab75760405162461bcd60e51b815260206004820152602760248201527f4465706f7369746f72793a20746f74616c207061796f7574206869742070617960448201527f6f75742063617000000000000000000000000000000000000000000000000000606482015260840161092e565b6001850154600160a01b900460ff16611ad05780611ad2565b8a5b856000016000828254611ae591906149b2565b90915550508351611afa578360400151611b0a565b828460400151611b0a9190614bcc565b65ffffffffffff1660208801526003850180548c9190600090611b2e908490614b54565b9091555050600285018054829190600890611b5a908490600160401b90046001600160401b0316614bf6565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550808560010160158282829054906101000a90046001600160401b0316611ba49190614bf6565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550611bd9898289602001518f8c613525565b60408901919091526060810151909650611bf39082614b54565b876000018181525050876001600160a01b0316896001600160a01b03168d7f4f0ed72ede64d6052fad7cbe06ab6234ec2c0cc3255a8566e9fecff3958142388e868c604001518c600001518d606001518e604001518f60200151604051611c8b9796959493929190968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60405180910390a4600b546001860154611cb4916001600160a01b03918216913391168e61384b565b8060106000828254611cc69190614b54565b9091555050600185015460808501516001600160401b03600160a81b909204821691161015611d215760008086556040518d917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611d2b565b611d2b8c846138ba565b50505050505095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db191906148ed565b6001600160a01b0316336001600160a01b03161480611e575750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4291906148ed565b6001600160a01b0316336001600160a01b0316145b80611ee95750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed491906148ed565b6001600160a01b0316336001600160a01b0316145b611f355760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a65640000000000000000000000000000000000604482015260640161092e565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fac91906148ed565b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038281166000908152600a6020908152604080832085845290915281205490911633146120515760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e640000604482015260640161092e565b6001600160a01b038316600090815260096020526040902080548390811061207b5761207b614899565b6000918252602090912060029091020160010154600160601b900465ffffffffffff16156120eb5760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d656400000000000000604482015260640161092e565b503360009081526009602052604080822080546001600160a01b03861684529190922080549192918490811061212357612123614899565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b038516815260099091526040902080548390811061222d5761222d614899565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e591906148ed565b6001600160a01b0316336001600160a01b0316146000906123195760405162461bcd60e51b815260040161092e919061490a565b506001600160a01b0383166123705760405162461bcd60e51b815260206004820152601560248201527f5a65726f20616464726573733a20506172746e65720000000000000000000000604482015260640161092e565b6006548111156123b45760405162461bcd60e51b815260206004820152600f60248201526e0e4caeec2e4c840e8dede40d0d2ced608b1b604482015260640161092e565b60408051808201825292835260208084019283526001600160a01b0390941660009081526003909452909220905181559051600190910155565b600080600e838154811061240457612404614899565b600091825260208083206040805160c081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b81049091166080840152600160f01b900460ff1660a083015290925061248190426149b2565b9050816040015165ffffffffffff1681600c86815481106124a4576124a4614899565b60009182526020909120600490910201600101546115f09190600160a81b90046001600160401b0316614adc565b600c81815481106124e257600080fd5b600091825260209091206004909102018054600182015460028301546003909301549193506001600160a01b0381169260ff600160a01b830416926001600160401b03600160a81b90930483169282811692600160401b9004169087565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b791906148ed565b6001600160a01b0316336001600160a01b0316146000906125eb5760405162461bcd60e51b815260040161092e919061490a565b506001600160a01b0383166126425760405162461bcd60e51b815260206004820152601660248201527f5a65726f20616464726573733a20526566657272657200000000000000000000604482015260640161092e565b60055461264f8284614b54565b111561268f5760405162461bcd60e51b815260206004820152600f60248201526e0e4caeec2e4c840e8dede40d0d2ced608b1b604482015260640161092e565b60408051808201825292835260208084019283526001600160a01b0390941660009081526004909452909220905181559051600190910155565b60006126d4826123ee565b600c83815481106126e7576126e7614899565b906000526020600020906004020160010160159054906101000a90046001600160401b031661271691906148c5565b6001600160401b031692915050565b6012602052816000526040600020818154811061274157600080fd5b90600052602060002001600091509150505481565b600d818154811061276657600080fd5b60009182526020909120015460ff811691506001600160401b03610100820481169165ffffffffffff69010000000000000000008204811692600160781b830490911691600160a81b90041685565b6001600160a01b0382166000908152600960205260408120805482918291859081106127e3576127e3614899565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b9092049093166080830152919450915015801561286a575042816040015165ffffffffffff1611155b80156128765750805115155b9150509250929050565b60606000805b600c548110156128be5761289981611167565b156128ac57816128a881614bb1565b9250505b806128b681614bb1565b915050612886565b506000816001600160401b038111156128d9576128d9614431565b604051908082528060200260200182016040528015612902578160200160208202803683370190505b5090506000805b600c5481101561295f5761291c81611167565b1561294d578083838151811061293457612934614899565b60209081029190910101528161294981614bb1565b9250505b8061295781614bb1565b915050612909565b50909392505050565b60008042815b8551811015612a455760008061299d8989858151811061299057612990614899565b60200260200101516127b5565b915091508015612a30576001600160a01b038916600090815260096020526040902088518591908a90869081106129d6576129d6614899565b6020026020010151815481106129ee576129ee614899565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff1602179055508185612a2d9190614b54565b94505b50508080612a3d90614bb1565b91505061296e565b508315612aee57604051635d043b2960e11b8152600481018390526001600160a01b0387811660248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063ba087652906064016020604051808303816000875af1158015612ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae59190614b6c565b9250505061139d565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612b5d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115279190614b94565b336000908152600960205260409020805482908110612ba257612ba2614899565b600091825260209091206001600290920201015465ffffffffffff16612c0a5760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e64000000000000604482015260640161092e565b336000908152600a6020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60096020528160005260406000208181548110612c6c57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2a91906148ed565b6001600160a01b0316336001600160a01b031614600090612d5e5760405162461bcd60e51b815260040161092e919061490a565b50601155565b600e8181548110612d7457600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1686565b6001600160a01b0381166000908152600960209081526040808320805482518185028101850190935280835260609493849084015b82821015612e6d5760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b900490911660808301529083529092019101612df7565b505050509050600080600090505b8251811015612efc57828181518110612e9657612e96614899565b60200260200101516060015165ffffffffffff166000148015612ed75750828181518110612ec657612ec6614899565b602002602001015160000151600014155b15612eea5781612ee681614bb1565b9250505b80612ef481614bb1565b915050612e7b565b506000816001600160401b03811115612f1757612f17614431565b604051908082528060200260200182016040528015612f40578160200160208202803683370190505b5090506000805b845181101561152757848181518110612f6257612f62614899565b60200260200101516060015165ffffffffffff166000148015612fa35750848181518110612f9257612f92614899565b602002602001015160000151600014155b15612fd45780838381518110612fbb57612fbb614899565b602090810291909101015281612fd081614bb1565b9250505b80612fde81614bb1565b915050612f47565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306a9190614b6c565b600e838154811061307d5761307d614899565b60009182526020909120015461309e90600160f01b900460ff16600a614b85565b6112c9846126c9565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311e91906148ed565b6001600160a01b0316336001600160a01b0316146000906131525760405162461bcd60e51b815260040161092e919061490a565b50600555565b60408051606081018252600080825260208201819052918101919091526000828152600f6020908152604091829020825160808101845290546001600160401b038116825265ffffffffffff600160401b82048116938301939093526e01000000000000000000000000000081049092169281019290925260ff600160a01b909104161515606082018190526131ee5750919050565b60208101516131fd9042614c18565b65ffffffffffff908116602084018190526040808401519092161190830181905261322957805161325c565b806040015165ffffffffffff16826020015165ffffffffffff1682600001516132529190614b25565b61325c9190614c37565b6001600160401b0316825250919050565b613276826123ee565b600c838154811061328957613289614899565b906000526020600020906004020160010160158282829054906101000a90046001600160401b03166132bb91906148c5565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555080600e83815481106132f3576132f3614899565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600f909152604090205460ff600160a01b9091041615611384576000828152600f602052604081209061336084613158565b90508060000151600d858154811061337a5761337a614899565b600091825260209091200180546001906133a390849061010090046001600160401b03166148c5565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550806040015115613482578051825483906000906133ee9084906001600160401b03166148c5565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550806020015182600001600e8282829054906101000a900465ffffffffffff1661343b9190614c18565b82546101009290920a65ffffffffffff81810219909316918316021790915583546dffffffffffff00000000000000001916600160401b91861691909102178355506134a9565b81547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1682555b50505050565b6000600e82815481106134c4576134c4614899565b6000918252602090912001546134e590600160f01b900460ff16600a614b85565b6134ee83613e3c565b600d848154811061350157613501614899565b6000918252602090912001546112d3919061010090046001600160401b0316614adc565b60006135526040518060800160405280600081526020016000815260200160008152602001600081525090565b600061355f87858a613f35565b6001600160a01b03891660009081526009602052604081205460608301519293509161358c908a90614b54565b9050600083600001518460600151856020015186604001516135ae9190614b54565b6135b891906149b2565b6135c291906149b2565b600b5485519192506001600160a01b0316906340c10f199030906135e69086614b54565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561364457600080fd5b505af1158015613658573d6000803e3d6000fd5b5050604051636e553f6560e01b815260048101859052306024820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169150636e553f65906044016020604051808303816000875af11580156136cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f09190614b6c565b600b546040516340c10f1960e01b81526001600160a01b0390911660048201819052602482018590529192506340c10f1990604401600060405180830381600087803b15801561373f57600080fd5b505af1158015613753573d6000803e3d6000fd5b5050506001600160a01b03909c166000908152600960209081526040808320815160a08101835294855265ffffffffffff4281168685019081529e8116928601928352606086018581529d81166080870190815282546001818101855593875294909520955160029094029095019283559c5191909c0180549c519b5192518416600160901b0265ffffffffffff60901b19938516600160601b029390931677ffffffffffffffffffffffff000000000000000000000000199c8516600160301b026bffffffffffffffffffffffff19909e1692909416919091179b909b179990991617979097179097559890975095505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790526134a99085906141ea565b6000600e83815481106138cf576138cf614899565b60009182526020918290206040805160c081018252929091015465ffffffffffff808216808552600160301b8304821695850195909552600160601b8204811692840192909252600160901b810482166060840152600160c01b810490911660808301819052600160f01b90910460ff1660a083015290925061395191614bcc565b65ffffffffffff168265ffffffffffff1610613e37576000600c848154811061397c5761397c614899565b600091825260208083206040805160e08101825260049094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b8404161515918401919091526001600160401b03600160a81b9092048216606084015260028101548083166080850152600160401b900490911660a08301526003015460c0820152600d8054919350859187908110613a1a57613a1a614899565b600091825260209091200154613a3f9190600160781b900465ffffffffffff16614c18565b65ffffffffffff1690506000613a54866134af565b905060008360400151613a68578351613aa2565b60a0850151613a7890600a614b85565b84518390613a8e90670de0b6b3a7640000614adc565b613a989190614b11565b613aa29190614b11565b905082856060015165ffffffffffff1682613abd9190614adc565b613ac79190614b11565b600c8881548110613ada57613ada614899565b906000526020600020906004020160020160006101000a8154816001600160401b0302191690836001600160401b03160217905550600083866040015165ffffffffffff1683613b2a9190614adc565b613b349190614b11565b90506000817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bbb9190614b6c565b613bc59086614adc565b613bcf9190614b11565b9050887f3070b0e3e52b8713c7489d32604ea4b0970024f74c6e05319269a19bc1e3a9d9600d8b81548110613c0657613c06614899565b60009182526020918290200154604080516101009092046001600160401b0390811683528616928201929092520160405180910390a2600d8981548110613c4f57613c4f614899565b6000918252602090912001546001600160401b03610100909104811690821610613cbd5780600d8a81548110613c8757613c87614899565b9060005260206000200160000160016101000a8154816001600160401b0302191690836001600160401b03160217905550613df5565b600081600d8b81548110613cd357613cd3614899565b600091825260209091200154613cf7919061010090046001600160401b03166148c5565b90506040518060800160405280826001600160401b031681526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600f60008c815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600e6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160146101000a81548160ff021916908315150217905550905050505b87600e8a81548110613e0957613e09614899565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ec09190614b6c565b600e8381548110613ed357613ed3614899565b600091825260209091200154613ef490600160f01b900460ff16600a614b85565b600c8481548110613f0757613f07614899565b60009182526020909120600490910201600101546112d39190600160a81b90046001600160401b0316614adc565b613f606040518060800160405280600081526020016000815260200160008152602001600081525090565b7f000000000000000000000000000000000000000000000000000000000000000060075485613f8f9190614adc565b613f999190614b11565b81602001818151613faa9190614b54565b9052506008547f000000000000000000000000000000000000000000000000000000000000000090613fdc9086614adc565b613fe69190614b11565b81604001818151613ff79190614b54565b9052506001600160a01b038216600090815260036020526040902060010154156140f3576001600160a01b0382166000908152600360205260408120600101547f0000000000000000000000000000000000000000000000000000000000000000906140639087614adc565b61406d9190614b11565b6001600160a01b03841660009081526003602052604090205490915081106140b2576001600160a01b03831660009081526003602052604090205460608301526140ba565b606082018190525b60608201516001600160a01b038416600090815260036020526040812080549091906140e79084906149b2565b9091555061139d915050565b6001600160a01b0383166000908152600460209081526040918290208251808401909352805480845260019091015491830191909152156141975780517f00000000000000000000000000000000000000000000000000000000000000009061415c9087614adc565b6141669190614b11565b8083526001600160a01b03851660009081526002602052604081208054909190614191908490614b54565b90915550505b6020810151156141e2577f00000000000000000000000000000000000000000000000000000000000000008160200151866141d29190614adc565b6141dc9190614b11565b60608301525b509392505050565b600061423f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142cf9092919063ffffffff16565b805190915015613e37578080602001905181019061425d9190614b94565b613e375760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161092e565b60606115fa8484600085856001600160a01b0385163b6143315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161092e565b600080866001600160a01b0316858760405161434d9190614c89565b60006040518083038185875af1925050503d806000811461438a576040519150601f19603f3d011682016040523d82523d6000602084013e61438f565b606091505b509150915061439f8282866143aa565b979650505050505050565b606083156143b957508161139d565b8251156143c95782518084602001fd5b8160405162461bcd60e51b815260040161092e9190614ca5565b6001600160a01b03811681146143f857600080fd5b50565b60006020828403121561440d57600080fd5b813561139d816143e3565b60006020828403121561442a57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561446957614469614431565b60405290565b604051601f8201601f191681016001600160401b038111828210171561449757614497614431565b604052919050565b6000604051606081018181106001600160401b03821117156144c3576144c3614431565b60405290508060608301848111156144da57600080fd5b835b818110156144f45780358352602092830192016144dc565b50505092915050565b80151581146143f857600080fd5b8035614516816144fd565b919050565b600082601f83011261452c57600080fd5b614534614447565b80604084018581111561454657600080fd5b845b81811015611527578035845260209384019301614548565b600082601f83011261457157600080fd5b614579614447565b80604084018581111561458b57600080fd5b845b8181101561152757803563ffffffff811681146145aa5760008081fd5b84526020938401930161458d565b600080600080600061014086880312156145d157600080fd5b85356145dc816143e3565b94506020603f870188136145ef57600080fd5b6145fb8882890161449f565b945087609f88011261460c57600080fd5b614614614447565b8060c089018a81111561462657600080fd5b60808a015b8181101561464b57803561463e816144fd565b845292840192840161462b565b508196506146598b8261451b565b95505050505061466d876101008801614560565b90509295509295909350565b6000806040838503121561468c57600080fd5b8235614697816143e3565b915060208301356146a7816144fd565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156146ea578351835292840192918401916001016146ce565b50909695505050505050565b6000806040838503121561470957600080fd5b50508035926020909101359150565b600080600080600060a0868803121561473057600080fd5b8535945060208601359350604086013592506060860135614750816143e3565b91506080860135614760816143e3565b809150509295509295909350565b6000806040838503121561478157600080fd5b823561478c816143e3565b946020939093013593505050565b6000806000606084860312156147af57600080fd5b83356147ba816143e3565b95602085013595506040909401359392505050565b6000806000606084860312156147e457600080fd5b83356147ef816143e3565b92506020848101356001600160401b038082111561480c57600080fd5b818701915087601f83011261482057600080fd5b81358181111561483257614832614431565b8060051b915061484384830161446f565b818152918301840191848101908a84111561485d57600080fd5b938501935b8385101561487b57843582529385019390850190614862565b8097505050505050506148906040850161450b565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03838116908316818110156148e5576148e56148af565b039392505050565b6000602082840312156148ff57600080fd5b815161139d816143e3565b600060208083526000845481600182811c91508083168061492c57607f831692505b85831081141561494a57634e487b7160e01b85526022600452602485fd5b8786018381526020018180156149675760018114614978576149a3565b60ff198616825287820196506149a3565b60008b81526020902060005b8681101561499d57815484820152908501908901614984565b83019750505b50949998505050505050505050565b6000828210156149c4576149c46148af565b500390565b6000602082840312156149db57600080fd5b815160ff8116811461139d57600080fd5b600181815b80851115614a27578160001904821115614a0d57614a0d6148af565b80851615614a1a57918102915b93841c93908002906149f1565b509250929050565b600082614a3e575060016111ca565b81614a4b575060006111ca565b8160018114614a615760028114614a6b57614a87565b60019150506111ca565b60ff841115614a7c57614a7c6148af565b50506001821b6111ca565b5060208310610133831016604e8410600b8410161715614aaa575081810a6111ca565b614ab483836149ec565b8060001904821115614ac857614ac86148af565b029392505050565b600061139d8383614a2f565b6000816000190483118215151615614af657614af66148af565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614b2057614b20614afb565b500490565b60006001600160401b0380831681851681830481118215151615614b4b57614b4b6148af565b02949350505050565b60008219821115614b6757614b676148af565b500190565b600060208284031215614b7e57600080fd5b5051919050565b600061139d60ff841683614a2f565b600060208284031215614ba657600080fd5b815161139d816144fd565b6000600019821415614bc557614bc56148af565b5060010190565b600065ffffffffffff808316818516808303821115614bed57614bed6148af565b01949350505050565b60006001600160401b03808316818516808303821115614bed57614bed6148af565b600065ffffffffffff838116908316818110156148e5576148e56148af565b60006001600160401b0380841680614c5157614c51614afb565b92169190910492915050565b60005b83811015614c78578181015183820152602001614c60565b838111156134a95750506000910152565b60008251614c9b818460208701614c5d565b9190910192915050565b6020815260008251806020840152614cc4816040850160208701614c5d565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102e95760003560e01c80639c76978711610191578063c0aa0e8a116100e3578063e0b117ff11610097578063e481b26511610071578063e481b265146107f0578063f1b7dc7814610803578063ff43a1bf1461081657600080fd5b8063e0b117ff1461073e578063e364360014610786578063e3684e391461079957600080fd5b8063c9b67af5116100c8578063c9b67af514610710578063d62fbdd314610718578063d6db4df81461072b57600080fd5b8063c0aa0e8a14610699578063c3e0fb1c146106e857600080fd5b8063b157804611610145578063bcb296671161011f578063bcb2966714610648578063bf7e214f1461065b578063c0680e201461068657600080fd5b8063b157804614610579578063bc24cea9146105a0578063bc3b2b12146105b357600080fd5b8063a587462711610176578063a5874627146104db578063abbf4b17146104ee578063b1283e771461051957600080fd5b80639c769787146104c0578063a4220610146104c857600080fd5b80633d18b9121161024a5780636f345cae116101fe5780637c770aae116101d85780637c770aae1461047957806386ff8b84146104ae578063953db4a4146104b757600080fd5b80636f345cae1461044a5780636f6ff0ad146104535780637a9e5e4b1461046657600080fd5b806346aed74e1161022f57806346aed74e1461040457806364914439146104175780636a6c575d1461043757600080fd5b80633d18b912146103f3578063454f7b8f146103fb57600080fd5b806327507458116102a15780633a3d63ba116102865780633a3d63ba146103915780633adec5a7146103a45780633c4290e1146103b757600080fd5b80632750745814610365578063282c89ce1461038857600080fd5b80630a9d85eb116102d25780630a9d85eb1461032a5780630aebeb4e1461033d57806321a7d29b1461035257600080fd5b806306d008db146102ee5780630700037d1461030a575b600080fd5b6102f760085481565b6040519081526020015b60405180910390f35b6102f76103183660046143fb565b60026020526000908152604090205481565b6102f7610338366004614418565b610829565b61035061034b366004614418565b610883565b005b6102f76103603660046145b8565b6109ce565b610378610373366004614418565b611167565b6040519015158152602001610301565b6102f760115481565b61035061039f366004614418565b6111d0565b6102f76103b2366004614418565b611281565b6103de6103c53660046143fb565b6004602052600090815260409020805460019091015482565b60408051928352602083019190915201610301565b6103506112dd565b6102f760105481565b6102f7610412366004614679565b611388565b61042a6104253660046143fb565b6113a4565b60405161030191906146b2565b6102f76104453660046146f6565b611532565b6102f760065481565b6103506104613660046146f6565b611602565b6103506104743660046143fb565b6116b9565b61048c610487366004614718565b6117bc565b6040805182518152602080840151908201529181015190820152606001610301565b6102f760075481565b6102f760055481565b610350611d3a565b6102f76104d636600461476e565b611fdb565b6103506104e936600461479a565b61226e565b6105016104fc366004614418565b6123ee565b6040516001600160401b039091168152602001610301565b61052c610527366004614418565b6124d2565b604080519788526001600160a01b039096166020880152931515948601949094526001600160401b0391821660608601528116608085015290911660a083015260c082015260e001610301565b6103de6105873660046143fb565b6003602052600090815260409020805460019091015482565b6103506105ae36600461479a565b612540565b6106106105c1366004614418565b600f602052600090815260409020546001600160401b0381169065ffffffffffff600160401b82048116916e01000000000000000000000000000081049091169060ff600160a01b9091041684565b604080516001600160401b0395909516855265ffffffffffff9384166020860152919092169083015215156060820152608001610301565b6102f7610656366004614418565b6126c9565b60015461066e906001600160a01b031681565b6040516001600160a01b039091168152602001610301565b6102f761069436600461476e565b612725565b6106ac6106a7366004614418565b612756565b6040805195151586526001600160401b03948516602087015265ffffffffffff938416908601529116606084015216608082015260a001610301565b6106fb6106f636600461476e565b6127b5565b60408051928352901515602083015201610301565b61042a612880565b6102f76107263660046147cf565b612968565b61035061073936600461476e565b612b81565b61075161074c36600461476e565b612c50565b6040805195865265ffffffffffff9485166020870152928416928501929092528216606084015216608082015260a001610301565b610350610794366004614418565b612cb3565b6107ac6107a7366004614418565b612d64565b6040805165ffffffffffff97881681529587166020870152938616938501939093529084166060840152909216608082015260ff90911660a082015260c001610301565b61042a6107fe3660046143fb565b612dc2565b6102f7610811366004614418565b612fe6565b610350610824366004614418565b6130a7565b60008061083583613158565b90508060000151600d848154811061084f5761084f614899565b600091825260209091200154610873919061010090046001600160401b03166148c5565b6001600160401b03169392505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108d6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108fa91906148ed565b6001600160a01b0316336001600160a01b0316146000906109375760405162461bcd60e51b815260040161092e919061490a565b60405180910390fd5b5042600d828154811061094c5761094c614899565b90600052602060002001600001600f6101000a81548165ffffffffffff021916908365ffffffffffff1602179055506000600c828154811061099057610990614899565b6000918252602082206004909102019190915560405182917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a250565b60015460408051630505c8c960e01b815290516000926001600160a01b031691630505c8c99160048083019260209291908290030181865afa158015610a18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3c91906148ed565b6001600160a01b0316336001600160a01b031614600090610a705760405162461bcd60e51b815260040161092e919061490a565b506020830151600090610a849042906149b2565b90506000876001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aea91906149c9565b60ff169050600086816020020151610b03578751610b3b565b610b0e82600a614ad0565b60208901518951610b2790670de0b6b3a7640000614adc565b610b319190614b11565b610b3b9190614b11565b85519091506000908490610b559063ffffffff1684614b25565b6001600160401b0316610b689190614b11565b90506000620186a08a60026020020151610b8b906001600160401b038616614adc565b610b959190614b11565b610ba8906001600160401b038516614b54565b90506000836001600160401b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c14573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c389190614b6c565b60208d0151610c479190614adc565b610c519190614b11565b600c80546040805160e0810190915290995091925090808d6000602002015181526020018e6001600160a01b031681526020018c600060028110610c9757610c97614899565b60209081029190910151151582526001600160401b0380891683830152878116604080850191909152600060608086018290526080958601829052875460018181018a5598835291859020875160049093020191825593860151818801805488850151968901518616600160a81b0267ffffffffffffffff60a81b19971515600160a01b027fffffffffffffffffffffff0000000000000000000000000000000000000000009092166001600160a01b03909416939093171795909516179093559284015160028301805460a0808801518516600160401b026fffffffffffffffffffffffffffffffff19909216939094169290921791909117905560c09093015160039091015580519182019052600d9181908d90602002015115158152602001836001600160401b031681526020018b600060028110610ddb57610ddb614899565b602002015165ffffffffffff1681526020018b600160028110610e0057610e00614899565b6020908102919091015165ffffffffffff90811683526001600160401b038088169383019390935284546001810186556000958652828620855191018054868501516040808901516060808b01516080909b01518a16600160a81b0267ffffffffffffffff60a81b199b8916600160781b027fffffffffffffffffffffff000000000000ffffffffffffffffffffffffffffff938a16690100000000000000000002939093167fffffffffffffffffffffff000000000000000000000000ffffffffffffffffff95909b166101000268ffffffffffffffff00199815159890981668ffffffffffffffffff1990961695909517969096179290921697909717179690961695909517909455825160c081018452428216808252928101929092528a1691810191909152600e9290918201908b906020908102919091015163ffffffff168252018a6001602002015163ffffffff1665ffffffffffff1681526020018760ff168152509080600181540180825580915050600190039060005260206000200160009091909190915060008201518160000160006101000a81548165ffffffffffff021916908365ffffffffffff16021790555060208201518160000160066101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600c6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160126101000a81548165ffffffffffff021916908365ffffffffffff16021790555060808201518160000160186101000a81548165ffffffffffff021916908365ffffffffffff16021790555060a082015181600001601e6101000a81548160ff021916908360ff1602179055505050601260008d6001600160a01b03166001600160a01b031681526020019081526020016000208790806001815401808255809150506001900390600052602060002001600090919091909150558b6001600160a01b03167f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316887f2f6ff727bd580b1d1b8332e28aa93ed4ec9d8b08d6e30d6b4c9f7aa63ca17f638e60016003811061113c5761113c614899565b602002015160405161115091815260200190565b60405180910390a450505050505095945050505050565b6000600c828154811061117c5761117c614899565b9060005260206000209060040201600001546000141580156111ca575042600d83815481106111ad576111ad614899565b600091825260209091200154600160781b900465ffffffffffff16115b92915050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611223573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061124791906148ed565b6001600160a01b0316336001600160a01b03161460009061127b5760405162461bcd60e51b815260040161092e919061490a565b50600655565b6000600e828154811061129657611296614899565b6000918252602090912001546112b790600160f01b900460ff16600a614b85565b6112c083612fe6565b6112c984610829565b6112d39190614adc565b6111ca9190614b11565b3360008181526002602052604080822080549290555163a9059cbb60e01b8152600481019290925260248201819052906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015611360573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113849190614b94565b5050565b600061139d8361139785612dc2565b84612968565b9392505050565b6001600160a01b038116600090815260126020908152604080832080548251818502810185019093528083526060949383018282801561140357602002820191906000526020600020905b8154815260200190600101908083116113ef575b50505050509050600080600090505b82518110156114625761143d83828151811061143057611430614899565b6020026020010151611167565b15611450578161144c81614bb1565b9250505b8061145a81614bb1565b915050611412565b506000816001600160401b0381111561147d5761147d614431565b6040519080825280602002602001820160405280156114a6578160200160208202803683370190505b5090506000805b8451811015611527576114cb85828151811061143057611430614899565b15611515578481815181106114e2576114e2614899565b60200260200101518383815181106114fc576114fc614899565b60209081029190910101528161151181614bb1565b9250505b8061151f81614bb1565b9150506114ad565b509095945050505050565b600080600e838154811061154857611548614899565b60009182526020918290206040805160c081018252919092015465ffffffffffff8082168352600160301b8204811694830194909452600160601b8104841692820192909252600160901b820483166060820152600160c01b8204909216608083015260ff600160f01b9091041660a082018190529091506115cb90600a614b85565b6115d484611281565b6115e686670de0b6b3a7640000614adc565b6115f09190614b11565b6115fa9190614b11565b949350505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611655573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061167991906148ed565b6001600160a01b0316336001600160a01b0316146000906116ad5760405162461bcd60e51b815260040161092e919061490a565b50600791909155600855565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa15801561170c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173091906148ed565b6001600160a01b0316336001600160a01b0316146000906117645760405162461bcd60e51b815260040161092e919061490a565b506001805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f2f658b440c35314f52658ea8a740e05b284cdc84dc9ae01e891f21b8933e7cad90600090a250565b6117e060405180606001604052806000815260200160008152602001600081525090565b61180b6040518060800160405280600081526020016000815260200160008152602001600081525090565b6000600c888154811061182057611820614899565b906000526020600020906004020190506000600d898154811061184557611845614899565b60009182526020918290206040805160a081018252919092015460ff8116151582526001600160401b03610100820481169483019490945265ffffffffffff69010000000000000000008204811693830193909352600160781b8104831660608301819052600160a81b9091049093166080820152925042919082161061190e5760405162461bcd60e51b815260206004820152601c60248201527f4465706f7369746f72793a206d61726b657420636f6e636c7564656400000000604482015260640161092e565b6119188a8261326d565b60006119238b6134af565b9050888111156119755760405162461bcd60e51b815260206004820152601f60248201527f4465706f7369746f72793a206d6f7265207468616e206d617820707269636500604482015260640161092e565b6000600e8c8154811061198a5761198a614899565b6000918252602090912001546119ab90600160f01b900460ff16600a614b85565b826119be8d670de0b6b3a7640000614adc565b6119c89190614b11565b6119d29190614b11565b60028601549091506001600160401b0316811115611a325760405162461bcd60e51b815260206004820152601d60248201527f4465706f7369746f72793a206d61782073697a65206578636565646564000000604482015260640161092e565b60115481601054611a439190614b54565b1115611ab75760405162461bcd60e51b815260206004820152602760248201527f4465706f7369746f72793a20746f74616c207061796f7574206869742070617960448201527f6f75742063617000000000000000000000000000000000000000000000000000606482015260840161092e565b6001850154600160a01b900460ff16611ad05780611ad2565b8a5b856000016000828254611ae591906149b2565b90915550508351611afa578360400151611b0a565b828460400151611b0a9190614bcc565b65ffffffffffff1660208801526003850180548c9190600090611b2e908490614b54565b9091555050600285018054829190600890611b5a908490600160401b90046001600160401b0316614bf6565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550808560010160158282829054906101000a90046001600160401b0316611ba49190614bf6565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550611bd9898289602001518f8c613525565b60408901919091526060810151909650611bf39082614b54565b876000018181525050876001600160a01b0316896001600160a01b03168d7f4f0ed72ede64d6052fad7cbe06ab6234ec2c0cc3255a8566e9fecff3958142388e868c604001518c600001518d606001518e604001518f60200151604051611c8b9796959493929190968752602087019590955260408601939093526060850191909152608084015260a083015260c082015260e00190565b60405180910390a4600b546001860154611cb4916001600160a01b03918216913391168e61384b565b8060106000828254611cc69190614b54565b9091555050600185015460808501516001600160401b03600160a81b909204821691161015611d215760008086556040518d917f8401d05adbea6548a6999cc1540766e6d2ff919292142862893d0e62ec79fbe591a2611d2b565b611d2b8c846138ba565b50505050505095945050505050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d8d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611db191906148ed565b6001600160a01b0316336001600160a01b03161480611e575750600160009054906101000a90046001600160a01b03166001600160a01b031663452a93206040518163ffffffff1660e01b8152600401602060405180830381865afa158015611e1e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e4291906148ed565b6001600160a01b0316336001600160a01b0316145b80611ee95750600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ed491906148ed565b6001600160a01b0316336001600160a01b0316145b611f355760405162461bcd60e51b815260206004820152600f60248201527f4f6e6c7920617574686f72697a65640000000000000000000000000000000000604482015260640161092e565b600160009054906101000a90046001600160a01b03166001600160a01b031663fbfa77cf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fac91906148ed565b600b805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b6001600160a01b038281166000908152600a6020908152604080832085845290915281205490911633146120515760405162461bcd60e51b815260206004820152601e60248201527f4465706f7369746f72793a207472616e73666572206e6f7420666f756e640000604482015260640161092e565b6001600160a01b038316600090815260096020526040902080548390811061207b5761207b614899565b6000918252602090912060029091020160010154600160601b900465ffffffffffff16156120eb5760405162461bcd60e51b815260206004820152601960248201527f4465706f7369746f72793a206e6f74652072656465656d656400000000000000604482015260640161092e565b503360009081526009602052604080822080546001600160a01b03861684529190922080549192918490811061212357612123614899565b600091825260208083208454600181810187559585528285206002948502909201805491909402909101908155918401805492909401805465ffffffffffff19811665ffffffffffff94851690811783558654600160301b908190048616026bffffffffffffffffffffffff1990921617178082558554600160601b9081900485160271ffffffffffff000000000000000000000000198216811783559554600160901b9081900490941690930265ffffffffffff60901b1990951677ffffffffffffffffffffffff00000000000000000000000019909316929092179390931790556001600160a01b038516815260099091526040902080548390811061222d5761222d614899565b60009182526020822060029091020190815560010180547fffffffffffffffff00000000000000000000000000000000000000000000000016905592915050565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa1580156122c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122e591906148ed565b6001600160a01b0316336001600160a01b0316146000906123195760405162461bcd60e51b815260040161092e919061490a565b506001600160a01b0383166123705760405162461bcd60e51b815260206004820152601560248201527f5a65726f20616464726573733a20506172746e65720000000000000000000000604482015260640161092e565b6006548111156123b45760405162461bcd60e51b815260206004820152600f60248201526e0e4caeec2e4c840e8dede40d0d2ced608b1b604482015260640161092e565b60408051808201825292835260208084019283526001600160a01b0390941660009081526003909452909220905181559051600190910155565b600080600e838154811061240457612404614899565b600091825260208083206040805160c081018252939091015465ffffffffffff8082168552600160301b82048116938501849052600160601b8204811692850192909252600160901b810482166060850152600160c01b81049091166080840152600160f01b900460ff1660a083015290925061248190426149b2565b9050816040015165ffffffffffff1681600c86815481106124a4576124a4614899565b60009182526020909120600490910201600101546115f09190600160a81b90046001600160401b0316614adc565b600c81815481106124e257600080fd5b600091825260209091206004909102018054600182015460028301546003909301549193506001600160a01b0381169260ff600160a01b830416926001600160401b03600160a81b90930483169282811692600160401b9004169087565b600160009054906101000a90046001600160a01b03166001600160a01b0316630505c8c96040518163ffffffff1660e01b8152600401602060405180830381865afa158015612593573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125b791906148ed565b6001600160a01b0316336001600160a01b0316146000906125eb5760405162461bcd60e51b815260040161092e919061490a565b506001600160a01b0383166126425760405162461bcd60e51b815260206004820152601660248201527f5a65726f20616464726573733a20526566657272657200000000000000000000604482015260640161092e565b60055461264f8284614b54565b111561268f5760405162461bcd60e51b815260206004820152600f60248201526e0e4caeec2e4c840e8dede40d0d2ced608b1b604482015260640161092e565b60408051808201825292835260208084019283526001600160a01b0390941660009081526004909452909220905181559051600190910155565b60006126d4826123ee565b600c83815481106126e7576126e7614899565b906000526020600020906004020160010160159054906101000a90046001600160401b031661271691906148c5565b6001600160401b031692915050565b6012602052816000526040600020818154811061274157600080fd5b90600052602060002001600091509150505481565b600d818154811061276657600080fd5b60009182526020909120015460ff811691506001600160401b03610100820481169165ffffffffffff69010000000000000000008204811692600160781b830490911691600160a81b90041685565b6001600160a01b0382166000908152600960205260408120805482918291859081106127e3576127e3614899565b60009182526020918290206040805160a0810182526002909302909101805480845260019091015465ffffffffffff80821695850195909552600160301b8104851692840192909252600160601b8204841660608401819052600160901b9092049093166080830152919450915015801561286a575042816040015165ffffffffffff1611155b80156128765750805115155b9150509250929050565b60606000805b600c548110156128be5761289981611167565b156128ac57816128a881614bb1565b9250505b806128b681614bb1565b915050612886565b506000816001600160401b038111156128d9576128d9614431565b604051908082528060200260200182016040528015612902578160200160208202803683370190505b5090506000805b600c5481101561295f5761291c81611167565b1561294d578083838151811061293457612934614899565b60209081029190910101528161294981614bb1565b9250505b8061295781614bb1565b915050612909565b50909392505050565b60008042815b8551811015612a455760008061299d8989858151811061299057612990614899565b60200260200101516127b5565b915091508015612a30576001600160a01b038916600090815260096020526040902088518591908a90869081106129d6576129d6614899565b6020026020010151815481106129ee576129ee614899565b9060005260206000209060020201600101600c6101000a81548165ffffffffffff021916908365ffffffffffff1602179055508185612a2d9190614b54565b94505b50508080612a3d90614bb1565b91505061296e565b508315612aee57604051635d043b2960e11b8152600481018390526001600160a01b0387811660248301523060448301527f0000000000000000000000000000000000000000000000000000000000000000169063ba087652906064016020604051808303816000875af1158015612ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae59190614b6c565b9250505061139d565b60405163a9059cbb60e01b81526001600160a01b038781166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303816000875af1158015612b5d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115279190614b94565b336000908152600960205260409020805482908110612ba257612ba2614899565b600091825260209091206001600290920201015465ffffffffffff16612c0a5760405162461bcd60e51b815260206004820152601a60248201527f4465706f7369746f72793a206e6f7465206e6f7420666f756e64000000000000604482015260640161092e565b336000908152600a6020908152604080832093835292905220805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0392909216919091179055565b60096020528160005260406000208181548110612c6c57600080fd5b60009182526020909120600290910201805460019091015490925065ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b9091041685565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa158015612d06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d2a91906148ed565b6001600160a01b0316336001600160a01b031614600090612d5e5760405162461bcd60e51b815260040161092e919061490a565b50601155565b600e8181548110612d7457600080fd5b60009182526020909120015465ffffffffffff8082169250600160301b8204811691600160601b8104821691600160901b8204811691600160c01b810490911690600160f01b900460ff1686565b6001600160a01b0381166000908152600960209081526040808320805482518185028101850190935280835260609493849084015b82821015612e6d5760008481526020908190206040805160a081018252600286029092018054835260019081015465ffffffffffff80821685870152600160301b8204811693850193909352600160601b810483166060850152600160901b900490911660808301529083529092019101612df7565b505050509050600080600090505b8251811015612efc57828181518110612e9657612e96614899565b60200260200101516060015165ffffffffffff166000148015612ed75750828181518110612ec657612ec6614899565b602002602001015160000151600014155b15612eea5781612ee681614bb1565b9250505b80612ef481614bb1565b915050612e7b565b506000816001600160401b03811115612f1757612f17614431565b604051908082528060200260200182016040528015612f40578160200160208202803683370190505b5090506000805b845181101561152757848181518110612f6257612f62614899565b60200260200101516060015165ffffffffffff166000148015612fa35750848181518110612f9257612f92614899565b602002602001015160000151600014155b15612fd45780838381518110612fbb57612fbb614899565b602090810291909101015281612fd081614bb1565b9250505b80612fde81614bb1565b915050612f47565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613046573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061306a9190614b6c565b600e838154811061307d5761307d614899565b60009182526020909120015461309e90600160f01b900460ff16600a614b85565b6112c9846126c9565b600160009054906101000a90046001600160a01b03166001600160a01b0316630c340a246040518163ffffffff1660e01b8152600401602060405180830381865afa1580156130fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061311e91906148ed565b6001600160a01b0316336001600160a01b0316146000906131525760405162461bcd60e51b815260040161092e919061490a565b50600555565b60408051606081018252600080825260208201819052918101919091526000828152600f6020908152604091829020825160808101845290546001600160401b038116825265ffffffffffff600160401b82048116938301939093526e01000000000000000000000000000081049092169281019290925260ff600160a01b909104161515606082018190526131ee5750919050565b60208101516131fd9042614c18565b65ffffffffffff908116602084018190526040808401519092161190830181905261322957805161325c565b806040015165ffffffffffff16826020015165ffffffffffff1682600001516132529190614b25565b61325c9190614c37565b6001600160401b0316825250919050565b613276826123ee565b600c838154811061328957613289614899565b906000526020600020906004020160010160158282829054906101000a90046001600160401b03166132bb91906148c5565b92506101000a8154816001600160401b0302191690836001600160401b0316021790555080600e83815481106132f3576132f3614899565b60009182526020808320909101805465ffffffffffff94909416600160301b026bffffffffffff0000000000001990941693909317909255838152600f909152604090205460ff600160a01b9091041615611384576000828152600f602052604081209061336084613158565b90508060000151600d858154811061337a5761337a614899565b600091825260209091200180546001906133a390849061010090046001600160401b03166148c5565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550806040015115613482578051825483906000906133ee9084906001600160401b03166148c5565b92506101000a8154816001600160401b0302191690836001600160401b03160217905550806020015182600001600e8282829054906101000a900465ffffffffffff1661343b9190614c18565b82546101009290920a65ffffffffffff81810219909316918316021790915583546dffffffffffff00000000000000001916600160401b91861691909102178355506134a9565b81547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1682555b50505050565b6000600e82815481106134c4576134c4614899565b6000918252602090912001546134e590600160f01b900460ff16600a614b85565b6134ee83613e3c565b600d848154811061350157613501614899565b6000918252602090912001546112d3919061010090046001600160401b0316614adc565b60006135526040518060800160405280600081526020016000815260200160008152602001600081525090565b600061355f87858a613f35565b6001600160a01b03891660009081526009602052604081205460608301519293509161358c908a90614b54565b9050600083600001518460600151856020015186604001516135ae9190614b54565b6135b891906149b2565b6135c291906149b2565b600b5485519192506001600160a01b0316906340c10f199030906135e69086614b54565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b15801561364457600080fd5b505af1158015613658573d6000803e3d6000fd5b5050604051636e553f6560e01b815260048101859052306024820152600092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169150636e553f65906044016020604051808303816000875af11580156136cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136f09190614b6c565b600b546040516340c10f1960e01b81526001600160a01b0390911660048201819052602482018590529192506340c10f1990604401600060405180830381600087803b15801561373f57600080fd5b505af1158015613753573d6000803e3d6000fd5b5050506001600160a01b03909c166000908152600960209081526040808320815160a08101835294855265ffffffffffff4281168685019081529e8116928601928352606086018581529d81166080870190815282546001818101855593875294909520955160029094029095019283559c5191909c0180549c519b5192518416600160901b0265ffffffffffff60901b19938516600160601b029390931677ffffffffffffffffffffffff000000000000000000000000199c8516600160301b026bffffffffffffffffffffffff19909e1692909416919091179b909b179990991617979097179097559890975095505050505050565b604080516001600160a01b0385811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b1790526134a99085906141ea565b6000600e83815481106138cf576138cf614899565b60009182526020918290206040805160c081018252929091015465ffffffffffff808216808552600160301b8304821695850195909552600160601b8204811692840192909252600160901b810482166060840152600160c01b810490911660808301819052600160f01b90910460ff1660a083015290925061395191614bcc565b65ffffffffffff168265ffffffffffff1610613e37576000600c848154811061397c5761397c614899565b600091825260208083206040805160e08101825260049094029091018054845260018101546001600160a01b0381169385019390935260ff600160a01b8404161515918401919091526001600160401b03600160a81b9092048216606084015260028101548083166080850152600160401b900490911660a08301526003015460c0820152600d8054919350859187908110613a1a57613a1a614899565b600091825260209091200154613a3f9190600160781b900465ffffffffffff16614c18565b65ffffffffffff1690506000613a54866134af565b905060008360400151613a68578351613aa2565b60a0850151613a7890600a614b85565b84518390613a8e90670de0b6b3a7640000614adc565b613a989190614b11565b613aa29190614b11565b905082856060015165ffffffffffff1682613abd9190614adc565b613ac79190614b11565b600c8881548110613ada57613ada614899565b906000526020600020906004020160020160006101000a8154816001600160401b0302191690836001600160401b03160217905550600083866040015165ffffffffffff1683613b2a9190614adc565b613b349190614b11565b90506000817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613b97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bbb9190614b6c565b613bc59086614adc565b613bcf9190614b11565b9050887f3070b0e3e52b8713c7489d32604ea4b0970024f74c6e05319269a19bc1e3a9d9600d8b81548110613c0657613c06614899565b60009182526020918290200154604080516101009092046001600160401b0390811683528616928201929092520160405180910390a2600d8981548110613c4f57613c4f614899565b6000918252602090912001546001600160401b03610100909104811690821610613cbd5780600d8a81548110613c8757613c87614899565b9060005260206000200160000160016101000a8154816001600160401b0302191690836001600160401b03160217905550613df5565b600081600d8b81548110613cd357613cd3614899565b600091825260209091200154613cf7919061010090046001600160401b03166148c5565b90506040518060800160405280826001600160401b031681526020018a65ffffffffffff168152602001896080015165ffffffffffff16815260200160011515815250600f60008c815260200190815260200160002060008201518160000160006101000a8154816001600160401b0302191690836001600160401b0316021790555060208201518160000160086101000a81548165ffffffffffff021916908365ffffffffffff160217905550604082015181600001600e6101000a81548165ffffffffffff021916908365ffffffffffff16021790555060608201518160000160146101000a81548160ff021916908315150217905550905050505b87600e8a81548110613e0957613e09614899565b6000918252602090912001805465ffffffffffff191665ffffffffffff929092169190911790555050505050505b505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015613e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ec09190614b6c565b600e8381548110613ed357613ed3614899565b600091825260209091200154613ef490600160f01b900460ff16600a614b85565b600c8481548110613f0757613f07614899565b60009182526020909120600490910201600101546112d39190600160a81b90046001600160401b0316614adc565b613f606040518060800160405280600081526020016000815260200160008152602001600081525090565b7f000000000000000000000000000000000000000000000000000000000000000060075485613f8f9190614adc565b613f999190614b11565b81602001818151613faa9190614b54565b9052506008547f000000000000000000000000000000000000000000000000000000000000000090613fdc9086614adc565b613fe69190614b11565b81604001818151613ff79190614b54565b9052506001600160a01b038216600090815260036020526040902060010154156140f3576001600160a01b0382166000908152600360205260408120600101547f0000000000000000000000000000000000000000000000000000000000000000906140639087614adc565b61406d9190614b11565b6001600160a01b03841660009081526003602052604090205490915081106140b2576001600160a01b03831660009081526003602052604090205460608301526140ba565b606082018190525b60608201516001600160a01b038416600090815260036020526040812080549091906140e79084906149b2565b9091555061139d915050565b6001600160a01b0383166000908152600460209081526040918290208251808401909352805480845260019091015491830191909152156141975780517f00000000000000000000000000000000000000000000000000000000000000009061415c9087614adc565b6141669190614b11565b8083526001600160a01b03851660009081526002602052604081208054909190614191908490614b54565b90915550505b6020810151156141e2577f00000000000000000000000000000000000000000000000000000000000000008160200151866141d29190614adc565b6141dc9190614b11565b60608301525b509392505050565b600061423f826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166142cf9092919063ffffffff16565b805190915015613e37578080602001905181019061425d9190614b94565b613e375760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161092e565b60606115fa8484600085856001600160a01b0385163b6143315760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161092e565b600080866001600160a01b0316858760405161434d9190614c89565b60006040518083038185875af1925050503d806000811461438a576040519150601f19603f3d011682016040523d82523d6000602084013e61438f565b606091505b509150915061439f8282866143aa565b979650505050505050565b606083156143b957508161139d565b8251156143c95782518084602001fd5b8160405162461bcd60e51b815260040161092e9190614ca5565b6001600160a01b03811681146143f857600080fd5b50565b60006020828403121561440d57600080fd5b813561139d816143e3565b60006020828403121561442a57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b038111828210171561446957614469614431565b60405290565b604051601f8201601f191681016001600160401b038111828210171561449757614497614431565b604052919050565b6000604051606081018181106001600160401b03821117156144c3576144c3614431565b60405290508060608301848111156144da57600080fd5b835b818110156144f45780358352602092830192016144dc565b50505092915050565b80151581146143f857600080fd5b8035614516816144fd565b919050565b600082601f83011261452c57600080fd5b614534614447565b80604084018581111561454657600080fd5b845b81811015611527578035845260209384019301614548565b600082601f83011261457157600080fd5b614579614447565b80604084018581111561458b57600080fd5b845b8181101561152757803563ffffffff811681146145aa5760008081fd5b84526020938401930161458d565b600080600080600061014086880312156145d157600080fd5b85356145dc816143e3565b94506020603f870188136145ef57600080fd5b6145fb8882890161449f565b945087609f88011261460c57600080fd5b614614614447565b8060c089018a81111561462657600080fd5b60808a015b8181101561464b57803561463e816144fd565b845292840192840161462b565b508196506146598b8261451b565b95505050505061466d876101008801614560565b90509295509295909350565b6000806040838503121561468c57600080fd5b8235614697816143e3565b915060208301356146a7816144fd565b809150509250929050565b6020808252825182820181905260009190848201906040850190845b818110156146ea578351835292840192918401916001016146ce565b50909695505050505050565b6000806040838503121561470957600080fd5b50508035926020909101359150565b600080600080600060a0868803121561473057600080fd5b8535945060208601359350604086013592506060860135614750816143e3565b91506080860135614760816143e3565b809150509295509295909350565b6000806040838503121561478157600080fd5b823561478c816143e3565b946020939093013593505050565b6000806000606084860312156147af57600080fd5b83356147ba816143e3565b95602085013595506040909401359392505050565b6000806000606084860312156147e457600080fd5b83356147ef816143e3565b92506020848101356001600160401b038082111561480c57600080fd5b818701915087601f83011261482057600080fd5b81358181111561483257614832614431565b8060051b915061484384830161446f565b818152918301840191848101908a84111561485d57600080fd5b938501935b8385101561487b57843582529385019390850190614862565b8097505050505050506148906040850161450b565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001600160401b03838116908316818110156148e5576148e56148af565b039392505050565b6000602082840312156148ff57600080fd5b815161139d816143e3565b600060208083526000845481600182811c91508083168061492c57607f831692505b85831081141561494a57634e487b7160e01b85526022600452602485fd5b8786018381526020018180156149675760018114614978576149a3565b60ff198616825287820196506149a3565b60008b81526020902060005b8681101561499d57815484820152908501908901614984565b83019750505b50949998505050505050505050565b6000828210156149c4576149c46148af565b500390565b6000602082840312156149db57600080fd5b815160ff8116811461139d57600080fd5b600181815b80851115614a27578160001904821115614a0d57614a0d6148af565b80851615614a1a57918102915b93841c93908002906149f1565b509250929050565b600082614a3e575060016111ca565b81614a4b575060006111ca565b8160018114614a615760028114614a6b57614a87565b60019150506111ca565b60ff841115614a7c57614a7c6148af565b50506001821b6111ca565b5060208310610133831016604e8410600b8410161715614aaa575081810a6111ca565b614ab483836149ec565b8060001904821115614ac857614ac86148af565b029392505050565b600061139d8383614a2f565b6000816000190483118215151615614af657614af66148af565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614b2057614b20614afb565b500490565b60006001600160401b0380831681851681830481118215151615614b4b57614b4b6148af565b02949350505050565b60008219821115614b6757614b676148af565b500190565b600060208284031215614b7e57600080fd5b5051919050565b600061139d60ff841683614a2f565b600060208284031215614ba657600080fd5b815161139d816144fd565b6000600019821415614bc557614bc56148af565b5060010190565b600065ffffffffffff808316818516808303821115614bed57614bed6148af565b01949350505050565b60006001600160401b03808316818516808303821115614bed57614bed6148af565b600065ffffffffffff838116908316818110156148e5576148e56148af565b60006001600160401b0380841680614c5157614c51614afb565b92169190910492915050565b60005b83811015614c78578181015183820152602001614c60565b838111156134a95750506000910152565b60008251614c9b818460208701614c5d565b9190910192915050565b6020815260008251806020840152614cc4816040850160208701614c5d565b601f01601f1916919091016040019291505056fea164736f6c634300080a000a",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "close(uint256)": {
        "params": {
          "_id": "ID of market to close"
        }
      },
      "create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "details": "current price should be in 9 decimals.",
        "params": {
          "_booleans": "[capacity in quote, fixed term]",
          "_intervals": "[deposit interval (seconds), tune interval (seconds)]",
          "_market": "[capacity (in HECTA or quote), initial price / HECTA (9 decimals), debt buffer (3 decimals)]",
          "_quoteToken": "token used to deposit",
          "_terms": "[vesting length (if fixed term) or vested timestamp, conclusion timestamp]"
        },
        "returns": {
          "id_": "        ID of new bond market"
        }
      },
      "currentControlVariable(uint256)": {
        "details": "accounts for control variable adjustment",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "control variable for market in HECTA decimals"
        }
      },
      "currentDebt(uint256)": {
        "details": "accounts for debt decay since last deposit",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "current debt for market in HECTA decimals"
        }
      },
      "debtDecay(uint256)": {
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of debt to decay"
        }
      },
      "debtRatio(uint256)": {
        "details": "uses current debt, which accounts for debt decay since last deposit (vs _debtRatio())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "debt ratio for market in quote decimals"
        }
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "params": {
          "_amount": "the amount of quote token to spend",
          "_id": "the ID of the market",
          "_maxPrice": "the maximum price at which to buy",
          "_referral": "the front end operator address",
          "_user": "the recipient of the payout"
        }
      },
      "indexesFor(address)": {
        "params": {
          "_user": "the user to query notes for"
        },
        "returns": {
          "_0": "the pending notes for the user"
        }
      },
      "isLive(uint256)": {
        "params": {
          "_id": "ID of market"
        }
      },
      "liveMarketsFor(address)": {
        "params": {
          "_token": "quote token to check for"
        }
      },
      "marketPrice(uint256)": {
        "details": "accounts for debt and control variable decay since last deposit (vs _marketPrice())",
        "params": {
          "_id": "ID of market"
        },
        "returns": {
          "_0": "price for market in HECTA decimals price is derived from the equation p = cv * dr where p = price cv = control variable dr = debt ratio dr = d / s where d = debt s = supply of token at market creation d -= ( d * (dt / l) ) where dt = change in time l = length of program"
        }
      },
      "payoutFor(uint256,uint256)": {
        "details": "accounts for debt and control variable decay so it is up to date1e18 = hecta decimals (9) + market price decimals (9)",
        "params": {
          "_amount": "amount of quote tokens to spend",
          "_id": "ID of market"
        },
        "returns": {
          "_0": "amount of HECTA to be paid in HECTA decimals"
        }
      },
      "pendingFor(address,uint256)": {
        "params": {
          "_index": "the index of the note in the user's array",
          "_user": "the user that the note belongs to"
        },
        "returns": {
          "matured_": "   if the payout can be redeemed",
          "payout_": "    the payout due, in gHecta"
        }
      },
      "pullNote(address,uint256)": {
        "params": {
          "_from": "the address that approved the note transfer",
          "_index": "the index of the note to transfer (in the sender's array)"
        }
      },
      "pushNote(address,uint256)": {
        "params": {
          "_index": "index of note to approve transfer for",
          "_to": "address to approve note transfer for"
        }
      },
      "redeem(address,uint256[],bool)": {
        "params": {
          "_indexes": "the note indexes to redeem",
          "_unstake": "option for redeem gHecta or Hecta",
          "_user": "the user to redeem for"
        },
        "returns": {
          "_0": "sum of payout sent, in gHecta or Hecta"
        }
      },
      "redeemAll(address,bool)": {
        "details": "if possible, query indexesFor() off-chain and input in redeem() to save gas",
        "params": {
          "_unstake": "option for redeem gHecta or Hecta",
          "_user": "user to redeem all notes for"
        },
        "returns": {
          "_0": "sum of payout sent, in gHecta or Hecta"
        }
      },
      "setPayoutCap(uint256)": {
        "params": {
          "payoutCap_": "ID of market to close"
        }
      }
    },
    "title": "Hectagon Bond Depository",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "close(uint256)": {
        "notice": "disable existing market"
      },
      "create(address,uint256[3],bool[2],uint256[2],uint32[2])": {
        "notice": "creates a new market type"
      },
      "currentControlVariable(uint256)": {
        "notice": "up to date control variable"
      },
      "currentDebt(uint256)": {
        "notice": "calculate debt factoring in decay"
      },
      "debtDecay(uint256)": {
        "notice": "amount of debt to decay from total debt for market ID"
      },
      "debtRatio(uint256)": {
        "notice": "calculate current ratio of debt to supply"
      },
      "deposit(uint256,uint256,uint256,address,address)": {
        "notice": "deposit quote tokens in exchange for a bond from a specified market"
      },
      "indexesFor(address)": {
        "notice": "all pending notes for user"
      },
      "isLive(uint256)": {
        "notice": "is a given market accepting deposits"
      },
      "liveMarkets()": {
        "notice": "returns an array of all active market IDs"
      },
      "liveMarketsFor(address)": {
        "notice": "returns an array of all active market IDs for a given quote token"
      },
      "marketPrice(uint256)": {
        "notice": "calculate current market price of quote token in base token"
      },
      "payoutFor(uint256,uint256)": {
        "notice": "payout due for amount of quote tokens"
      },
      "pendingFor(address,uint256)": {
        "notice": "calculate amount available for claim for a single note"
      },
      "pullNote(address,uint256)": {
        "notice": "transfer a note that has been approved by an address"
      },
      "pushNote(address,uint256)": {
        "notice": "approve an address to transfer a note"
      },
      "redeem(address,uint256[],bool)": {
        "notice": "redeem notes for user"
      },
      "redeemAll(address,bool)": {
        "notice": "redeem all redeemable markets for user"
      },
      "setPartnerTerm(address,uint256,uint256)": {
        "notice": "set partner term"
      },
      "setPartnerTermCap(uint256)": {
        "notice": "set Cap for referrer % reward"
      },
      "setPayoutCap(uint256)": {
        "notice": "set totalPayoutCap"
      },
      "setReferTerm(address,uint256,uint256)": {
        "notice": "set referrer term"
      },
      "setReferTermCap(uint256)": {
        "notice": "set Cap for referrer % reward"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12095,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "UNAUTHORIZED",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 12098,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "authority",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IHectagonAuthority)8626"
      },
      {
        "astId": 11746,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "rewards",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 11751,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "partnerTerms",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(PartnerTerm)11742_storage)"
      },
      {
        "astId": 11756,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "referTerms",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(ReferTerm)11737_storage)"
      },
      {
        "astId": 11759,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "referTermCap",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11762,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "partnerTermCap",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11765,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "daoInvestmentPercent",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 11768,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "daoCommunityPercent",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 12204,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "notes",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_array(t_struct(Note)8639_storage)dyn_storage)"
      },
      {
        "astId": 12210,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "noteTransfers",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 12216,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "treasury",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(ITreasury)8713"
      },
      {
        "astId": 3930,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "markets",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Market)8304_storage)dyn_storage"
      },
      {
        "astId": 3934,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "terms",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Terms)8315_storage)dyn_storage"
      },
      {
        "astId": 3938,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "metadata",
        "offset": 0,
        "slot": "14",
        "type": "t_array(t_struct(Metadata)8328_storage)dyn_storage"
      },
      {
        "astId": 3943,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "adjustments",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_struct(Adjustment)8337_storage)"
      },
      {
        "astId": 3945,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "totalPayout",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 3950,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "payoutCap",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3955,
        "contract": "contracts/BondDepository.sol:HectagonBondDepository",
        "label": "marketsForQuote",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Market)8304_storage)dyn_storage": {
        "base": "t_struct(Market)8304_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Market[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Metadata)8328_storage)dyn_storage": {
        "base": "t_struct(Metadata)8328_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Metadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Note)8639_storage)dyn_storage": {
        "base": "t_struct(Note)8639_storage",
        "encoding": "dynamic_array",
        "label": "struct INoteKeeper.Note[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Terms)8315_storage)dyn_storage": {
        "base": "t_struct(Terms)8315_storage",
        "encoding": "dynamic_array",
        "label": "struct IBondDepository.Terms[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)1052": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IHectagonAuthority)8626": {
        "encoding": "inplace",
        "label": "contract IHectagonAuthority",
        "numberOfBytes": "20"
      },
      "t_contract(ITreasury)8713": {
        "encoding": "inplace",
        "label": "contract ITreasury",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_struct(Note)8639_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct INoteKeeper.Note[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(Note)8639_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_address,t_struct(PartnerTerm)11742_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FrontEndRewarder.PartnerTerm)",
        "numberOfBytes": "32",
        "value": "t_struct(PartnerTerm)11742_storage"
      },
      "t_mapping(t_address,t_struct(ReferTerm)11737_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct FrontEndRewarder.ReferTerm)",
        "numberOfBytes": "32",
        "value": "t_struct(ReferTerm)11737_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(Adjustment)8337_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IBondDepository.Adjustment)",
        "numberOfBytes": "32",
        "value": "t_struct(Adjustment)8337_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Adjustment)8337_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Adjustment",
        "members": [
          {
            "astId": 8330,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "change",
            "offset": 0,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 8332,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "lastAdjustment",
            "offset": 8,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8334,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "timeToAdjusted",
            "offset": 14,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8336,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "active",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Market)8304_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Market",
        "members": [
          {
            "astId": 8290,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "capacity",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8293,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "quoteToken",
            "offset": 0,
            "slot": "1",
            "type": "t_contract(IERC20)1052"
          },
          {
            "astId": 8295,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "capacityInQuote",
            "offset": 20,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 8297,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "totalDebt",
            "offset": 21,
            "slot": "1",
            "type": "t_uint64"
          },
          {
            "astId": 8299,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "maxPayout",
            "offset": 0,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 8301,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "sold",
            "offset": 8,
            "slot": "2",
            "type": "t_uint64"
          },
          {
            "astId": 8303,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "purchased",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Metadata)8328_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Metadata",
        "members": [
          {
            "astId": 8317,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "lastTune",
            "offset": 0,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8319,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "lastDecay",
            "offset": 6,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8321,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "length",
            "offset": 12,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8323,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "depositInterval",
            "offset": 18,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8325,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "tuneInterval",
            "offset": 24,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8327,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "quoteDecimals",
            "offset": 30,
            "slot": "0",
            "type": "t_uint8"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Note)8639_storage": {
        "encoding": "inplace",
        "label": "struct INoteKeeper.Note",
        "members": [
          {
            "astId": 8630,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "payout",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 8632,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "created",
            "offset": 0,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 8634,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "matured",
            "offset": 6,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 8636,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "redeemed",
            "offset": 12,
            "slot": "1",
            "type": "t_uint48"
          },
          {
            "astId": 8638,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "marketID",
            "offset": 18,
            "slot": "1",
            "type": "t_uint48"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(PartnerTerm)11742_storage": {
        "encoding": "inplace",
        "label": "struct FrontEndRewarder.PartnerTerm",
        "members": [
          {
            "astId": 11739,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11741,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "percent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(ReferTerm)11737_storage": {
        "encoding": "inplace",
        "label": "struct FrontEndRewarder.ReferTerm",
        "members": [
          {
            "astId": 11734,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "referrerPercent",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11736,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "buyerPercent",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Terms)8315_storage": {
        "encoding": "inplace",
        "label": "struct IBondDepository.Terms",
        "members": [
          {
            "astId": 8306,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "fixedTerm",
            "offset": 0,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 8308,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "controlVariable",
            "offset": 1,
            "slot": "0",
            "type": "t_uint64"
          },
          {
            "astId": 8310,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "vesting",
            "offset": 9,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8312,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "conclusion",
            "offset": 15,
            "slot": "0",
            "type": "t_uint48"
          },
          {
            "astId": 8314,
            "contract": "contracts/BondDepository.sol:HectagonBondDepository",
            "label": "maxDebt",
            "offset": 21,
            "slot": "0",
            "type": "t_uint64"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint48": {
        "encoding": "inplace",
        "label": "uint48",
        "numberOfBytes": "6"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}