{
  "language": "Solidity",
  "sources": {
    "contracts/Treasury.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./libraries/SafeMath.sol\";\nimport \"./libraries/SafeERC20.sol\";\n\nimport \"./interfaces/IOwnable.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IERC20Metadata.sol\";\nimport \"./interfaces/IHECTA.sol\";\nimport \"./interfaces/IsHECTA.sol\";\nimport \"./interfaces/IBondingCalculator.sol\";\nimport \"./interfaces/ITreasury.sol\";\n\nimport \"./types/HectagonAccessControlled.sol\";\n\ncontract HectagonTreasury is HectagonAccessControlled, ITreasury {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ========== EVENTS ========== */\n\n    event Deposit(address indexed token, uint256 amount, uint256 value);\n    event Withdrawal(address indexed token, uint256 amount, uint256 value);\n    event CreateDebt(address indexed debtor, address indexed token, uint256 amount, uint256 value);\n    event RepayDebt(address indexed debtor, address indexed token, uint256 amount, uint256 value);\n    event Managed(address indexed token, uint256 amount);\n    event ReservesAudited(uint256 indexed totalReserves);\n    event Minted(address indexed caller, address indexed recipient, uint256 amount);\n    event PermissionQueued(STATUS indexed status, address queued);\n    event Permissioned(address addr, STATUS indexed status, bool result);\n\n    /* ========== DATA STRUCTURES ========== */\n\n    enum STATUS {\n        RESERVEDEPOSITOR,\n        RESERVESPENDER,\n        RESERVETOKEN,\n        RESERVEMANAGER,\n        LIQUIDITYDEPOSITOR,\n        LIQUIDITYTOKEN,\n        LIQUIDITYMANAGER,\n        RESERVEDEBTOR,\n        REWARDMANAGER,\n        SHECTA,\n        HECTADEBTOR\n    }\n\n    struct Queue {\n        STATUS managing;\n        address toPermit;\n        address calculator;\n        uint256 timelockEnd;\n        bool nullify;\n        bool executed;\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    IHECTA public immutable HECTA;\n    IsHECTA public sHECTA;\n\n    mapping(STATUS => address[]) public registry;\n    mapping(STATUS => mapping(address => bool)) public permissions;\n    mapping(address => address) public bondCalculator;\n\n    mapping(address => uint256) public debtLimit;\n\n    uint256 public totalReserves;\n    uint256 public totalDebt;\n    uint256 public hectaDebt;\n\n    Queue[] public permissionQueue;\n    uint256 public immutable blocksNeededForQueue;\n\n    bool public timelockEnabled;\n    bool public initialized;\n\n    uint256 public onChainGovernanceTimelock;\n\n    string internal notAccepted = \"Treasury: not accepted\";\n    string internal notApproved = \"Treasury: not approved\";\n    string internal invalidToken = \"Treasury: invalid token\";\n    string internal insufficientReserves = \"Treasury: insufficient reserves\";\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _hecta,\n        uint256 _timelock,\n        address _authority\n    ) HectagonAccessControlled(IHectagonAuthority(_authority)) {\n        require(_hecta != address(0), \"Zero address: HECTA\");\n        HECTA = IHECTA(_hecta);\n\n        timelockEnabled = false;\n        initialized = false;\n        blocksNeededForQueue = _timelock;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice allow approved address to deposit an asset for HECTA\n     * @param _amount uint256\n     * @param _token address\n     * @param _profit uint256\n     * @return send_ uint256\n     */\n    function deposit(\n        uint256 _amount,\n        address _token,\n        uint256 _profit\n    ) external override returns (uint256 send_) {\n        if (permissions[STATUS.RESERVETOKEN][_token]) {\n            require(permissions[STATUS.RESERVEDEPOSITOR][msg.sender], notApproved);\n        } else if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\n            require(permissions[STATUS.LIQUIDITYDEPOSITOR][msg.sender], notApproved);\n        } else {\n            revert(invalidToken);\n        }\n\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n\n        uint256 value = tokenValue(_token, _amount);\n        // mint HECTA needed and store amount of rewards for distribution\n        send_ = value.sub(_profit);\n        HECTA.mint(msg.sender, send_);\n\n        totalReserves = totalReserves.add(value);\n\n        emit Deposit(_token, _amount, value);\n    }\n\n    /**\n     * @notice allow approved address to burn HECTA for reserves\n     * @param _amount uint256\n     * @param _token address\n     */\n    function withdraw(uint256 _amount, address _token) external override {\n        require(permissions[STATUS.RESERVETOKEN][_token], notAccepted); // Only reserves can be used for redemptions\n        require(permissions[STATUS.RESERVESPENDER][msg.sender], notApproved);\n\n        uint256 value = tokenValue(_token, _amount);\n        HECTA.burnFrom(msg.sender, value);\n\n        totalReserves = totalReserves.sub(value);\n\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n\n        emit Withdrawal(_token, _amount, value);\n    }\n\n    /**\n     * @notice allow approved address to withdraw assets\n     * @param _token address\n     * @param _amount uint256\n     */\n    function manage(address _token, uint256 _amount) external override {\n        if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\n            require(permissions[STATUS.LIQUIDITYMANAGER][msg.sender], notApproved);\n        } else {\n            require(permissions[STATUS.RESERVEMANAGER][msg.sender], notApproved);\n        }\n        if (permissions[STATUS.RESERVETOKEN][_token] || permissions[STATUS.LIQUIDITYTOKEN][_token]) {\n            uint256 value = tokenValue(_token, _amount);\n            require(value <= excessReserves(), insufficientReserves);\n            totalReserves = totalReserves.sub(value);\n        }\n        IERC20(_token).safeTransfer(msg.sender, _amount);\n        emit Managed(_token, _amount);\n    }\n\n    /**\n     * @notice mint new HECTA using excess reserves\n     * @param _recipient address\n     * @param _amount uint256\n     */\n    function mint(address _recipient, uint256 _amount) external override {\n        require(permissions[STATUS.REWARDMANAGER][msg.sender], notApproved);\n        require(_amount <= excessReserves(), insufficientReserves);\n        HECTA.mint(_recipient, _amount);\n        emit Minted(msg.sender, _recipient, _amount);\n    }\n\n    /**\n     * DEBT: The debt functions allow approved addresses to borrow treasury assets\n     * or HECTA from the treasury, using sHECTA as collateral. This might allow an\n     * sHECTA holder to provide HECTA liquidity without taking on the opportunity cost\n     * of unstaking, or alter their backing without imposing risk onto the treasury.\n     * Many of these use cases are yet to be defined, but they appear promising.\n     * However, we urge the community to think critically and move slowly upon\n     * proposals to acquire these permissions.\n     */\n\n    /**\n     * @notice allow approved address to borrow reserves\n     * @param _amount uint256\n     * @param _token address\n     */\n    function incurDebt(uint256 _amount, address _token) external override {\n        uint256 value;\n        if (_token == address(HECTA)) {\n            require(permissions[STATUS.HECTADEBTOR][msg.sender], notApproved);\n            value = _amount;\n        } else {\n            require(permissions[STATUS.RESERVEDEBTOR][msg.sender], notApproved);\n            require(permissions[STATUS.RESERVETOKEN][_token], notAccepted);\n            value = tokenValue(_token, _amount);\n        }\n        require(value != 0, invalidToken);\n\n        sHECTA.changeDebt(value, msg.sender, true);\n        require(sHECTA.debtBalances(msg.sender) <= debtLimit[msg.sender], \"Treasury: exceeds limit\");\n        totalDebt = totalDebt.add(value);\n\n        if (_token == address(HECTA)) {\n            HECTA.mint(msg.sender, value);\n            hectaDebt = hectaDebt.add(value);\n        } else {\n            totalReserves = totalReserves.sub(value);\n            IERC20(_token).safeTransfer(msg.sender, _amount);\n        }\n        emit CreateDebt(msg.sender, _token, _amount, value);\n    }\n\n    /**\n     * @notice allow approved address to repay borrowed reserves with reserves\n     * @param _amount uint256\n     * @param _token address\n     */\n    function repayDebtWithReserve(uint256 _amount, address _token) external override {\n        require(permissions[STATUS.RESERVEDEBTOR][msg.sender], notApproved);\n        require(permissions[STATUS.RESERVETOKEN][_token], notAccepted);\n        IERC20(_token).safeTransferFrom(msg.sender, address(this), _amount);\n        uint256 value = tokenValue(_token, _amount);\n        sHECTA.changeDebt(value, msg.sender, false);\n        totalDebt = totalDebt.sub(value);\n        totalReserves = totalReserves.add(value);\n        emit RepayDebt(msg.sender, _token, _amount, value);\n    }\n\n    /**\n     * @notice allow approved address to repay borrowed reserves with HECTA\n     * @param _amount uint256\n     */\n    function repayDebtWithHECTA(uint256 _amount) external {\n        require(\n            permissions[STATUS.RESERVEDEBTOR][msg.sender] || permissions[STATUS.HECTADEBTOR][msg.sender],\n            notApproved\n        );\n        HECTA.burnFrom(msg.sender, _amount);\n        sHECTA.changeDebt(_amount, msg.sender, false);\n        totalDebt = totalDebt.sub(_amount);\n        hectaDebt = hectaDebt.sub(_amount);\n        emit RepayDebt(msg.sender, address(HECTA), _amount, _amount);\n    }\n\n    /* ========== MANAGERIAL FUNCTIONS ========== */\n\n    /**\n     * @notice takes inventory of all tracked assets\n     * @notice always consolidate to recognized reserves before audit\n     */\n    function auditReserves() external onlyGovernor {\n        uint256 reserves;\n        address[] memory reserveToken = registry[STATUS.RESERVETOKEN];\n        for (uint256 i = 0; i < reserveToken.length; i++) {\n            if (permissions[STATUS.RESERVETOKEN][reserveToken[i]]) {\n                reserves = reserves.add(tokenValue(reserveToken[i], IERC20(reserveToken[i]).balanceOf(address(this))));\n            }\n        }\n        address[] memory liquidityToken = registry[STATUS.LIQUIDITYTOKEN];\n        for (uint256 i = 0; i < liquidityToken.length; i++) {\n            if (permissions[STATUS.LIQUIDITYTOKEN][liquidityToken[i]]) {\n                reserves = reserves.add(\n                    tokenValue(liquidityToken[i], IERC20(liquidityToken[i]).balanceOf(address(this)))\n                );\n            }\n        }\n        totalReserves = reserves;\n        emit ReservesAudited(reserves);\n    }\n\n    /**\n     * @notice set max debt for address\n     * @param _address address\n     * @param _limit uint256\n     */\n    function setDebtLimit(address _address, uint256 _limit) external onlyGovernor {\n        debtLimit[_address] = _limit;\n    }\n\n    /**\n     * @notice enable permission from queue\n     * @param _status STATUS\n     * @param _address address\n     * @param _calculator address\n     */\n    function enable(\n        STATUS _status,\n        address _address,\n        address _calculator\n    ) external onlyGovernor {\n        require(timelockEnabled == false, \"Use queueTimelock\");\n        if (_status == STATUS.SHECTA) {\n            sHECTA = IsHECTA(_address);\n        } else {\n            permissions[_status][_address] = true;\n\n            if (_status == STATUS.LIQUIDITYTOKEN) {\n                bondCalculator[_address] = _calculator;\n            }\n\n            (bool registered, ) = indexInRegistry(_address, _status);\n            if (!registered) {\n                registry[_status].push(_address);\n\n                if (_status == STATUS.LIQUIDITYTOKEN || _status == STATUS.RESERVETOKEN) {\n                    (bool reg, uint256 index) = indexInRegistry(_address, _status);\n                    if (reg) {\n                        delete registry[_status][index];\n                    }\n                }\n            }\n        }\n        emit Permissioned(_address, _status, true);\n    }\n\n    /**\n     *  @notice disable permission from address\n     *  @param _status STATUS\n     *  @param _toDisable address\n     */\n    function disable(STATUS _status, address _toDisable) external {\n        require(msg.sender == authority.governor() || msg.sender == authority.guardian(), \"Only governor or guardian\");\n        permissions[_status][_toDisable] = false;\n        emit Permissioned(_toDisable, _status, false);\n    }\n\n    /**\n     * @notice check if registry contains address\n     * @return (bool, uint256)\n     */\n    function indexInRegistry(address _address, STATUS _status) public view returns (bool, uint256) {\n        address[] memory entries = registry[_status];\n        for (uint256 i = 0; i < entries.length; i++) {\n            if (_address == entries[i]) {\n                return (true, i);\n            }\n        }\n        return (false, 0);\n    }\n\n    /* ========== TIMELOCKED FUNCTIONS ========== */\n\n    // functions are used prior to enabling on-chain governance\n\n    /**\n     * @notice queue address to receive permission\n     * @param _status STATUS\n     * @param _address address\n     * @param _calculator address\n     */\n    function queueTimelock(\n        STATUS _status,\n        address _address,\n        address _calculator\n    ) external onlyGovernor {\n        require(_address != address(0));\n        require(timelockEnabled == true, \"Timelock is disabled, use enable\");\n\n        uint256 timelock = block.number.add(blocksNeededForQueue);\n        if (_status == STATUS.RESERVEMANAGER || _status == STATUS.LIQUIDITYMANAGER) {\n            timelock = block.number.add(blocksNeededForQueue.mul(2));\n        }\n        permissionQueue.push(\n            Queue({\n                managing: _status,\n                toPermit: _address,\n                calculator: _calculator,\n                timelockEnd: timelock,\n                nullify: false,\n                executed: false\n            })\n        );\n        emit PermissionQueued(_status, _address);\n    }\n\n    /**\n     *  @notice enable queued permission\n     *  @param _index uint256\n     */\n    function execute(uint256 _index) external {\n        require(timelockEnabled == true, \"Timelock is disabled, use enable\");\n\n        Queue memory info = permissionQueue[_index];\n\n        require(!info.nullify, \"Action has been nullified\");\n        require(!info.executed, \"Action has already been executed\");\n        require(block.number >= info.timelockEnd, \"Timelock not complete\");\n\n        if (info.managing == STATUS.SHECTA) {\n            // 9\n            sHECTA = IsHECTA(info.toPermit);\n        } else {\n            permissions[info.managing][info.toPermit] = true;\n\n            if (info.managing == STATUS.LIQUIDITYTOKEN) {\n                bondCalculator[info.toPermit] = info.calculator;\n            }\n            (bool registered, ) = indexInRegistry(info.toPermit, info.managing);\n            if (!registered) {\n                registry[info.managing].push(info.toPermit);\n\n                if (info.managing == STATUS.LIQUIDITYTOKEN) {\n                    (bool reg, uint256 index) = indexInRegistry(info.toPermit, STATUS.RESERVETOKEN);\n                    if (reg) {\n                        delete registry[STATUS.RESERVETOKEN][index];\n                    }\n                } else if (info.managing == STATUS.RESERVETOKEN) {\n                    (bool reg, uint256 index) = indexInRegistry(info.toPermit, STATUS.LIQUIDITYTOKEN);\n                    if (reg) {\n                        delete registry[STATUS.LIQUIDITYTOKEN][index];\n                    }\n                }\n            }\n        }\n        permissionQueue[_index].executed = true;\n        emit Permissioned(info.toPermit, info.managing, true);\n    }\n\n    /**\n     * @notice cancel timelocked action\n     * @param _index uint256\n     */\n    function nullify(uint256 _index) external onlyGovernor {\n        permissionQueue[_index].nullify = true;\n    }\n\n    /**\n     * @notice disables timelocked functions\n     */\n    function disableTimelock() external onlyGovernor {\n        require(timelockEnabled == true, \"timelock already disabled\");\n        if (onChainGovernanceTimelock != 0 && onChainGovernanceTimelock <= block.number) {\n            timelockEnabled = false;\n        } else {\n            onChainGovernanceTimelock = block.number.add(blocksNeededForQueue.mul(7)); // 7-day timelock\n        }\n    }\n\n    /**\n     * @notice enables timelocks after initilization\n     */\n    function initialize() external onlyGovernor {\n        require(initialized == false, \"Already initialized\");\n        timelockEnabled = true;\n        initialized = true;\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice returns excess reserves not backing tokens\n     * @return uint\n     */\n    function excessReserves() public view override returns (uint256) {\n        return totalReserves.sub(HECTA.totalSupply().sub(totalDebt));\n    }\n\n    /**\n     * @notice returns HECTA valuation of asset\n     * @param _token address\n     * @param _amount uint256\n     * @return value_ uint256\n     */\n    function tokenValue(address _token, uint256 _amount) public view override returns (uint256 value_) {\n        value_ = _amount.mul(10**IERC20Metadata(address(HECTA)).decimals()).div(10**IERC20Metadata(_token).decimals());\n\n        if (permissions[STATUS.LIQUIDITYTOKEN][_token]) {\n            value_ = IBondingCalculator(bondCalculator[_token]).valuation(_token, _amount);\n        }\n    }\n\n    /**\n     * @notice returns supply metric that cannot be manipulated by debt\n     * @dev use this any time you need to query supply\n     * @return uint256\n     */\n    function baseSupply() external view override returns (uint256) {\n        return HECTA.totalSupply() - hectaDebt;\n    }\n}\n"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\n// TODO(zx): Replace all instances of SafeMath with OZ implementation\nlibrary SafeMath {\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        assert(a == b * c + (a % b)); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    // Only used in the  BondingCalculator.sol\n    function sqrrt(uint256 a) internal pure returns (uint256 c) {\n        if (a > 3) {\n            c = a;\n            uint256 b = add(div(a, 2), 1);\n            while (b < c) {\n                c = b;\n                b = div(add(div(a, b), b), 2);\n            }\n        } else if (a != 0) {\n            c = 1;\n        }\n    }\n}\n"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.7.5;\n\nimport {IERC20} from \"../interfaces/IERC20.sol\";\n\n/// @notice Safe IERC20 and ETH transfer library that safely handles missing return values.\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v3-periphery/blob/main/contracts/libraries/TransferHelper.sol)\n/// Taken from Solmate\nlibrary SafeERC20 {\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FROM_FAILED\");\n    }\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.transfer.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"TRANSFER_FAILED\");\n    }\n\n    function safeApprove(\n        IERC20 token,\n        address to,\n        uint256 amount\n    ) internal {\n        (bool success, bytes memory data) = address(token).call(\n            abi.encodeWithSelector(IERC20.approve.selector, to, amount)\n        );\n\n        require(success && (data.length == 0 || abi.decode(data, (bool))), \"APPROVE_FAILED\");\n    }\n\n    function safeTransferETH(address to, uint256 amount) internal {\n        (bool success, ) = to.call{value: amount}(new bytes(0));\n\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n}\n"
    },
    "contracts/interfaces/IOwnable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IOwnable {\n    function owner() external view returns (address);\n\n    function renounceManagement() external;\n\n    function pushManagement(address newOwner_) external;\n\n    function pullManagement() external;\n}\n"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    },
    "contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface IERC20Metadata is IERC20 {\n    function name() external view returns (string memory);\n\n    function symbol() external view returns (string memory);\n\n    function decimals() external view returns (uint8);\n}\n"
    },
    "contracts/interfaces/IHECTA.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface IHECTA is IERC20 {\n    function mint(address account_, uint256 amount_) external;\n\n    function burn(uint256 amount) external;\n\n    function burnFrom(address account_, uint256 amount_) external;\n}\n"
    },
    "contracts/interfaces/IsHECTA.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface IsHECTA is IERC20 {\n    function rebase(uint256 hectaProfit_, uint256 epoch_) external returns (uint256);\n\n    function circulatingSupply() external view returns (uint256);\n\n    function gonsForBalance(uint256 amount) external view returns (uint256);\n\n    function balanceForGons(uint256 gons) external view returns (uint256);\n\n    function index() external view returns (uint256);\n\n    function toG(uint256 amount) external view returns (uint256);\n\n    function fromG(uint256 amount) external view returns (uint256);\n\n    function changeDebt(\n        uint256 amount,\n        address debtor,\n        bool add\n    ) external;\n\n    function debtBalances(address _address) external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IBondingCalculator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IBondingCalculator {\n    function markdown(address _LP) external view returns (uint256);\n\n    function valuation(address pair_, uint256 amount_) external view returns (uint256 _value);\n}\n"
    },
    "contracts/interfaces/ITreasury.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface ITreasury {\n    function deposit(\n        uint256 _amount,\n        address _token,\n        uint256 _profit\n    ) external returns (uint256);\n\n    function withdraw(uint256 _amount, address _token) external;\n\n    function tokenValue(address _token, uint256 _amount) external view returns (uint256 value_);\n\n    function mint(address _recipient, uint256 _amount) external;\n\n    function manage(address _token, uint256 _amount) external;\n\n    function incurDebt(uint256 amount_, address token_) external;\n\n    function repayDebtWithReserve(uint256 amount_, address token_) external;\n\n    function excessReserves() external view returns (uint256);\n\n    function baseSupply() external view returns (uint256);\n}\n"
    },
    "contracts/types/HectagonAccessControlled.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-only\npragma solidity >=0.7.5;\n\nimport \"../interfaces/IHectagonAuthority.sol\";\n\nabstract contract HectagonAccessControlled {\n    /* ========== EVENTS ========== */\n\n    event AuthorityUpdated(IHectagonAuthority indexed authority);\n\n    string UNAUTHORIZED = \"UNAUTHORIZED\"; // save gas\n\n    /* ========== STATE VARIABLES ========== */\n\n    IHectagonAuthority public authority;\n\n    /* ========== Constructor ========== */\n\n    constructor(IHectagonAuthority _authority) {\n        authority = _authority;\n        emit AuthorityUpdated(_authority);\n    }\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyGovernor() {\n        require(msg.sender == authority.governor(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyGuardian() {\n        require(msg.sender == authority.guardian(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyPolicy() {\n        require(msg.sender == authority.policy(), UNAUTHORIZED);\n        _;\n    }\n\n    modifier onlyVault() {\n        require(msg.sender == authority.vault(), UNAUTHORIZED);\n        _;\n    }\n\n    /* ========== GOV ONLY ========== */\n\n    function setAuthority(IHectagonAuthority _newAuthority) external onlyGovernor {\n        authority = _newAuthority;\n        emit AuthorityUpdated(_newAuthority);\n    }\n}\n"
    },
    "contracts/interfaces/IHectagonAuthority.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IHectagonAuthority {\n    /* ========== EVENTS ========== */\n\n    event GovernorPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event GuardianPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event PolicyPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n    event VaultPushed(address indexed from, address indexed to, bool _effectiveImmediately);\n\n    event GovernorPulled(address indexed from, address indexed to);\n    event GuardianPulled(address indexed from, address indexed to);\n    event PolicyPulled(address indexed from, address indexed to);\n    event VaultPulled(address indexed from, address indexed to);\n\n    /* ========== VIEW ========== */\n\n    function governor() external view returns (address);\n\n    function guardian() external view returns (address);\n\n    function policy() external view returns (address);\n\n    function vault() external view returns (address);\n}\n"
    },
    "contracts/StakingDistributor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./libraries/SafeERC20.sol\";\nimport \"./libraries/SafeMath.sol\";\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/ITreasury.sol\";\nimport \"./interfaces/IDistributor.sol\";\n\nimport \"./types/HectagonAccessControlled.sol\";\n\ncontract Distributor is IDistributor, HectagonAccessControlled {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n\n    /* ====== VARIABLES ====== */\n\n    IERC20 private immutable hecta;\n    ITreasury private immutable treasury;\n    address private immutable staking;\n\n    mapping(uint256 => Adjust) public adjustments;\n    uint256 public override bounty;\n\n    uint256 private immutable rateDenominator = 1_000_000;\n\n    /* ====== STRUCTS ====== */\n\n    struct Info {\n        uint256 rate; // in ten-thousandths ( 5000 = 0.5% )\n        address recipient;\n    }\n    Info[] public info;\n\n    struct Adjust {\n        bool add;\n        uint256 rate;\n        uint256 target;\n    }\n\n    /* ====== CONSTRUCTOR ====== */\n\n    constructor(\n        address _treasury,\n        address _hecta,\n        address _staking,\n        address _authority\n    ) HectagonAccessControlled(IHectagonAuthority(_authority)) {\n        require(_treasury != address(0), \"Zero address: Treasury\");\n        treasury = ITreasury(_treasury);\n        require(_hecta != address(0), \"Zero address: hecta\");\n        hecta = IERC20(_hecta);\n        require(_staking != address(0), \"Zero address: Staking\");\n        staking = _staking;\n    }\n\n    /* ====== PUBLIC FUNCTIONS ====== */\n\n    /**\n        @notice send epoch reward to staking contract\n     */\n    function distribute() external override {\n        require(msg.sender == staking, \"Only staking\");\n        // distribute rewards to each recipient\n        for (uint256 i = 0; i < info.length; i++) {\n            if (info[i].rate > 0) {\n                treasury.mint(info[i].recipient, nextRewardAt(info[i].rate)); // mint and send tokens\n                adjust(i); // check for adjustment\n            }\n        }\n    }\n\n    function retrieveBounty() external override returns (uint256) {\n        require(msg.sender == staking, \"Only staking\");\n        // If the distributor bounty is > 0, mint it for the staking contract.\n        if (bounty > 0) {\n            treasury.mint(address(staking), bounty);\n        }\n\n        return bounty;\n    }\n\n    /* ====== INTERNAL FUNCTIONS ====== */\n\n    /**\n        @notice increment reward rate for collector\n     */\n    function adjust(uint256 _index) internal {\n        Adjust memory adjustment = adjustments[_index];\n        if (adjustment.rate != 0) {\n            if (adjustment.add) {\n                // if rate should increase\n                info[_index].rate = info[_index].rate.add(adjustment.rate); // raise rate\n                if (info[_index].rate >= adjustment.target) {\n                    // if target met\n                    adjustments[_index].rate = 0; // turn off adjustment\n                    info[_index].rate = adjustment.target; // set to target\n                }\n            } else {\n                // if rate should decrease\n                if (info[_index].rate > adjustment.rate) {\n                    // protect from underflow\n                    info[_index].rate = info[_index].rate.sub(adjustment.rate); // lower rate\n                } else {\n                    info[_index].rate = 0;\n                }\n\n                if (info[_index].rate <= adjustment.target) {\n                    // if target met\n                    adjustments[_index].rate = 0; // turn off adjustment\n                    info[_index].rate = adjustment.target; // set to target\n                }\n            }\n        }\n    }\n\n    /* ====== VIEW FUNCTIONS ====== */\n\n    /**\n        @notice view function for next reward at given rate\n        @param _rate uint\n        @return uint\n     */\n    function nextRewardAt(uint256 _rate) public view override returns (uint256) {\n        return hecta.totalSupply().mul(_rate).div(rateDenominator);\n    }\n\n    /**\n        @notice view function for next reward for specified address\n        @param _recipient address\n        @return uint\n     */\n    function nextRewardFor(address _recipient) public view override returns (uint256) {\n        uint256 reward;\n        for (uint256 i = 0; i < info.length; i++) {\n            if (info[i].recipient == _recipient) {\n                reward = reward.add(nextRewardAt(info[i].rate));\n            }\n        }\n        return reward;\n    }\n\n    /* ====== POLICY FUNCTIONS ====== */\n\n    /**\n     * @notice set bounty to incentivize keepers\n     * @param _bounty uint256\n     */\n    function setBounty(uint256 _bounty) external override onlyGovernor {\n        require(_bounty <= 2e9, \"Too much\");\n        bounty = _bounty;\n    }\n\n    /**\n        @notice adds recipient for distributions\n        @param _recipient address\n        @param _rewardRate uint\n     */\n    function addRecipient(address _recipient, uint256 _rewardRate) external override onlyGovernor {\n        require(_recipient != address(0), \"Zero address: Recipient\");\n        require(_rewardRate <= rateDenominator, \"Rate cannot exceed denominator\");\n        info.push(Info({recipient: _recipient, rate: _rewardRate}));\n    }\n\n    /**\n        @notice removes recipient for distributions\n        @param _index uint\n     */\n    function removeRecipient(uint256 _index) external override {\n        require(\n            msg.sender == authority.governor() || msg.sender == authority.guardian(),\n            \"Caller is not governor or guardian\"\n        );\n        require(info[_index].recipient != address(0), \"Recipient does not exist\");\n        info[_index].recipient = address(0);\n        info[_index].rate = 0;\n    }\n\n    /**\n        @notice set adjustment info for a collector's reward rate\n        @param _index uint\n        @param _add bool\n        @param _rate uint\n        @param _target uint\n     */\n    function setAdjustment(\n        uint256 _index,\n        bool _add,\n        uint256 _rate,\n        uint256 _target\n    ) external override {\n        require(\n            msg.sender == authority.governor() || msg.sender == authority.guardian(),\n            \"Caller is not governor or guardian\"\n        );\n        require(info[_index].recipient != address(0), \"Recipient does not exist\");\n\n        if (msg.sender == authority.guardian()) {\n            require(_rate <= info[_index].rate.mul(25).div(1000), \"Limiter: cannot adjust by >2.5%\");\n        }\n\n        if (!_add) {\n            require(_rate <= info[_index].rate, \"Cannot decrease rate by more than it already is\");\n        }\n\n        adjustments[_index] = Adjust({add: _add, rate: _rate, target: _target});\n    }\n}\n"
    },
    "contracts/interfaces/IDistributor.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IDistributor {\n    function distribute() external;\n\n    function bounty() external view returns (uint256);\n\n    function retrieveBounty() external returns (uint256);\n\n    function nextRewardAt(uint256 _rate) external view returns (uint256);\n\n    function nextRewardFor(address _recipient) external view returns (uint256);\n\n    function setBounty(uint256 _bounty) external;\n\n    function addRecipient(address _recipient, uint256 _rewardRate) external;\n\n    function removeRecipient(uint256 _index) external;\n\n    function setAdjustment(\n        uint256 _index,\n        bool _add,\n        uint256 _rate,\n        uint256 _target\n    ) external;\n}\n"
    },
    "contracts/Staking.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./libraries/SafeMath.sol\";\nimport \"./libraries/SafeERC20.sol\";\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IsHECTA.sol\";\nimport \"./interfaces/IgHECTA.sol\";\nimport \"./interfaces/IDistributor.sol\";\n\nimport \"./types/HectagonAccessControlled.sol\";\n\ncontract HectagonStaking is HectagonAccessControlled {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeMath for uint256;\n    using SafeERC20 for IERC20;\n    using SafeERC20 for IsHECTA;\n    using SafeERC20 for IgHECTA;\n\n    /* ========== EVENTS ========== */\n\n    event DistributorSet(address distributor);\n    event WarmupSet(uint256 warmup);\n\n    /* ========== DATA STRUCTURES ========== */\n\n    struct Epoch {\n        uint256 length; // in seconds\n        uint256 number; // since inception\n        uint256 end; // timestamp\n        uint256 distribute; // amount\n    }\n\n    struct Claim {\n        uint256 deposit; // if forfeiting\n        uint256 gons; // staked balance\n        uint256 expiry; // end of warmup period\n        bool lock; // prevents malicious delays for claim\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    IERC20 public immutable HECTA;\n    IsHECTA public immutable sHECTA;\n    IgHECTA public immutable gHECTA;\n\n    Epoch public epoch;\n\n    IDistributor public distributor;\n\n    mapping(address => Claim) public warmupInfo;\n    uint256 public warmupPeriod;\n    uint256 private gonsInWarmup;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(\n        address _hecta,\n        address _sHECTA,\n        address _gHECTA,\n        uint256 _epochLength,\n        uint256 _firstEpochNumber,\n        uint256 _firstEpochTime,\n        address _authority\n    ) HectagonAccessControlled(IHectagonAuthority(_authority)) {\n        require(_hecta != address(0), \"Zero address: HECTA\");\n        HECTA = IERC20(_hecta);\n        require(_sHECTA != address(0), \"Zero address: sHECTA\");\n        sHECTA = IsHECTA(_sHECTA);\n        require(_gHECTA != address(0), \"Zero address: gHECTA\");\n        gHECTA = IgHECTA(_gHECTA);\n\n        epoch = Epoch({length: _epochLength, number: _firstEpochNumber, end: _firstEpochTime, distribute: 0});\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice stake HECTA to enter warmup\n     * @param _to address\n     * @param _amount uint\n     * @param _claim bool\n     * @param _rebasing bool\n     * @return uint\n     */\n    function stake(\n        address _to,\n        uint256 _amount,\n        bool _rebasing,\n        bool _claim\n    ) external returns (uint256) {\n        HECTA.safeTransferFrom(msg.sender, address(this), _amount);\n        _amount = _amount.add(rebase()); // add bounty if rebase occurred\n        if (_claim && warmupPeriod == 0) {\n            return _send(_to, _amount, _rebasing);\n        } else {\n            Claim memory info = warmupInfo[_to];\n            if (!info.lock) {\n                require(_to == msg.sender, \"External deposits for account are locked\");\n            }\n\n            warmupInfo[_to] = Claim({\n                deposit: info.deposit.add(_amount),\n                gons: info.gons.add(sHECTA.gonsForBalance(_amount)),\n                expiry: epoch.number.add(warmupPeriod),\n                lock: info.lock\n            });\n\n            gonsInWarmup = gonsInWarmup.add(sHECTA.gonsForBalance(_amount));\n\n            return _amount;\n        }\n    }\n\n    /**\n     * @notice retrieve stake from warmup\n     * @param _to address\n     * @param _rebasing bool\n     * @return uint\n     */\n    function claim(address _to, bool _rebasing) public returns (uint256) {\n        Claim memory info = warmupInfo[_to];\n\n        if (!info.lock) {\n            require(_to == msg.sender, \"External claims for account are locked\");\n        }\n\n        if (epoch.number >= info.expiry && info.expiry != 0) {\n            delete warmupInfo[_to];\n\n            gonsInWarmup = gonsInWarmup.sub(info.gons);\n\n            return _send(_to, sHECTA.balanceForGons(info.gons), _rebasing);\n        }\n        return 0;\n    }\n\n    /**\n     * @notice forfeit stake and retrieve HECTA\n     * @return uint\n     */\n    function forfeit() external returns (uint256) {\n        Claim memory info = warmupInfo[msg.sender];\n        delete warmupInfo[msg.sender];\n\n        gonsInWarmup = gonsInWarmup.sub(info.gons);\n\n        HECTA.safeTransfer(msg.sender, info.deposit);\n\n        return info.deposit;\n    }\n\n    /**\n     * @notice prevent new deposits or claims from ext. address (protection from malicious activity)\n     */\n    function toggleLock() external {\n        warmupInfo[msg.sender].lock = !warmupInfo[msg.sender].lock;\n    }\n\n    /**\n     * @notice redeem sHECTA for HECTAs\n     * @param _to address\n     * @param _amount uint\n     * @param _trigger bool\n     * @param _rebasing bool\n     * @return amount_ uint\n     */\n    function unstake(\n        address _to,\n        uint256 _amount,\n        bool _trigger,\n        bool _rebasing\n    ) external returns (uint256 amount_) {\n        amount_ = _amount;\n        uint256 bounty;\n        if (_trigger) {\n            bounty = rebase();\n        }\n        if (_rebasing) {\n            sHECTA.safeTransferFrom(msg.sender, address(this), _amount);\n            amount_ = amount_.add(bounty);\n        } else {\n            gHECTA.burn(msg.sender, _amount); // amount was given in gHECTA terms\n            amount_ = gHECTA.balanceFrom(amount_).add(bounty); // convert amount to HECTA terms & add bounty\n        }\n\n        require(amount_ <= HECTA.balanceOf(address(this)), \"Insufficient HECTA balance in contract\");\n        HECTA.safeTransfer(_to, amount_);\n    }\n\n    /**\n     * @notice convert _amount sHECTA into gBalance_ gHECTA\n     * @param _to address\n     * @param _amount uint\n     * @return gBalance_ uint\n     */\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_) {\n        sHECTA.safeTransferFrom(msg.sender, address(this), _amount);\n        gBalance_ = gHECTA.balanceTo(_amount);\n        gHECTA.mint(_to, gBalance_);\n    }\n\n    /**\n     * @notice convert _amount gHECTA into sBalance_ sHECTA\n     * @param _to address\n     * @param _amount uint\n     * @return sBalance_ uint\n     */\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_) {\n        gHECTA.burn(msg.sender, _amount);\n        sBalance_ = gHECTA.balanceFrom(_amount);\n        sHECTA.safeTransfer(_to, sBalance_);\n    }\n\n    /**\n     * @notice trigger rebase if epoch over\n     * @return uint256\n     */\n    function rebase() public returns (uint256) {\n        uint256 bounty;\n        if (epoch.end <= block.timestamp) {\n            sHECTA.rebase(epoch.distribute, epoch.number);\n\n            epoch.end = epoch.end.add(epoch.length);\n            epoch.number++;\n\n            if (address(distributor) != address(0)) {\n                distributor.distribute();\n                bounty = distributor.retrieveBounty(); // Will mint HECTA for this contract if there exists a bounty\n            }\n            uint256 balance = HECTA.balanceOf(address(this));\n            uint256 staked = sHECTA.circulatingSupply();\n            if (balance <= staked.add(bounty)) {\n                epoch.distribute = 0;\n            } else {\n                epoch.distribute = balance.sub(staked).sub(bounty);\n            }\n        }\n        return bounty;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    /**\n     * @notice send staker their amount as sHECTA or gHECTA\n     * @param _to address\n     * @param _amount uint\n     * @param _rebasing bool\n     */\n    function _send(\n        address _to,\n        uint256 _amount,\n        bool _rebasing\n    ) internal returns (uint256) {\n        if (_rebasing) {\n            sHECTA.safeTransfer(_to, _amount); // send as sHECTA (equal unit as HECTA)\n            return _amount;\n        } else {\n            gHECTA.mint(_to, gHECTA.balanceTo(_amount)); // send as gHECTA (convert units from HECTA)\n            return gHECTA.balanceTo(_amount);\n        }\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice returns the sHECTA index, which tracks rebase growth\n     * @return uint\n     */\n    function index() public view returns (uint256) {\n        return sHECTA.index();\n    }\n\n    /**\n     * @notice total supply in warmup\n     */\n    function supplyInWarmup() public view returns (uint256) {\n        return sHECTA.balanceForGons(gonsInWarmup);\n    }\n\n    /**\n     * @notice seconds until the next epoch begins\n     */\n    function secondsToNextEpoch() external view returns (uint256) {\n        return epoch.end.sub(block.timestamp);\n    }\n\n    /* ========== MANAGERIAL FUNCTIONS ========== */\n\n    /**\n     * @notice sets the contract address for LP staking\n     * @param _distributor address\n     */\n    function setDistributor(address _distributor) external onlyGovernor {\n        distributor = IDistributor(_distributor);\n        emit DistributorSet(_distributor);\n    }\n\n    /**\n     * @notice set warmup period for new stakers\n     * @param _warmupPeriod uint\n     */\n    function setWarmupLength(uint256 _warmupPeriod) external onlyGovernor {\n        warmupPeriod = _warmupPeriod;\n        emit WarmupSet(_warmupPeriod);\n    }\n}\n"
    },
    "contracts/interfaces/IgHECTA.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IERC20.sol\";\n\ninterface IgHECTA is IERC20 {\n    function mint(address _to, uint256 _amount) external;\n\n    function burn(address _from, uint256 _amount) external;\n\n    function index() external view returns (uint256);\n\n    function balanceFrom(uint256 _amount) external view returns (uint256);\n\n    function balanceTo(uint256 _amount) external view returns (uint256);\n}\n"
    },
    "contracts/sHectagonERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./libraries/Address.sol\";\nimport \"./libraries/SafeMath.sol\";\n\nimport \"./types/ERC20Permit.sol\";\n\nimport \"./interfaces/IgHECTA.sol\";\nimport \"./interfaces/IsHECTA.sol\";\nimport \"./interfaces/IStaking.sol\";\n\ncontract sHectagon is IsHECTA, ERC20Permit {\n    /* ========== DEPENDENCIES ========== */\n\n    using SafeMath for uint256;\n\n    /* ========== EVENTS ========== */\n\n    event LogSupply(uint256 indexed epoch, uint256 totalSupply);\n    event LogRebase(uint256 indexed epoch, uint256 rebase, uint256 index);\n    event LogStakingContractUpdated(address stakingContract);\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyStakingContract() {\n        require(msg.sender == stakingContract, \"StakingContract:  call is not staking contract\");\n        _;\n    }\n\n    /* ========== DATA STRUCTURES ========== */\n\n    struct Rebase {\n        uint256 epoch;\n        uint256 rebase; // 18 decimals\n        uint256 totalStakedBefore;\n        uint256 totalStakedAfter;\n        uint256 amountRebased;\n        uint256 index;\n        uint256 blockNumberOccured;\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    address internal initializer;\n\n    uint256 internal INDEX; // Index Gons - tracks rebase growth\n\n    address public stakingContract; // balance used to calc rebase\n    IgHECTA public gHECTA; // additional staked supply (governance token)\n\n    Rebase[] public rebases; // past rebase data\n\n    uint256 private constant MAX_UINT256 = type(uint256).max;\n    uint256 private constant INITIAL_FRAGMENTS_SUPPLY = 5_000_000 * 10**9;\n\n    // TOTAL_GONS is a multiple of INITIAL_FRAGMENTS_SUPPLY so that _gonsPerFragment is an integer.\n    // Use the highest value that fits in a uint256 for max granularity.\n    uint256 private constant TOTAL_GONS = MAX_UINT256 - (MAX_UINT256 % INITIAL_FRAGMENTS_SUPPLY);\n\n    // MAX_SUPPLY = maximum integer < (sqrt(4*TOTAL_GONS + 1) - 1) / 2\n    uint256 private constant MAX_SUPPLY = ~uint128(0); // (2^128) - 1\n\n    uint256 private _gonsPerFragment;\n    mapping(address => uint256) private _gonBalances;\n\n    mapping(address => mapping(address => uint256)) private _allowedValue;\n\n    address public treasury;\n    mapping(address => uint256) public override debtBalances;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor() ERC20(\"Staked HECTA\", \"sHECTA\", 9) ERC20Permit(\"Staked HECTA\") {\n        initializer = msg.sender;\n        _totalSupply = INITIAL_FRAGMENTS_SUPPLY;\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n    }\n\n    /* ========== INITIALIZATION ========== */\n\n    function setIndex(uint256 _index) external {\n        require(msg.sender == initializer, \"Initializer:  caller is not initializer\");\n        require(INDEX == 0, \"Cannot set INDEX again\");\n        INDEX = gonsForBalance(_index);\n    }\n\n    function setgHECTA(address _gHECTA) external {\n        require(msg.sender == initializer, \"Initializer:  caller is not initializer\");\n        require(address(gHECTA) == address(0), \"gHECTA:  gHECTA already set\");\n        require(_gHECTA != address(0), \"gHECTA:  gHECTA is not a valid contract\");\n        gHECTA = IgHECTA(_gHECTA);\n    }\n\n    // do this last\n    function initialize(address _stakingContract, address _treasury) external {\n        require(msg.sender == initializer, \"Initializer:  caller is not initializer\");\n\n        require(_stakingContract != address(0), \"Staking\");\n        stakingContract = _stakingContract;\n        _gonBalances[stakingContract] = TOTAL_GONS;\n\n        require(_treasury != address(0), \"Zero address: Treasury\");\n        treasury = _treasury;\n\n        emit Transfer(address(0x0), stakingContract, _totalSupply);\n        emit LogStakingContractUpdated(stakingContract);\n\n        initializer = address(0);\n    }\n\n    /* ========== REBASE ========== */\n\n    /**\n        @notice increases rHECTA supply to increase staking balances relative to profit_\n        @param profit_ uint256\n        @return uint256\n     */\n    function rebase(uint256 profit_, uint256 epoch_) public override onlyStakingContract returns (uint256) {\n        uint256 rebaseAmount;\n        uint256 circulatingSupply_ = circulatingSupply();\n        if (profit_ == 0) {\n            emit LogSupply(epoch_, _totalSupply);\n            emit LogRebase(epoch_, 0, index());\n            return _totalSupply;\n        } else if (circulatingSupply_ > 0) {\n            rebaseAmount = profit_.mul(_totalSupply).div(circulatingSupply_);\n        } else {\n            rebaseAmount = profit_;\n        }\n\n        _totalSupply = _totalSupply.add(rebaseAmount);\n\n        if (_totalSupply > MAX_SUPPLY) {\n            _totalSupply = MAX_SUPPLY;\n        }\n\n        _gonsPerFragment = TOTAL_GONS.div(_totalSupply);\n\n        _storeRebase(circulatingSupply_, profit_, epoch_);\n\n        return _totalSupply;\n    }\n\n    /**\n        @notice emits event with data about rebase\n        @param previousCirculating_ uint\n        @param profit_ uint\n        @param epoch_ uint\n     */\n    function _storeRebase(\n        uint256 previousCirculating_,\n        uint256 profit_,\n        uint256 epoch_\n    ) internal {\n        uint256 rebasePercent = profit_.mul(1e18).div(previousCirculating_);\n        rebases.push(\n            Rebase({\n                epoch: epoch_,\n                rebase: rebasePercent, // 18 decimals\n                totalStakedBefore: previousCirculating_,\n                totalStakedAfter: circulatingSupply(),\n                amountRebased: profit_,\n                index: index(),\n                blockNumberOccured: block.number\n            })\n        );\n\n        emit LogSupply(epoch_, _totalSupply);\n        emit LogRebase(epoch_, rebasePercent, index());\n    }\n\n    /* ========== MUTATIVE FUNCTIONS =========== */\n\n    function transfer(address to, uint256 value) public override(IERC20, ERC20) returns (bool) {\n        uint256 gonValue = value.mul(_gonsPerFragment);\n\n        _gonBalances[msg.sender] = _gonBalances[msg.sender].sub(gonValue);\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\n\n        require(balanceOf(msg.sender) >= debtBalances[msg.sender], \"Debt: cannot transfer amount\");\n        emit Transfer(msg.sender, to, value);\n        return true;\n    }\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) public override(IERC20, ERC20) returns (bool) {\n        _allowedValue[from][msg.sender] = _allowedValue[from][msg.sender].sub(value);\n        emit Approval(from, msg.sender, _allowedValue[from][msg.sender]);\n\n        uint256 gonValue = gonsForBalance(value);\n        _gonBalances[from] = _gonBalances[from].sub(gonValue);\n        _gonBalances[to] = _gonBalances[to].add(gonValue);\n\n        require(balanceOf(from) >= debtBalances[from], \"Debt: cannot transfer amount\");\n        emit Transfer(from, to, value);\n        return true;\n    }\n\n    function approve(address spender, uint256 value) public override(IERC20, ERC20) returns (bool) {\n        _approve(msg.sender, spender, value);\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public override returns (bool) {\n        _approve(msg.sender, spender, _allowedValue[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public override returns (bool) {\n        uint256 oldValue = _allowedValue[msg.sender][spender];\n        if (subtractedValue >= oldValue) {\n            _approve(msg.sender, spender, 0);\n        } else {\n            _approve(msg.sender, spender, oldValue.sub(subtractedValue));\n        }\n        return true;\n    }\n\n    // this function is called by the treasury, and informs sHECTA of changes to debt.\n    // note that addresses with debt balances cannot transfer collateralized sHECTA\n    // until the debt has been repaid.\n    function changeDebt(\n        uint256 amount,\n        address debtor,\n        bool add\n    ) external override {\n        require(msg.sender == treasury, \"Only treasury\");\n        if (add) {\n            debtBalances[debtor] = debtBalances[debtor].add(amount);\n        } else {\n            debtBalances[debtor] = debtBalances[debtor].sub(amount);\n        }\n        require(debtBalances[debtor] <= balanceOf(debtor), \"sHECTA: insufficient balance\");\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 value\n    ) internal virtual override {\n        _allowedValue[owner][spender] = value;\n        emit Approval(owner, spender, value);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    function balanceOf(address who) public view override(IERC20, ERC20) returns (uint256) {\n        return _gonBalances[who].div(_gonsPerFragment);\n    }\n\n    function gonsForBalance(uint256 amount) public view override returns (uint256) {\n        return amount.mul(_gonsPerFragment);\n    }\n\n    function balanceForGons(uint256 gons) public view override returns (uint256) {\n        return gons.div(_gonsPerFragment);\n    }\n\n    // toG converts an sHECTA balance to gHECTA terms. gHECTA is an 18 decimal token. balance given is in 18 decimal format.\n    function toG(uint256 amount) external view override returns (uint256) {\n        return gHECTA.balanceTo(amount);\n    }\n\n    // fromG converts a gHECTA balance to sHECTA terms. sHECTA is a 9 decimal token. balance given is in 9 decimal format.\n    function fromG(uint256 amount) external view override returns (uint256) {\n        return gHECTA.balanceFrom(amount);\n    }\n\n    // Staking contract holds excess sHECTA\n    function circulatingSupply() public view override returns (uint256) {\n        return\n            _totalSupply\n                .sub(balanceOf(stakingContract))\n                .add(gHECTA.balanceFrom(IERC20(address(gHECTA)).totalSupply()))\n                .add(IStaking(stakingContract).supplyInWarmup());\n    }\n\n    function index() public view override returns (uint256) {\n        return balanceForGons(INDEX);\n    }\n\n    function allowance(address owner_, address spender) public view override(IERC20, ERC20) returns (uint256) {\n        return _allowedValue[owner_][spender];\n    }\n}\n"
    },
    "contracts/libraries/Address.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\n// TODO(zx): replace with OZ implementation.\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies in extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain`call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return _functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    // function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\n    //     require(address(this).balance >= value, \"Address: insufficient balance for call\");\n    //     return _functionCallWithValue(target, data, value, errorMessage);\n    // }\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 weiValue,\n        string memory errorMessage\n    ) private returns (bytes memory) {\n        require(isContract(target), \"Address: call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.call{value: weiValue}(data);\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.3._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        // solhint-disable-next-line avoid-low-level-calls\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return _verifyCallResult(success, returndata, errorMessage);\n    }\n\n    function _verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) private pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                // solhint-disable-next-line no-inline-assembly\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n\n    function addressToString(address _address) internal pure returns (string memory) {\n        bytes32 _bytes = bytes32(uint256(_address));\n        bytes memory HEX = \"0123456789abcdef\";\n        bytes memory _addr = new bytes(42);\n\n        _addr[0] = \"0\";\n        _addr[1] = \"x\";\n\n        for (uint256 i = 0; i < 20; i++) {\n            _addr[2 + i * 2] = HEX[uint8(_bytes[i + 12] >> 4)];\n            _addr[3 + i * 2] = HEX[uint8(_bytes[i + 12] & 0x0f)];\n        }\n\n        return string(_addr);\n    }\n}\n"
    },
    "contracts/types/ERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.5;\n\nimport \"../interfaces/IERC20Permit.sol\";\nimport \"./ERC20.sol\";\nimport \"../cryptography/EIP712.sol\";\nimport \"../cryptography/ECDSA.sol\";\nimport \"../libraries/Counters.sol\";\n\n/**\n * @dev Implementation of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on `{IERC20-approve}`, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * _Available since v3.4._\n */\nabstract contract ERC20Permit is ERC20, IERC20Permit, EIP712 {\n    using Counters for Counters.Counter;\n\n    mapping(address => Counters.Counter) private _nonces;\n\n    // solhint-disable-next-line var-name-mixedcase\n    bytes32 private immutable _PERMIT_TYPEHASH =\n        keccak256(\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\");\n\n    /**\n     * @dev Initializes the {EIP712} domain separator using the `name` parameter, and setting `version` to `\"1\"`.\n     *\n     * It's a good idea to use the same `name` that is defined as the ERC20 token name.\n     */\n    constructor(string memory name) EIP712(name, \"1\") {}\n\n    /**\n     * @dev See {IERC20Permit-permit}.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) public virtual override {\n        require(block.timestamp <= deadline, \"ERC20Permit: expired deadline\");\n\n        bytes32 structHash = keccak256(abi.encode(_PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\n\n        bytes32 hash = _hashTypedDataV4(structHash);\n\n        address signer = ECDSA.recover(hash, v, r, s);\n        require(signer == owner, \"ERC20Permit: invalid signature\");\n\n        _approve(owner, spender, value);\n    }\n\n    /**\n     * @dev See {IERC20Permit-nonces}.\n     */\n    function nonces(address owner) public view virtual override returns (uint256) {\n        return _nonces[owner].current();\n    }\n\n    /**\n     * @dev See {IERC20Permit-DOMAIN_SEPARATOR}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view override returns (bytes32) {\n        return _domainSeparatorV4();\n    }\n\n    /**\n     * @dev \"Consume a nonce\": return the current value and increment.\n     *\n     * _Available since v4.1._\n     */\n    function _useNonce(address owner) internal virtual returns (uint256 current) {\n        Counters.Counter storage nonce = _nonces[owner];\n        current = nonce.current();\n        nonce.increment();\n    }\n}\n"
    },
    "contracts/interfaces/IStaking.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IStaking {\n    function stake(\n        address _to,\n        uint256 _amount,\n        bool _rebasing,\n        bool _claim\n    ) external returns (uint256);\n\n    function claim(address _recipient, bool _rebasing) external returns (uint256);\n\n    function forfeit() external returns (uint256);\n\n    function toggleLock() external;\n\n    function unstake(\n        address _to,\n        uint256 _amount,\n        bool _trigger,\n        bool _rebasing\n    ) external returns (uint256);\n\n    function wrap(address _to, uint256 _amount) external returns (uint256 gBalance_);\n\n    function unwrap(address _to, uint256 _amount) external returns (uint256 sBalance_);\n\n    function rebase() external;\n\n    function index() external view returns (uint256);\n\n    function contractBalance() external view returns (uint256);\n\n    function totalStaked() external view returns (uint256);\n\n    function supplyInWarmup() external view returns (uint256);\n}\n"
    },
    "contracts/interfaces/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.7.5;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as th xe allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "contracts/types/ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity >=0.7.5;\n\nimport \"../libraries/SafeMath.sol\";\n\nimport \"../interfaces/IERC20.sol\";\n\nabstract contract ERC20 is IERC20 {\n    using SafeMath for uint256;\n\n    // TODO comment actual hash value.\n    bytes32 private constant ERC20TOKEN_ERC1820_INTERFACE_ID = keccak256(\"ERC20Token\");\n\n    mapping(address => uint256) internal _balances;\n\n    mapping(address => mapping(address => uint256)) internal _allowances;\n\n    uint256 internal _totalSupply;\n\n    string internal _name;\n\n    string internal _symbol;\n\n    uint8 internal immutable _decimals;\n\n    constructor(\n        string memory name_,\n        string memory symbol_,\n        uint8 decimals_\n    ) {\n        _name = name_;\n        _symbol = symbol_;\n        _decimals = decimals_;\n    }\n\n    function name() public view returns (string memory) {\n        return _name;\n    }\n\n    function symbol() public view returns (string memory) {\n        return _symbol;\n    }\n\n    function decimals() public view virtual returns (uint8) {\n        return _decimals;\n    }\n\n    function totalSupply() public view override returns (uint256) {\n        return _totalSupply;\n    }\n\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(msg.sender, recipient, amount);\n        return true;\n    }\n\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(msg.sender, spender, amount);\n        return true;\n    }\n\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n        _approve(\n            sender,\n            msg.sender,\n            _allowances[sender][msg.sender].sub(amount, \"ERC20: transfer amount exceeds allowance\")\n        );\n        return true;\n    }\n\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(msg.sender, spender, _allowances[msg.sender][spender].add(addedValue));\n        return true;\n    }\n\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        _approve(\n            msg.sender,\n            spender,\n            _allowances[msg.sender][spender].sub(subtractedValue, \"ERC20: decreased allowance below zero\")\n        );\n        return true;\n    }\n\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        _balances[sender] = _balances[sender].sub(amount, \"ERC20: transfer amount exceeds balance\");\n        _balances[recipient] = _balances[recipient].add(amount);\n        emit Transfer(sender, recipient, amount);\n    }\n\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n        _beforeTokenTransfer(address(0), account, amount);\n        _totalSupply = _totalSupply.add(amount);\n        _balances[account] = _balances[account].add(amount);\n        emit Transfer(address(0), account, amount);\n    }\n\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        _balances[account] = _balances[account].sub(amount, \"ERC20: burn amount exceeds balance\");\n        _totalSupply = _totalSupply.sub(amount);\n        emit Transfer(account, address(0), amount);\n    }\n\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    function _beforeTokenTransfer(\n        address from_,\n        address to_,\n        uint256 amount_\n    ) internal virtual {}\n}\n"
    },
    "contracts/cryptography/EIP712.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.5;\n\nimport \"./ECDSA.sol\";\n\n/**\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\n *\n * The encoding specified in the EIP is very generic, and such a generic implementation in Solidity is not feasible,\n * thus this contract does not implement the encoding itself. Protocols need to implement the type-specific encoding\n * they need in their contracts using a combination of `abi.encode` and `keccak256`.\n *\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\n * ({_hashTypedDataV4}).\n *\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\n * the chain id to protect against replay attacks on an eventual fork of the chain.\n *\n * NOTE: This contract implements the version of the encoding known as \"v4\", as implemented by the JSON RPC method\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\n *\n * _Available since v3.4._\n */\nabstract contract EIP712 {\n    /* solhint-disable var-name-mixedcase */\n    // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\n    // invalidate the cached domain separator if the chain id changes.\n    bytes32 private immutable _CACHED_DOMAIN_SEPARATOR;\n    uint256 private immutable _CACHED_CHAIN_ID;\n\n    bytes32 private immutable _HASHED_NAME;\n    bytes32 private immutable _HASHED_VERSION;\n    bytes32 private immutable _TYPE_HASH;\n\n    /* solhint-enable var-name-mixedcase */\n\n    /**\n     * @dev Initializes the domain separator and parameter caches.\n     *\n     * The meaning of `name` and `version` is specified in\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\n     *\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\n     * - `version`: the current major version of the signing domain.\n     *\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\n     * contract upgrade].\n     */\n    constructor(string memory name, string memory version) {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        bytes32 hashedName = keccak256(bytes(name));\n        bytes32 hashedVersion = keccak256(bytes(version));\n        bytes32 typeHash = keccak256(\n            \"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\"\n        );\n        _HASHED_NAME = hashedName;\n        _HASHED_VERSION = hashedVersion;\n        _CACHED_CHAIN_ID = chainID;\n        _CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\n        _TYPE_HASH = typeHash;\n    }\n\n    /**\n     * @dev Returns the domain separator for the current chain.\n     */\n    function _domainSeparatorV4() internal view returns (bytes32) {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        if (chainID == _CACHED_CHAIN_ID) {\n            return _CACHED_DOMAIN_SEPARATOR;\n        } else {\n            return _buildDomainSeparator(_TYPE_HASH, _HASHED_NAME, _HASHED_VERSION);\n        }\n    }\n\n    function _buildDomainSeparator(\n        bytes32 typeHash,\n        bytes32 nameHash,\n        bytes32 versionHash\n    ) private view returns (bytes32) {\n        uint256 chainID;\n        assembly {\n            chainID := chainid()\n        }\n\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, chainID, address(this)));\n    }\n\n    /**\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\n     * function returns the hash of the fully encoded EIP712 message for this domain.\n     *\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\n     *\n     * ```solidity\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\n     *     keccak256(\"Mail(address to,string contents)\"),\n     *     mailTo,\n     *     keccak256(bytes(mailContents))\n     * )));\n     * address signer = ECDSA.recover(digest, signature);\n     * ```\n     */\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\n        return ECDSA.toTypedDataHash(_domainSeparatorV4(), structHash);\n    }\n}\n"
    },
    "contracts/cryptography/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.7.5;\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        } else if (error == RecoverError.InvalidSignatureV) {\n            revert(\"ECDSA: invalid signature 'v' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        // Check the signature length\n        // - case 65: r,s,v signature (standard)\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else if (signature.length == 64) {\n            bytes32 r;\n            bytes32 vs;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            assembly {\n                r := mload(add(signature, 0x20))\n                vs := mload(add(signature, 0x40))\n            }\n            return tryRecover(hash, r, vs);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address, RecoverError) {\n        bytes32 s;\n        uint8 v;\n        assembly {\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\n            v := add(shr(255, vs), 27)\n        }\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(\n        bytes32 hash,\n        bytes32 r,\n        bytes32 vs\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n        if (v != 27 && v != 28) {\n            return (address(0), RecoverError.InvalidSignatureV);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(\n        bytes32 hash,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", hash));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash));\n    }\n}\n"
    },
    "contracts/libraries/Counters.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./SafeMath.sol\";\n\nlibrary Counters {\n    using SafeMath for uint256;\n\n    struct Counter {\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\n        uint256 _value; // default: 0\n    }\n\n    function current(Counter storage counter) internal view returns (uint256) {\n        return counter._value;\n    }\n\n    function increment(Counter storage counter) internal {\n        // The {SafeMath} overflow check can be skipped here, see the comment at the top\n        counter._value += 1;\n    }\n\n    function decrement(Counter storage counter) internal {\n        counter._value = counter._value.sub(1);\n    }\n}\n"
    },
    "contracts/governance/gHECTA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.5;\n\nimport \"../libraries/SafeMath.sol\";\nimport \"../libraries/Address.sol\";\n\nimport \"../interfaces/IsHECTA.sol\";\nimport \"../interfaces/IgHECTA.sol\";\nimport \"../types/ERC20.sol\";\n\ncontract gHECTA is IgHECTA, ERC20 {\n    /* ========== DEPENDENCIES ========== */\n\n    using Address for address;\n    using SafeMath for uint256;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier onlyApproved() {\n        require(msg.sender == approved, \"Only approved\");\n        _;\n    }\n\n    /* ========== EVENTS ========== */\n\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\n    event DelegateVotesChanged(address indexed delegate, uint256 previousBalance, uint256 newBalance);\n\n    /* ========== DATA STRUCTURES ========== */\n\n    /// @notice A checkpoint for marking number of votes from a given block\n    struct Checkpoint {\n        uint256 fromBlock;\n        uint256 votes;\n    }\n\n    /* ========== STATE VARIABLES ========== */\n\n    IsHECTA public sHECTA;\n    address public approved;\n    bool public migrated;\n\n    mapping(address => mapping(uint256 => Checkpoint)) public checkpoints;\n    mapping(address => uint256) public numCheckpoints;\n    mapping(address => address) public delegates;\n\n    /* ========== CONSTRUCTOR ========== */\n\n    constructor(address _sHECTA) ERC20(\"Governance HECTA\", \"gHECTA\", 18) {\n        require(_sHECTA != address(0), \"Zero address: sHECTA\");\n        sHECTA = IsHECTA(_sHECTA);\n        approved = msg.sender;\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    /**\n     * @notice transfer mint rights from deployer to staking\n     * @notice can only be done once, at the time of contract migration\n     * @param _staking address\n     */\n    function setStaking(address _staking) external onlyApproved {\n        require(!migrated, \"Migrated\");\n        migrated = true;\n\n        require(_staking != approved, \"Invalid argument\");\n        require(_staking != address(0), \"Zero address found\");\n        approved = _staking;\n    }\n\n    /**\n     * @notice Delegate votes from `msg.sender` to `delegatee`\n     * @param delegatee The address to delegate votes to\n     */\n    function delegate(address delegatee) external {\n        return _delegate(msg.sender, delegatee);\n    }\n\n    /**\n        @notice mint gHECTA\n        @param _to address\n        @param _amount uint\n     */\n    function mint(address _to, uint256 _amount) external override onlyApproved {\n        _mint(_to, _amount);\n    }\n\n    /**\n        @notice burn gHECTA\n        @param _from address\n        @param _amount uint\n     */\n    function burn(address _from, uint256 _amount) external override onlyApproved {\n        _burn(_from, _amount);\n    }\n\n    /* ========== VIEW FUNCTIONS ========== */\n\n    /**\n     * @notice pull index from sHECTA token\n     */\n    function index() public view override returns (uint256) {\n        return sHECTA.index();\n    }\n\n    /**\n        @notice converts gHECTA amount to HECTA\n        @param _amount uint\n        @return uint\n     */\n    function balanceFrom(uint256 _amount) public view override returns (uint256) {\n        return _amount.mul(index()).div(10**decimals());\n    }\n\n    /**\n        @notice converts HECTA amount to gHECTA\n        @param _amount uint\n        @return uint\n     */\n    function balanceTo(uint256 _amount) public view override returns (uint256) {\n        return _amount.mul(10**decimals()).div(index());\n    }\n\n    /**\n     * @notice Gets the current votes balance for `account`\n     * @param account The address to get votes balance\n     * @return The number of current votes for `account`\n     */\n    function getCurrentVotes(address account) external view returns (uint256) {\n        uint256 nCheckpoints = numCheckpoints[account];\n        return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\n    }\n\n    /**\n     * @notice Determine the prior number of votes for an account as of a block number\n     * @dev Block number must be a finalized block or else this function will revert to prevent misinformation.\n     * @param account The address of the account to check\n     * @param blockNumber The block number to get the vote balance at\n     * @return The number of votes the account had as of the given block\n     */\n    function getPriorVotes(address account, uint256 blockNumber) external view returns (uint256) {\n        require(blockNumber < block.number, \"gHECTA::getPriorVotes: not yet determined\");\n\n        uint256 nCheckpoints = numCheckpoints[account];\n        if (nCheckpoints == 0) {\n            return 0;\n        }\n\n        // First check most recent balance\n        if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\n            return checkpoints[account][nCheckpoints - 1].votes;\n        }\n\n        // Next check implicit zero balance\n        if (checkpoints[account][0].fromBlock > blockNumber) {\n            return 0;\n        }\n\n        uint256 lower = 0;\n        uint256 upper = nCheckpoints - 1;\n        while (upper > lower) {\n            uint256 center = upper - (upper - lower) / 2; // ceil, avoiding overflow\n            Checkpoint memory cp = checkpoints[account][center];\n            if (cp.fromBlock == blockNumber) {\n                return cp.votes;\n            } else if (cp.fromBlock < blockNumber) {\n                lower = center;\n            } else {\n                upper = center - 1;\n            }\n        }\n        return checkpoints[account][lower].votes;\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _delegate(address delegator, address delegatee) internal {\n        address currentDelegate = delegates[delegator];\n        uint256 delegatorBalance = _balances[delegator];\n        delegates[delegator] = delegatee;\n\n        emit DelegateChanged(delegator, currentDelegate, delegatee);\n\n        _moveDelegates(currentDelegate, delegatee, delegatorBalance);\n    }\n\n    function _moveDelegates(\n        address srcRep,\n        address dstRep,\n        uint256 amount\n    ) internal {\n        if (srcRep != dstRep && amount > 0) {\n            if (srcRep != address(0)) {\n                uint256 srcRepNum = numCheckpoints[srcRep];\n                uint256 srcRepOld = srcRepNum > 0 ? checkpoints[srcRep][srcRepNum - 1].votes : 0;\n                uint256 srcRepNew = srcRepOld.sub(amount);\n                _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\n            }\n\n            if (dstRep != address(0)) {\n                uint256 dstRepNum = numCheckpoints[dstRep];\n                uint256 dstRepOld = dstRepNum > 0 ? checkpoints[dstRep][dstRepNum - 1].votes : 0;\n                uint256 dstRepNew = dstRepOld.add(amount);\n                _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\n            }\n        }\n    }\n\n    function _writeCheckpoint(\n        address delegatee,\n        uint256 nCheckpoints,\n        uint256 oldVotes,\n        uint256 newVotes\n    ) internal {\n        if (nCheckpoints > 0 && checkpoints[delegatee][nCheckpoints - 1].fromBlock == block.number) {\n            checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\n        } else {\n            checkpoints[delegatee][nCheckpoints] = Checkpoint(block.number, newVotes);\n            numCheckpoints[delegatee] = nCheckpoints + 1;\n        }\n\n        emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\n    }\n\n    /**\n        @notice Ensure delegation moves when token is transferred.\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal override {\n        _moveDelegates(delegates[from], delegates[to], amount);\n    }\n}\n"
    },
    "contracts/StandardBondingCalculator.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./libraries/SafeMath.sol\";\nimport \"./libraries/FixedPoint.sol\";\nimport \"./libraries/Address.sol\";\nimport \"./libraries/SafeERC20.sol\";\n\nimport \"./interfaces/IERC20Metadata.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IBondingCalculator.sol\";\nimport \"./interfaces/IUniswapV2ERC20.sol\";\nimport \"./interfaces/IUniswapV2Pair.sol\";\n\ncontract HectagonBondingCalculator is IBondingCalculator {\n    using FixedPoint for *;\n    using SafeMath for uint256;\n\n    IERC20 internal immutable HECTA;\n\n    constructor(address _HECTA) {\n        require(_HECTA != address(0), \"Zero address: HECTA\");\n        HECTA = IERC20(_HECTA);\n    }\n\n    function getKValue(address _pair) public view returns (uint256 k_) {\n        uint256 token0 = IERC20Metadata(IUniswapV2Pair(_pair).token0()).decimals();\n        uint256 token1 = IERC20Metadata(IUniswapV2Pair(_pair).token1()).decimals();\n        uint256 decimals = token0.add(token1).sub(IERC20Metadata(_pair).decimals());\n\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_pair).getReserves();\n        k_ = reserve0.mul(reserve1).div(10**decimals);\n    }\n\n    function getTotalValue(address _pair) public view returns (uint256 _value) {\n        _value = getKValue(_pair).sqrrt().mul(2);\n    }\n\n    function valuation(address _pair, uint256 amount_) external view override returns (uint256 _value) {\n        uint256 totalValue = getTotalValue(_pair);\n        uint256 totalSupply = IUniswapV2Pair(_pair).totalSupply();\n\n        _value = totalValue.mul(FixedPoint.fraction(amount_, totalSupply).decode112with18()).div(1e18);\n    }\n\n    function markdown(address _pair) external view override returns (uint256) {\n        (uint256 reserve0, uint256 reserve1, ) = IUniswapV2Pair(_pair).getReserves();\n\n        uint256 reserve;\n        if (IUniswapV2Pair(_pair).token0() == address(HECTA)) {\n            reserve = reserve1;\n        } else {\n            require(IUniswapV2Pair(_pair).token1() == address(HECTA), \"Invalid pair\");\n            reserve = reserve0;\n        }\n        return reserve.mul(2 * (10**IERC20Metadata(address(HECTA)).decimals())).div(getTotalValue(_pair));\n    }\n}\n"
    },
    "contracts/libraries/FixedPoint.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./FullMath.sol\";\n\nlibrary Babylonian {\n    function sqrt(uint256 x) internal pure returns (uint256) {\n        if (x == 0) return 0;\n\n        uint256 xx = x;\n        uint256 r = 1;\n        if (xx >= 0x100000000000000000000000000000000) {\n            xx >>= 128;\n            r <<= 64;\n        }\n        if (xx >= 0x10000000000000000) {\n            xx >>= 64;\n            r <<= 32;\n        }\n        if (xx >= 0x100000000) {\n            xx >>= 32;\n            r <<= 16;\n        }\n        if (xx >= 0x10000) {\n            xx >>= 16;\n            r <<= 8;\n        }\n        if (xx >= 0x100) {\n            xx >>= 8;\n            r <<= 4;\n        }\n        if (xx >= 0x10) {\n            xx >>= 4;\n            r <<= 2;\n        }\n        if (xx >= 0x8) {\n            r <<= 1;\n        }\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1;\n        r = (r + x / r) >> 1; // Seven iterations should be enough\n        uint256 r1 = x / r;\n        return (r < r1 ? r : r1);\n    }\n}\n\nlibrary BitMath {\n    function mostSignificantBit(uint256 x) internal pure returns (uint8 r) {\n        require(x > 0, \"BitMath::mostSignificantBit: zero\");\n\n        if (x >= 0x100000000000000000000000000000000) {\n            x >>= 128;\n            r += 128;\n        }\n        if (x >= 0x10000000000000000) {\n            x >>= 64;\n            r += 64;\n        }\n        if (x >= 0x100000000) {\n            x >>= 32;\n            r += 32;\n        }\n        if (x >= 0x10000) {\n            x >>= 16;\n            r += 16;\n        }\n        if (x >= 0x100) {\n            x >>= 8;\n            r += 8;\n        }\n        if (x >= 0x10) {\n            x >>= 4;\n            r += 4;\n        }\n        if (x >= 0x4) {\n            x >>= 2;\n            r += 2;\n        }\n        if (x >= 0x2) r += 1;\n    }\n}\n\nlibrary FixedPoint {\n    struct uq112x112 {\n        uint224 _x;\n    }\n\n    struct uq144x112 {\n        uint256 _x;\n    }\n\n    uint8 private constant RESOLUTION = 112;\n    uint256 private constant Q112 = 0x10000000000000000000000000000;\n    uint256 private constant Q224 = 0x100000000000000000000000000000000000000000000000000000000;\n    uint256 private constant LOWER_MASK = 0xffffffffffffffffffffffffffff; // decimal of UQ*x112 (lower 112 bits)\n\n    function decode(uq112x112 memory self) internal pure returns (uint112) {\n        return uint112(self._x >> RESOLUTION);\n    }\n\n    function decode112with18(uq112x112 memory self) internal pure returns (uint256) {\n        return uint256(self._x) / 5192296858534827;\n    }\n\n    function fraction(uint256 numerator, uint256 denominator) internal pure returns (uq112x112 memory) {\n        require(denominator > 0, \"FixedPoint::fraction: division by zero\");\n        if (numerator == 0) return FixedPoint.uq112x112(0);\n\n        if (numerator <= uint144(-1)) {\n            uint256 result = (numerator << RESOLUTION) / denominator;\n            require(result <= uint224(-1), \"FixedPoint::fraction: overflow\");\n            return uq112x112(uint224(result));\n        } else {\n            uint256 result = FullMath.mulDiv(numerator, Q112, denominator);\n            require(result <= uint224(-1), \"FixedPoint::fraction: overflow\");\n            return uq112x112(uint224(result));\n        }\n    }\n\n    // square root of a UQ112x112\n    // lossy between 0/1 and 40 bits\n    function sqrt(uq112x112 memory self) internal pure returns (uq112x112 memory) {\n        if (self._x <= uint144(-1)) {\n            return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << 112)));\n        }\n\n        uint8 safeShiftBits = 255 - BitMath.mostSignificantBit(self._x);\n        safeShiftBits -= safeShiftBits % 2;\n        return uq112x112(uint224(Babylonian.sqrt(uint256(self._x) << safeShiftBits) << ((112 - safeShiftBits) / 2)));\n    }\n}\n"
    },
    "contracts/interfaces/IUniswapV2ERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\ninterface IUniswapV2ERC20 {\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    function name() external pure returns (string memory);\n\n    function symbol() external pure returns (string memory);\n\n    function decimals() external pure returns (uint8);\n\n    function totalSupply() external view returns (uint256);\n\n    function balanceOf(address owner) external view returns (uint256);\n\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    function approve(address spender, uint256 value) external returns (bool);\n\n    function transfer(address to, uint256 value) external returns (bool);\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 value\n    ) external returns (bool);\n\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\n\n    function nonces(address owner) external view returns (uint256);\n\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n}\n"
    },
    "contracts/interfaces/IUniswapV2Pair.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity >=0.7.5;\n\nimport \"./IUniswapV2ERC20.sol\";\n\ninterface IUniswapV2Pair is IUniswapV2ERC20 {\n    function token0() external pure returns (address);\n\n    function token1() external pure returns (address);\n\n    function swap(\n        uint256 amount0Out,\n        uint256 amount1Out,\n        address to,\n        bytes calldata data\n    ) external;\n\n    function getReserves()\n        external\n        view\n        returns (\n            uint112 reserve0,\n            uint112 reserve1,\n            uint32 blockTimestampLast\n        );\n\n    function mint(address to) external returns (uint256 liquidity);\n\n    function sync() external;\n}\n"
    },
    "contracts/libraries/FullMath.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nlibrary FullMath {\n    function fullMul(uint256 x, uint256 y) private pure returns (uint256 l, uint256 h) {\n        uint256 mm = mulmod(x, y, uint256(-1));\n        l = x * y;\n        h = mm - l;\n        if (mm < l) h -= 1;\n    }\n\n    function fullDiv(\n        uint256 l,\n        uint256 h,\n        uint256 d\n    ) private pure returns (uint256) {\n        uint256 pow2 = d & -d;\n        d /= pow2;\n        l /= pow2;\n        l += h * ((-pow2) / pow2 + 1);\n        uint256 r = 1;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        r *= 2 - d * r;\n        return l * r;\n    }\n\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 d\n    ) internal pure returns (uint256) {\n        (uint256 l, uint256 h) = fullMul(x, y);\n\n        uint256 mm = mulmod(x, y, d);\n        if (mm > l) h -= 1;\n        l -= mm;\n\n        if (h == 0) return l / d;\n\n        require(h < d, \"FullMath: FULLDIV_OVERFLOW\");\n        return fullDiv(l, h, d);\n    }\n}\n"
    },
    "contracts/HectagonERC20.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity ^0.7.5;\n\nimport \"./libraries/SafeMath.sol\";\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IHECTA.sol\";\nimport \"./interfaces/IERC20Permit.sol\";\n\nimport \"./types/ERC20Permit.sol\";\nimport \"./types/HectagonAccessControlled.sol\";\n\ncontract HectagonERC20Token is ERC20Permit, IHECTA, HectagonAccessControlled {\n    using SafeMath for uint256;\n\n    constructor(address _authority)\n        ERC20(\"Hectagon\", \"HECTA\", 9)\n        ERC20Permit(\"Hectagon\")\n        HectagonAccessControlled(IHectagonAuthority(_authority))\n    {}\n\n    function mint(address account_, uint256 amount_) external override onlyVault {\n        _mint(account_, amount_);\n    }\n\n    function burn(uint256 amount) external override {\n        _burn(msg.sender, amount);\n    }\n\n    function burnFrom(address account_, uint256 amount_) external override {\n        _burnFrom(account_, amount_);\n    }\n\n    function _burnFrom(address account_, uint256 amount_) internal {\n        uint256 decreasedAllowance_ = allowance(account_, msg.sender).sub(\n            amount_,\n            \"ERC20: burn amount exceeds allowance\"\n        );\n\n        _approve(account_, msg.sender, decreasedAllowance_);\n        _burn(account_, amount_);\n    }\n}\n"
    },
    "contracts/HectaCirculatingSupplyConrtact.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.5;\n\nimport \"./interfaces/IERC20.sol\";\nimport \"./libraries/SafeMath.sol\";\n\ncontract HectaCirculatingSupplyConrtact {\n    using SafeMath for uint256;\n\n    bool public isInitialized;\n\n    address public Hecta;\n    address public owner;\n    address[] public nonCirculatingHectaAddresses;\n\n    constructor() {\n        owner = msg.sender;\n    }\n\n    function initialize(address _Hecta) external returns (bool) {\n        require(msg.sender == owner, \"caller is not owner\");\n        require(isInitialized == false);\n\n        Hecta = _Hecta;\n\n        isInitialized = true;\n\n        return true;\n    }\n\n    function HectaCirculatingSupply() external view returns (uint256) {\n        uint256 _totalSupply = IERC20(Hecta).totalSupply();\n\n        uint256 _circulatingSupply = _totalSupply.sub(getNonCirculatingHecta());\n\n        return _circulatingSupply;\n    }\n\n    function getNonCirculatingHecta() public view returns (uint256) {\n        uint256 _nonCirculatingHecta;\n\n        for (uint256 i = 0; i < nonCirculatingHectaAddresses.length; i = i.add(1)) {\n            _nonCirculatingHecta = _nonCirculatingHecta.add(IERC20(Hecta).balanceOf(nonCirculatingHectaAddresses[i]));\n        }\n\n        return _nonCirculatingHecta;\n    }\n\n    function setNonCirculatingHectaAddresses(address[] calldata _nonCirculatingAddresses) external returns (bool) {\n        require(msg.sender == owner, \"Sender is not owner\");\n        nonCirculatingHectaAddresses = _nonCirculatingAddresses;\n\n        return true;\n    }\n\n    function transferOwnership(address _owner) external returns (bool) {\n        require(msg.sender == owner, \"Sender is not owner\");\n\n        owner = _owner;\n\n        return true;\n    }\n}\n"
    },
    "contracts/RedeemHelper.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.7.5;\n\nimport \"./interfaces/IHectagonAuthority.sol\";\nimport \"./types/HectagonAccessControlled.sol\";\n\ninterface IBond {\n    function principle() external returns (address);\n\n    function bondPrice() external view returns (uint256 price_);\n\n    function deposit(\n        uint256 _amount,\n        uint256 _maxPrice,\n        address _depositor\n    ) external returns (uint256);\n\n    function redeem(address _recipient, bool _stake) external returns (uint256);\n\n    function pendingPayoutFor(address _depositor) external view returns (uint256 pendingPayout_);\n}\n\ncontract RedeemHelper is HectagonAccessControlled {\n    address[] public bonds;\n\n    /* ====== CONSTRUCTOR ====== */\n\n    constructor(address _authority) HectagonAccessControlled(IHectagonAuthority(_authority)) {}\n\n    function redeemAll(address _recipient, bool _stake) external {\n        for (uint256 i = 0; i < bonds.length; i++) {\n            if (bonds[i] != address(0)) {\n                if (IBond(bonds[i]).pendingPayoutFor(_recipient) > 0) {\n                    IBond(bonds[i]).redeem(_recipient, _stake);\n                }\n            }\n        }\n    }\n\n    function addBondContract(address _bond) external onlyGovernor {\n        require(_bond != address(0));\n        bonds.push(_bond);\n    }\n\n    function removeBondContract(uint256 _index) external onlyGovernor {\n        bonds[_index] = address(0);\n    }\n}\n"
    },
    "contracts/mocks/AccessControlledMock.sol": {
      "content": "// SPDX-License-Identifier: Unlicensed\npragma solidity 0.7.5;\n\nimport \"../types/HectagonAccessControlled.sol\";\n\ncontract AccessControlledMock is HectagonAccessControlled {\n    constructor(address _auth) HectagonAccessControlled(IHectagonAuthority(_auth)) {}\n\n    bool public governorOnlyTest;\n\n    bool public guardianOnlyTest;\n\n    bool public policyOnlyTest;\n\n    bool public vaultOnlyTest;\n\n    function governorTest() external onlyGovernor returns (bool) {\n        governorOnlyTest = true;\n        return governorOnlyTest;\n    }\n\n    function guardianTest() external onlyGuardian returns (bool) {\n        guardianOnlyTest = true;\n        return guardianOnlyTest;\n    }\n\n    function policyTest() external onlyPolicy returns (bool) {\n        policyOnlyTest = true;\n        return policyOnlyTest;\n    }\n\n    function vaultTest() external onlyVault returns (bool) {\n        governorOnlyTest = true;\n        return governorOnlyTest;\n    }\n}\n"
    },
    "contracts/testnet/HectaFaucet.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0\npragma solidity 0.7.5;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../types/Ownable.sol\";\n\ncontract HectaFaucet is Ownable {\n    IERC20 public hecta;\n\n    constructor(address _hecta) {\n        hecta = IERC20(_hecta);\n    }\n\n    function setOhm(address _hecta) external onlyOwner {\n        hecta = IERC20(_hecta);\n    }\n\n    function dispense() external {\n        hecta.transfer(msg.sender, 1e9);\n    }\n}\n"
    },
    "contracts/types/Ownable.sol": {
      "content": "// SPDX-License-Identifier: AGPL-3.0-or-later\npragma solidity >=0.7.5;\n\nimport \"../interfaces/IOwnable.sol\";\n\n/*\n * push & pull model\n */\nabstract contract Ownable is IOwnable {\n    address internal _owner;\n    address internal _newOwner;\n\n    event OwnershipPushed(address indexed previousOwner, address indexed newOwner);\n    event OwnershipPulled(address indexed previousOwner, address indexed newOwner);\n\n    constructor() {\n        _owner = msg.sender;\n        emit OwnershipPushed(address(0), _owner);\n    }\n\n    function owner() public view override returns (address) {\n        return _owner;\n    }\n\n    modifier onlyOwner() {\n        require(_owner == msg.sender, \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    function renounceManagement() public virtual override onlyOwner {\n        emit OwnershipPulled(_owner, address(0));\n        _owner = address(0);\n        _newOwner = address(0);\n    }\n\n    function pushManagement(address newOwner_) public virtual override onlyOwner {\n        emit OwnershipPushed(_owner, newOwner_);\n        _newOwner = newOwner_;\n    }\n\n    function pullManagement() public virtual override {\n        require(msg.sender == _newOwner, \"Ownable: must be new owner to pull\");\n        emit OwnershipPulled(_owner, _newOwner);\n        _owner = _newOwner;\n        _newOwner = address(0);\n    }\n}\n"
    }
  },
  "settings": {
    "metadata": {
      "bytecodeHash": "none",
      "useLiteralContent": true
    },
    "optimizer": {
      "enabled": true,
      "runs": 800
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    }
  }
}